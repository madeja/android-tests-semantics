-- phpMyAdmin SQL Dump
-- version 4.7.7
-- https://www.phpmyadmin.net/
--
-- Host: localhost
-- Generation Time: May 13, 2019 at 01:52 PM
-- Server version: 10.1.30-MariaDB
-- PHP Version: 7.2.1

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `dataset`
--

-- --------------------------------------------------------

--
-- Table structure for table `projects`
--

CREATE TABLE `projects` (
  `id` int(10) UNSIGNED NOT NULL,
  `name` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL,
  `package_name` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL,
  `url` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL,
  `technology_id` int(10) UNSIGNED NOT NULL,
  `stars_count` int(10) UNSIGNED DEFAULT NULL,
  `gh_repo_data` longtext COLLATE utf8mb4_unicode_ci,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `projects`
--

INSERT INTO `projects` (`id`, `name`, `package_name`, `url`, `technology_id`, `stars_count`, `gh_repo_data`, `deleted_at`, `created_at`, `updated_at`) VALUES
(1, 'Android-oss', 'kickstarter/android-oss', 'https://github.com/kickstarter/android-oss', 2, 5107, '{\n  \"id\": 76278501,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnk3NjI3ODUwMQ==\",\n  \"name\": \"android-oss\",\n  \"full_name\": \"kickstarter/android-oss\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"kickstarter\",\n    \"id\": 120676,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjEyMDY3Ng==\",\n    \"avatar_url\": \"https://avatars1.githubusercontent.com/u/120676?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/kickstarter\",\n    \"html_url\": \"https://github.com/kickstarter\",\n    \"followers_url\": \"https://api.github.com/users/kickstarter/followers\",\n    \"following_url\": \"https://api.github.com/users/kickstarter/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/kickstarter/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/kickstarter/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/kickstarter/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/kickstarter/orgs\",\n    \"repos_url\": \"https://api.github.com/users/kickstarter/repos\",\n    \"events_url\": \"https://api.github.com/users/kickstarter/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/kickstarter/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/kickstarter/android-oss\",\n  \"description\": \"Kickstarter for Android. Bring new ideas to life, anywhere.\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/kickstarter/android-oss\",\n  \"forks_url\": \"https://api.github.com/repos/kickstarter/android-oss/forks\",\n  \"keys_url\": \"https://api.github.com/repos/kickstarter/android-oss/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/kickstarter/android-oss/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/kickstarter/android-oss/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/kickstarter/android-oss/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/kickstarter/android-oss/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/kickstarter/android-oss/events\",\n  \"assignees_url\": \"https://api.github.com/repos/kickstarter/android-oss/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/kickstarter/android-oss/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/kickstarter/android-oss/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/kickstarter/android-oss/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/kickstarter/android-oss/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/kickstarter/android-oss/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/kickstarter/android-oss/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/kickstarter/android-oss/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/kickstarter/android-oss/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/kickstarter/android-oss/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/kickstarter/android-oss/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/kickstarter/android-oss/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/kickstarter/android-oss/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/kickstarter/android-oss/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/kickstarter/android-oss/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/kickstarter/android-oss/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/kickstarter/android-oss/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/kickstarter/android-oss/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/kickstarter/android-oss/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/kickstarter/android-oss/merges\",\n  \"archive_url\": \"https://api.github.com/repos/kickstarter/android-oss/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/kickstarter/android-oss/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/kickstarter/android-oss/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/kickstarter/android-oss/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/kickstarter/android-oss/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/kickstarter/android-oss/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/kickstarter/android-oss/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/kickstarter/android-oss/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/kickstarter/android-oss/deployments\",\n  \"created_at\": \"2016-12-12T17:15:41Z\",\n  \"updated_at\": \"2019-02-26T06:32:55Z\",\n  \"pushed_at\": \"2019-02-25T20:59:57Z\",\n  \"git_url\": \"git://github.com/kickstarter/android-oss.git\",\n  \"ssh_url\": \"git@github.com:kickstarter/android-oss.git\",\n  \"clone_url\": \"https://github.com/kickstarter/android-oss.git\",\n  \"svn_url\": \"https://github.com/kickstarter/android-oss\",\n  \"homepage\": \"https://www.kickstarter.com/mobile\",\n  \"size\": 23947,\n  \"stargazers_count\": 5107,\n  \"watchers_count\": 5107,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": false,\n  \"forks_count\": 881,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 0,\n  \"license\": {\n    \"key\": \"apache-2.0\",\n    \"name\": \"Apache License 2.0\",\n    \"spdx_id\": \"Apache-2.0\",\n    \"url\": \"https://api.github.com/licenses/apache-2.0\",\n    \"node_id\": \"MDc6TGljZW5zZTI=\"\n  },\n  \"forks\": 881,\n  \"open_issues\": 0,\n  \"watchers\": 5107,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"organization\": {\n    \"login\": \"kickstarter\",\n    \"id\": 120676,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjEyMDY3Ng==\",\n    \"avatar_url\": \"https://avatars1.githubusercontent.com/u/120676?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/kickstarter\",\n    \"html_url\": \"https://github.com/kickstarter\",\n    \"followers_url\": \"https://api.github.com/users/kickstarter/followers\",\n    \"following_url\": \"https://api.github.com/users/kickstarter/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/kickstarter/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/kickstarter/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/kickstarter/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/kickstarter/orgs\",\n    \"repos_url\": \"https://api.github.com/users/kickstarter/repos\",\n    \"events_url\": \"https://api.github.com/users/kickstarter/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/kickstarter/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"network_count\": 881,\n  \"subscribers_count\": 185\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:48:56'),
(2, 'NewPipe', 'TeamNewPipe/NewPipe', 'https://github.com/TeamNewPipe/NewPipe', 2, 5247, '{\n  \"id\": 41889031,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnk0MTg4OTAzMQ==\",\n  \"name\": \"NewPipe\",\n  \"full_name\": \"TeamNewPipe/NewPipe\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"TeamNewPipe\",\n    \"id\": 22159318,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjIyMTU5MzE4\",\n    \"avatar_url\": \"https://avatars1.githubusercontent.com/u/22159318?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/TeamNewPipe\",\n    \"html_url\": \"https://github.com/TeamNewPipe\",\n    \"followers_url\": \"https://api.github.com/users/TeamNewPipe/followers\",\n    \"following_url\": \"https://api.github.com/users/TeamNewPipe/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/TeamNewPipe/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/TeamNewPipe/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/TeamNewPipe/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/TeamNewPipe/orgs\",\n    \"repos_url\": \"https://api.github.com/users/TeamNewPipe/repos\",\n    \"events_url\": \"https://api.github.com/users/TeamNewPipe/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/TeamNewPipe/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/TeamNewPipe/NewPipe\",\n  \"description\": \"A lightweight Youtube frontend for Android.\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe\",\n  \"forks_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/forks\",\n  \"keys_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/events\",\n  \"assignees_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/merges\",\n  \"archive_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/TeamNewPipe/NewPipe/deployments\",\n  \"created_at\": \"2015-09-03T23:39:26Z\",\n  \"updated_at\": \"2019-02-26T07:49:44Z\",\n  \"pushed_at\": \"2019-02-25T11:25:15Z\",\n  \"git_url\": \"git://github.com/TeamNewPipe/NewPipe.git\",\n  \"ssh_url\": \"git@github.com:TeamNewPipe/NewPipe.git\",\n  \"clone_url\": \"https://github.com/TeamNewPipe/NewPipe.git\",\n  \"svn_url\": \"https://github.com/TeamNewPipe/NewPipe\",\n  \"homepage\": null,\n  \"size\": 25626,\n  \"stargazers_count\": 5247,\n  \"watchers_count\": 5247,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": false,\n  \"forks_count\": 835,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 596,\n  \"license\": {\n    \"key\": \"other\",\n    \"name\": \"Other\",\n    \"spdx_id\": \"NOASSERTION\",\n    \"url\": null,\n    \"node_id\": \"MDc6TGljZW5zZTA=\"\n  },\n  \"forks\": 835,\n  \"open_issues\": 596,\n  \"watchers\": 5247,\n  \"default_branch\": \"dev\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"organization\": {\n    \"login\": \"TeamNewPipe\",\n    \"id\": 22159318,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjIyMTU5MzE4\",\n    \"avatar_url\": \"https://avatars1.githubusercontent.com/u/22159318?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/TeamNewPipe\",\n    \"html_url\": \"https://github.com/TeamNewPipe\",\n    \"followers_url\": \"https://api.github.com/users/TeamNewPipe/followers\",\n    \"following_url\": \"https://api.github.com/users/TeamNewPipe/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/TeamNewPipe/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/TeamNewPipe/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/TeamNewPipe/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/TeamNewPipe/orgs\",\n    \"repos_url\": \"https://api.github.com/users/TeamNewPipe/repos\",\n    \"events_url\": \"https://api.github.com/users/TeamNewPipe/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/TeamNewPipe/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"network_count\": 835,\n  \"subscribers_count\": 280\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:48:57'),
(3, 'WordPress for Android', 'wordpress-mobile/WordPress-Android', 'https://github.com/wordpress-mobile/WordPress-Android', 2, 1980, '{\n  \"id\": 9306568,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnk5MzA2NTY4\",\n  \"name\": \"WordPress-Android\",\n  \"full_name\": \"wordpress-mobile/WordPress-Android\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"wordpress-mobile\",\n    \"id\": 1306301,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjEzMDYzMDE=\",\n    \"avatar_url\": \"https://avatars2.githubusercontent.com/u/1306301?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/wordpress-mobile\",\n    \"html_url\": \"https://github.com/wordpress-mobile\",\n    \"followers_url\": \"https://api.github.com/users/wordpress-mobile/followers\",\n    \"following_url\": \"https://api.github.com/users/wordpress-mobile/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/wordpress-mobile/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/wordpress-mobile/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/wordpress-mobile/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/wordpress-mobile/orgs\",\n    \"repos_url\": \"https://api.github.com/users/wordpress-mobile/repos\",\n    \"events_url\": \"https://api.github.com/users/wordpress-mobile/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/wordpress-mobile/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/wordpress-mobile/WordPress-Android\",\n  \"description\": \"WordPress for Android\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android\",\n  \"forks_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/forks\",\n  \"keys_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/events\",\n  \"assignees_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/merges\",\n  \"archive_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/wordpress-mobile/WordPress-Android/deployments\",\n  \"created_at\": \"2013-04-08T20:52:40Z\",\n  \"updated_at\": \"2019-02-26T09:29:06Z\",\n  \"pushed_at\": \"2019-02-26T10:02:28Z\",\n  \"git_url\": \"git://github.com/wordpress-mobile/WordPress-Android.git\",\n  \"ssh_url\": \"git@github.com:wordpress-mobile/WordPress-Android.git\",\n  \"clone_url\": \"https://github.com/wordpress-mobile/WordPress-Android.git\",\n  \"svn_url\": \"https://github.com/wordpress-mobile/WordPress-Android\",\n  \"homepage\": \"http://android.wordpress.org\",\n  \"size\": 211380,\n  \"stargazers_count\": 1980,\n  \"watchers_count\": 1980,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": false,\n  \"forks_count\": 992,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 313,\n  \"license\": {\n    \"key\": \"gpl-2.0\",\n    \"name\": \"GNU General Public License v2.0\",\n    \"spdx_id\": \"GPL-2.0\",\n    \"url\": \"https://api.github.com/licenses/gpl-2.0\",\n    \"node_id\": \"MDc6TGljZW5zZTg=\"\n  },\n  \"forks\": 992,\n  \"open_issues\": 313,\n  \"watchers\": 1980,\n  \"default_branch\": \"develop\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"organization\": {\n    \"login\": \"wordpress-mobile\",\n    \"id\": 1306301,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjEzMDYzMDE=\",\n    \"avatar_url\": \"https://avatars2.githubusercontent.com/u/1306301?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/wordpress-mobile\",\n    \"html_url\": \"https://github.com/wordpress-mobile\",\n    \"followers_url\": \"https://api.github.com/users/wordpress-mobile/followers\",\n    \"following_url\": \"https://api.github.com/users/wordpress-mobile/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/wordpress-mobile/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/wordpress-mobile/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/wordpress-mobile/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/wordpress-mobile/orgs\",\n    \"repos_url\": \"https://api.github.com/users/wordpress-mobile/repos\",\n    \"events_url\": \"https://api.github.com/users/wordpress-mobile/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/wordpress-mobile/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"network_count\": 992,\n  \"subscribers_count\": 206\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:48:57'),
(4, 'Plaid', 'nickbutcher/plaid', 'https://github.com/nickbutcher/plaid', 2, 12719, '{\n  \"id\": 45261969,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnk0NTI2MTk2OQ==\",\n  \"name\": \"plaid\",\n  \"full_name\": \"nickbutcher/plaid\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"nickbutcher\",\n    \"id\": 352556,\n    \"node_id\": \"MDQ6VXNlcjM1MjU1Ng==\",\n    \"avatar_url\": \"https://avatars2.githubusercontent.com/u/352556?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/nickbutcher\",\n    \"html_url\": \"https://github.com/nickbutcher\",\n    \"followers_url\": \"https://api.github.com/users/nickbutcher/followers\",\n    \"following_url\": \"https://api.github.com/users/nickbutcher/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/nickbutcher/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/nickbutcher/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/nickbutcher/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/nickbutcher/orgs\",\n    \"repos_url\": \"https://api.github.com/users/nickbutcher/repos\",\n    \"events_url\": \"https://api.github.com/users/nickbutcher/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/nickbutcher/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/nickbutcher/plaid\",\n  \"description\": \"An Android app which provides design news & inspiration as well as being an example of implementing material design.\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/nickbutcher/plaid\",\n  \"forks_url\": \"https://api.github.com/repos/nickbutcher/plaid/forks\",\n  \"keys_url\": \"https://api.github.com/repos/nickbutcher/plaid/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/nickbutcher/plaid/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/nickbutcher/plaid/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/nickbutcher/plaid/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/nickbutcher/plaid/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/nickbutcher/plaid/events\",\n  \"assignees_url\": \"https://api.github.com/repos/nickbutcher/plaid/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/nickbutcher/plaid/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/nickbutcher/plaid/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/nickbutcher/plaid/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/nickbutcher/plaid/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/nickbutcher/plaid/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/nickbutcher/plaid/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/nickbutcher/plaid/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/nickbutcher/plaid/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/nickbutcher/plaid/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/nickbutcher/plaid/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/nickbutcher/plaid/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/nickbutcher/plaid/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/nickbutcher/plaid/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/nickbutcher/plaid/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/nickbutcher/plaid/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/nickbutcher/plaid/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/nickbutcher/plaid/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/nickbutcher/plaid/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/nickbutcher/plaid/merges\",\n  \"archive_url\": \"https://api.github.com/repos/nickbutcher/plaid/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/nickbutcher/plaid/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/nickbutcher/plaid/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/nickbutcher/plaid/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/nickbutcher/plaid/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/nickbutcher/plaid/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/nickbutcher/plaid/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/nickbutcher/plaid/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/nickbutcher/plaid/deployments\",\n  \"created_at\": \"2015-10-30T16:10:56Z\",\n  \"updated_at\": \"2019-02-26T12:23:39Z\",\n  \"pushed_at\": \"2019-02-24T19:53:43Z\",\n  \"git_url\": \"git://github.com/nickbutcher/plaid.git\",\n  \"ssh_url\": \"git@github.com:nickbutcher/plaid.git\",\n  \"clone_url\": \"https://github.com/nickbutcher/plaid.git\",\n  \"svn_url\": \"https://github.com/nickbutcher/plaid\",\n  \"homepage\": \"\",\n  \"size\": 33089,\n  \"stargazers_count\": 12719,\n  \"watchers_count\": 12719,\n  \"language\": \"Kotlin\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": false,\n  \"has_pages\": false,\n  \"forks_count\": 2584,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 66,\n  \"license\": {\n    \"key\": \"apache-2.0\",\n    \"name\": \"Apache License 2.0\",\n    \"spdx_id\": \"Apache-2.0\",\n    \"url\": \"https://api.github.com/licenses/apache-2.0\",\n    \"node_id\": \"MDc6TGljZW5zZTI=\"\n  },\n  \"forks\": 2584,\n  \"open_issues\": 66,\n  \"watchers\": 12719,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"network_count\": 2584,\n  \"subscribers_count\": 600\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:48:58'),
(5, 'FastHub', 'k0shk0sh/FastHub', 'https://github.com/k0shk0sh/FastHub', 2, 4087, '{\n  \"id\": 82405191,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnk4MjQwNTE5MQ==\",\n  \"name\": \"FastHub\",\n  \"full_name\": \"k0shk0sh/FastHub\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"k0shk0sh\",\n    \"id\": 960767,\n    \"node_id\": \"MDQ6VXNlcjk2MDc2Nw==\",\n    \"avatar_url\": \"https://avatars0.githubusercontent.com/u/960767?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/k0shk0sh\",\n    \"html_url\": \"https://github.com/k0shk0sh\",\n    \"followers_url\": \"https://api.github.com/users/k0shk0sh/followers\",\n    \"following_url\": \"https://api.github.com/users/k0shk0sh/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/k0shk0sh/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/k0shk0sh/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/k0shk0sh/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/k0shk0sh/orgs\",\n    \"repos_url\": \"https://api.github.com/users/k0shk0sh/repos\",\n    \"events_url\": \"https://api.github.com/users/k0shk0sh/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/k0shk0sh/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/k0shk0sh/FastHub\",\n  \"description\": \"FastHub the ultimate GitHub client for Android.\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/k0shk0sh/FastHub\",\n  \"forks_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/forks\",\n  \"keys_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/events\",\n  \"assignees_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/merges\",\n  \"archive_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/k0shk0sh/FastHub/deployments\",\n  \"created_at\": \"2017-02-18T17:53:16Z\",\n  \"updated_at\": \"2019-02-26T10:17:36Z\",\n  \"pushed_at\": \"2019-02-26T05:07:19Z\",\n  \"git_url\": \"git://github.com/k0shk0sh/FastHub.git\",\n  \"ssh_url\": \"git@github.com:k0shk0sh/FastHub.git\",\n  \"clone_url\": \"https://github.com/k0shk0sh/FastHub.git\",\n  \"svn_url\": \"https://github.com/k0shk0sh/FastHub\",\n  \"homepage\": \"\",\n  \"size\": 19868,\n  \"stargazers_count\": 4087,\n  \"watchers_count\": 4087,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": false,\n  \"has_pages\": true,\n  \"forks_count\": 575,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 224,\n  \"license\": {\n    \"key\": \"gpl-3.0\",\n    \"name\": \"GNU General Public License v3.0\",\n    \"spdx_id\": \"GPL-3.0\",\n    \"url\": \"https://api.github.com/licenses/gpl-3.0\",\n    \"node_id\": \"MDc6TGljZW5zZTk=\"\n  },\n  \"forks\": 575,\n  \"open_issues\": 224,\n  \"watchers\": 4087,\n  \"default_branch\": \"development\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"network_count\": 575,\n  \"subscribers_count\": 249\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:48:59'),
(6, 'Materialistic', 'hidroh/materialistic', 'https://github.com/hidroh/materialistic', 2, 1806, '{\n  \"id\": 29653587,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnkyOTY1MzU4Nw==\",\n  \"name\": \"materialistic\",\n  \"full_name\": \"hidroh/materialistic\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"hidroh\",\n    \"id\": 1978015,\n    \"node_id\": \"MDQ6VXNlcjE5NzgwMTU=\",\n    \"avatar_url\": \"https://avatars0.githubusercontent.com/u/1978015?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/hidroh\",\n    \"html_url\": \"https://github.com/hidroh\",\n    \"followers_url\": \"https://api.github.com/users/hidroh/followers\",\n    \"following_url\": \"https://api.github.com/users/hidroh/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/hidroh/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/hidroh/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/hidroh/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/hidroh/orgs\",\n    \"repos_url\": \"https://api.github.com/users/hidroh/repos\",\n    \"events_url\": \"https://api.github.com/users/hidroh/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/hidroh/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/hidroh/materialistic\",\n  \"description\": \"A material-design Hacker News Android reader\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/hidroh/materialistic\",\n  \"forks_url\": \"https://api.github.com/repos/hidroh/materialistic/forks\",\n  \"keys_url\": \"https://api.github.com/repos/hidroh/materialistic/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/hidroh/materialistic/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/hidroh/materialistic/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/hidroh/materialistic/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/hidroh/materialistic/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/hidroh/materialistic/events\",\n  \"assignees_url\": \"https://api.github.com/repos/hidroh/materialistic/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/hidroh/materialistic/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/hidroh/materialistic/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/hidroh/materialistic/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/hidroh/materialistic/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/hidroh/materialistic/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/hidroh/materialistic/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/hidroh/materialistic/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/hidroh/materialistic/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/hidroh/materialistic/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/hidroh/materialistic/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/hidroh/materialistic/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/hidroh/materialistic/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/hidroh/materialistic/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/hidroh/materialistic/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/hidroh/materialistic/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/hidroh/materialistic/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/hidroh/materialistic/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/hidroh/materialistic/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/hidroh/materialistic/merges\",\n  \"archive_url\": \"https://api.github.com/repos/hidroh/materialistic/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/hidroh/materialistic/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/hidroh/materialistic/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/hidroh/materialistic/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/hidroh/materialistic/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/hidroh/materialistic/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/hidroh/materialistic/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/hidroh/materialistic/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/hidroh/materialistic/deployments\",\n  \"created_at\": \"2015-01-22T04:03:54Z\",\n  \"updated_at\": \"2019-02-25T19:16:54Z\",\n  \"pushed_at\": \"2019-02-25T04:52:02Z\",\n  \"git_url\": \"git://github.com/hidroh/materialistic.git\",\n  \"ssh_url\": \"git@github.com:hidroh/materialistic.git\",\n  \"clone_url\": \"https://github.com/hidroh/materialistic.git\",\n  \"svn_url\": \"https://github.com/hidroh/materialistic\",\n  \"homepage\": \"https://play.google.com/store/apps/details?id=io.github.hidroh.materialistic\",\n  \"size\": 46071,\n  \"stargazers_count\": 1806,\n  \"watchers_count\": 1806,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": false,\n  \"has_downloads\": true,\n  \"has_wiki\": false,\n  \"has_pages\": true,\n  \"forks_count\": 410,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 232,\n  \"license\": {\n    \"key\": \"apache-2.0\",\n    \"name\": \"Apache License 2.0\",\n    \"spdx_id\": \"Apache-2.0\",\n    \"url\": \"https://api.github.com/licenses/apache-2.0\",\n    \"node_id\": \"MDc6TGljZW5zZTI=\"\n  },\n  \"forks\": 410,\n  \"open_issues\": 232,\n  \"watchers\": 1806,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"network_count\": 410,\n  \"subscribers_count\": 98\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:48:59'),
(7, 'Telecine', 'JakeWharton/Telecine', 'https://github.com/JakeWharton/Telecine', 2, 2377, '{\n  \"id\": 25573672,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnkyNTU3MzY3Mg==\",\n  \"name\": \"Telecine\",\n  \"full_name\": \"JakeWharton/Telecine\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"JakeWharton\",\n    \"id\": 66577,\n    \"node_id\": \"MDQ6VXNlcjY2NTc3\",\n    \"avatar_url\": \"https://avatars0.githubusercontent.com/u/66577?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/JakeWharton\",\n    \"html_url\": \"https://github.com/JakeWharton\",\n    \"followers_url\": \"https://api.github.com/users/JakeWharton/followers\",\n    \"following_url\": \"https://api.github.com/users/JakeWharton/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/JakeWharton/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/JakeWharton/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/JakeWharton/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/JakeWharton/orgs\",\n    \"repos_url\": \"https://api.github.com/users/JakeWharton/repos\",\n    \"events_url\": \"https://api.github.com/users/JakeWharton/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/JakeWharton/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/JakeWharton/Telecine\",\n  \"description\": \"Record full-resolution video on your Android devices.\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/JakeWharton/Telecine\",\n  \"forks_url\": \"https://api.github.com/repos/JakeWharton/Telecine/forks\",\n  \"keys_url\": \"https://api.github.com/repos/JakeWharton/Telecine/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/JakeWharton/Telecine/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/JakeWharton/Telecine/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/JakeWharton/Telecine/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/JakeWharton/Telecine/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/JakeWharton/Telecine/events\",\n  \"assignees_url\": \"https://api.github.com/repos/JakeWharton/Telecine/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/JakeWharton/Telecine/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/JakeWharton/Telecine/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/JakeWharton/Telecine/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/JakeWharton/Telecine/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/JakeWharton/Telecine/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/JakeWharton/Telecine/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/JakeWharton/Telecine/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/JakeWharton/Telecine/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/JakeWharton/Telecine/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/JakeWharton/Telecine/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/JakeWharton/Telecine/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/JakeWharton/Telecine/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/JakeWharton/Telecine/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/JakeWharton/Telecine/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/JakeWharton/Telecine/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/JakeWharton/Telecine/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/JakeWharton/Telecine/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/JakeWharton/Telecine/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/JakeWharton/Telecine/merges\",\n  \"archive_url\": \"https://api.github.com/repos/JakeWharton/Telecine/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/JakeWharton/Telecine/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/JakeWharton/Telecine/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/JakeWharton/Telecine/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/JakeWharton/Telecine/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/JakeWharton/Telecine/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/JakeWharton/Telecine/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/JakeWharton/Telecine/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/JakeWharton/Telecine/deployments\",\n  \"created_at\": \"2014-10-22T09:39:53Z\",\n  \"updated_at\": \"2019-02-26T10:17:42Z\",\n  \"pushed_at\": \"2018-02-20T08:30:14Z\",\n  \"git_url\": \"git://github.com/JakeWharton/Telecine.git\",\n  \"ssh_url\": \"git@github.com:JakeWharton/Telecine.git\",\n  \"clone_url\": \"https://github.com/JakeWharton/Telecine.git\",\n  \"svn_url\": \"https://github.com/JakeWharton/Telecine\",\n  \"homepage\": \"https://play.google.com/store/apps/details?id=com.jakewharton.telecine\",\n  \"size\": 1413,\n  \"stargazers_count\": 2377,\n  \"watchers_count\": 2377,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": false,\n  \"has_downloads\": true,\n  \"has_wiki\": false,\n  \"has_pages\": false,\n  \"forks_count\": 457,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 37,\n  \"license\": {\n    \"key\": \"apache-2.0\",\n    \"name\": \"Apache License 2.0\",\n    \"spdx_id\": \"Apache-2.0\",\n    \"url\": \"https://api.github.com/licenses/apache-2.0\",\n    \"node_id\": \"MDc6TGljZW5zZTI=\"\n  },\n  \"forks\": 457,\n  \"open_issues\": 37,\n  \"watchers\": 2377,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"network_count\": 457,\n  \"subscribers_count\": 112\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:00');
INSERT INTO `projects` (`id`, `name`, `package_name`, `url`, `technology_id`, `stars_count`, `gh_repo_data`, `deleted_at`, `created_at`, `updated_at`) VALUES
(8, 'LeafPic', 'HoraApps/LeafPic', 'https://github.com/HoraApps/LeafPic', 2, 2771, '{\n  \"id\": 49219232,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnk0OTIxOTIzMg==\",\n  \"name\": \"LeafPic\",\n  \"full_name\": \"HoraApps/LeafPic\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"HoraApps\",\n    \"id\": 18516496,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE4NTE2NDk2\",\n    \"avatar_url\": \"https://avatars1.githubusercontent.com/u/18516496?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/HoraApps\",\n    \"html_url\": \"https://github.com/HoraApps\",\n    \"followers_url\": \"https://api.github.com/users/HoraApps/followers\",\n    \"following_url\": \"https://api.github.com/users/HoraApps/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/HoraApps/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/HoraApps/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/HoraApps/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/HoraApps/orgs\",\n    \"repos_url\": \"https://api.github.com/users/HoraApps/repos\",\n    \"events_url\": \"https://api.github.com/users/HoraApps/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/HoraApps/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/HoraApps/LeafPic\",\n  \"description\": \"MIRROR FROM GITLAB! Don\'t make PR here do it on Gitlab. \",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/HoraApps/LeafPic\",\n  \"forks_url\": \"https://api.github.com/repos/HoraApps/LeafPic/forks\",\n  \"keys_url\": \"https://api.github.com/repos/HoraApps/LeafPic/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/HoraApps/LeafPic/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/HoraApps/LeafPic/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/HoraApps/LeafPic/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/HoraApps/LeafPic/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/HoraApps/LeafPic/events\",\n  \"assignees_url\": \"https://api.github.com/repos/HoraApps/LeafPic/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/HoraApps/LeafPic/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/HoraApps/LeafPic/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/HoraApps/LeafPic/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/HoraApps/LeafPic/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/HoraApps/LeafPic/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/HoraApps/LeafPic/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/HoraApps/LeafPic/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/HoraApps/LeafPic/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/HoraApps/LeafPic/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/HoraApps/LeafPic/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/HoraApps/LeafPic/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/HoraApps/LeafPic/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/HoraApps/LeafPic/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/HoraApps/LeafPic/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/HoraApps/LeafPic/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/HoraApps/LeafPic/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/HoraApps/LeafPic/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/HoraApps/LeafPic/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/HoraApps/LeafPic/merges\",\n  \"archive_url\": \"https://api.github.com/repos/HoraApps/LeafPic/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/HoraApps/LeafPic/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/HoraApps/LeafPic/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/HoraApps/LeafPic/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/HoraApps/LeafPic/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/HoraApps/LeafPic/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/HoraApps/LeafPic/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/HoraApps/LeafPic/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/HoraApps/LeafPic/deployments\",\n  \"created_at\": \"2016-01-07T17:24:12Z\",\n  \"updated_at\": \"2019-02-25T09:26:22Z\",\n  \"pushed_at\": \"2018-10-01T18:18:19Z\",\n  \"git_url\": \"git://github.com/HoraApps/LeafPic.git\",\n  \"ssh_url\": \"git@github.com:HoraApps/LeafPic.git\",\n  \"clone_url\": \"https://github.com/HoraApps/LeafPic.git\",\n  \"svn_url\": \"https://github.com/HoraApps/LeafPic\",\n  \"homepage\": \"https://gitlab.com/HoraApps/LeafPic\",\n  \"size\": 10462,\n  \"stargazers_count\": 2771,\n  \"watchers_count\": 2771,\n  \"language\": \"Java\",\n  \"has_issues\": false,\n  \"has_projects\": false,\n  \"has_downloads\": true,\n  \"has_wiki\": false,\n  \"has_pages\": false,\n  \"forks_count\": 1154,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 61,\n  \"license\": {\n    \"key\": \"gpl-3.0\",\n    \"name\": \"GNU General Public License v3.0\",\n    \"spdx_id\": \"GPL-3.0\",\n    \"url\": \"https://api.github.com/licenses/gpl-3.0\",\n    \"node_id\": \"MDc6TGljZW5zZTk=\"\n  },\n  \"forks\": 1154,\n  \"open_issues\": 61,\n  \"watchers\": 2771,\n  \"default_branch\": \"dev\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"organization\": {\n    \"login\": \"HoraApps\",\n    \"id\": 18516496,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE4NTE2NDk2\",\n    \"avatar_url\": \"https://avatars1.githubusercontent.com/u/18516496?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/HoraApps\",\n    \"html_url\": \"https://github.com/HoraApps\",\n    \"followers_url\": \"https://api.github.com/users/HoraApps/followers\",\n    \"following_url\": \"https://api.github.com/users/HoraApps/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/HoraApps/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/HoraApps/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/HoraApps/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/HoraApps/orgs\",\n    \"repos_url\": \"https://api.github.com/users/HoraApps/repos\",\n    \"events_url\": \"https://api.github.com/users/HoraApps/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/HoraApps/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"network_count\": 1154,\n  \"subscribers_count\": 151\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:01'),
(9, 'K-9 Mail', 'k9mail/k-9', 'https://github.com/k9mail/k-9', 2, 4265, '{\n  \"id\": 1326671,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMzI2Njcx\",\n  \"name\": \"k-9\",\n  \"full_name\": \"k9mail/k-9\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"k9mail\",\n    \"id\": 567044,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjU2NzA0NA==\",\n    \"avatar_url\": \"https://avatars2.githubusercontent.com/u/567044?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/k9mail\",\n    \"html_url\": \"https://github.com/k9mail\",\n    \"followers_url\": \"https://api.github.com/users/k9mail/followers\",\n    \"following_url\": \"https://api.github.com/users/k9mail/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/k9mail/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/k9mail/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/k9mail/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/k9mail/orgs\",\n    \"repos_url\": \"https://api.github.com/users/k9mail/repos\",\n    \"events_url\": \"https://api.github.com/users/k9mail/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/k9mail/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/k9mail/k-9\",\n  \"description\": \"K-9 Mail – Advanced Email for Android 📧\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/k9mail/k-9\",\n  \"forks_url\": \"https://api.github.com/repos/k9mail/k-9/forks\",\n  \"keys_url\": \"https://api.github.com/repos/k9mail/k-9/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/k9mail/k-9/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/k9mail/k-9/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/k9mail/k-9/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/k9mail/k-9/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/k9mail/k-9/events\",\n  \"assignees_url\": \"https://api.github.com/repos/k9mail/k-9/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/k9mail/k-9/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/k9mail/k-9/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/k9mail/k-9/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/k9mail/k-9/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/k9mail/k-9/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/k9mail/k-9/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/k9mail/k-9/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/k9mail/k-9/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/k9mail/k-9/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/k9mail/k-9/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/k9mail/k-9/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/k9mail/k-9/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/k9mail/k-9/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/k9mail/k-9/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/k9mail/k-9/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/k9mail/k-9/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/k9mail/k-9/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/k9mail/k-9/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/k9mail/k-9/merges\",\n  \"archive_url\": \"https://api.github.com/repos/k9mail/k-9/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/k9mail/k-9/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/k9mail/k-9/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/k9mail/k-9/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/k9mail/k-9/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/k9mail/k-9/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/k9mail/k-9/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/k9mail/k-9/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/k9mail/k-9/deployments\",\n  \"created_at\": \"2011-02-04T02:40:00Z\",\n  \"updated_at\": \"2019-02-25T20:34:33Z\",\n  \"pushed_at\": \"2019-02-21T13:55:01Z\",\n  \"git_url\": \"git://github.com/k9mail/k-9.git\",\n  \"ssh_url\": \"git@github.com:k9mail/k-9.git\",\n  \"clone_url\": \"https://github.com/k9mail/k-9.git\",\n  \"svn_url\": \"https://github.com/k9mail/k-9\",\n  \"homepage\": \"https://k9mail.github.io\",\n  \"size\": 62169,\n  \"stargazers_count\": 4265,\n  \"watchers_count\": 4265,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": true,\n  \"forks_count\": 1971,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 898,\n  \"license\": {\n    \"key\": \"apache-2.0\",\n    \"name\": \"Apache License 2.0\",\n    \"spdx_id\": \"Apache-2.0\",\n    \"url\": \"https://api.github.com/licenses/apache-2.0\",\n    \"node_id\": \"MDc6TGljZW5zZTI=\"\n  },\n  \"forks\": 1971,\n  \"open_issues\": 898,\n  \"watchers\": 4265,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"organization\": {\n    \"login\": \"k9mail\",\n    \"id\": 567044,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjU2NzA0NA==\",\n    \"avatar_url\": \"https://avatars2.githubusercontent.com/u/567044?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/k9mail\",\n    \"html_url\": \"https://github.com/k9mail\",\n    \"followers_url\": \"https://api.github.com/users/k9mail/followers\",\n    \"following_url\": \"https://api.github.com/users/k9mail/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/k9mail/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/k9mail/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/k9mail/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/k9mail/orgs\",\n    \"repos_url\": \"https://api.github.com/users/k9mail/repos\",\n    \"events_url\": \"https://api.github.com/users/k9mail/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/k9mail/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"network_count\": 1971,\n  \"subscribers_count\": 342\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:01'),
(10, 'The ownCloud Android App', 'owncloud/android', 'https://github.com/owncloud/android', 2, 2736, '{\n  \"id\": 5550567,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnk1NTUwNTY3\",\n  \"name\": \"android\",\n  \"full_name\": \"owncloud/android\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"owncloud\",\n    \"id\": 1645051,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE2NDUwNTE=\",\n    \"avatar_url\": \"https://avatars3.githubusercontent.com/u/1645051?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/owncloud\",\n    \"html_url\": \"https://github.com/owncloud\",\n    \"followers_url\": \"https://api.github.com/users/owncloud/followers\",\n    \"following_url\": \"https://api.github.com/users/owncloud/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/owncloud/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/owncloud/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/owncloud/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/owncloud/orgs\",\n    \"repos_url\": \"https://api.github.com/users/owncloud/repos\",\n    \"events_url\": \"https://api.github.com/users/owncloud/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/owncloud/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/owncloud/android\",\n  \"description\": \":phone: The ownCloud Android App\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/owncloud/android\",\n  \"forks_url\": \"https://api.github.com/repos/owncloud/android/forks\",\n  \"keys_url\": \"https://api.github.com/repos/owncloud/android/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/owncloud/android/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/owncloud/android/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/owncloud/android/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/owncloud/android/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/owncloud/android/events\",\n  \"assignees_url\": \"https://api.github.com/repos/owncloud/android/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/owncloud/android/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/owncloud/android/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/owncloud/android/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/owncloud/android/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/owncloud/android/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/owncloud/android/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/owncloud/android/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/owncloud/android/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/owncloud/android/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/owncloud/android/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/owncloud/android/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/owncloud/android/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/owncloud/android/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/owncloud/android/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/owncloud/android/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/owncloud/android/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/owncloud/android/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/owncloud/android/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/owncloud/android/merges\",\n  \"archive_url\": \"https://api.github.com/repos/owncloud/android/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/owncloud/android/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/owncloud/android/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/owncloud/android/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/owncloud/android/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/owncloud/android/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/owncloud/android/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/owncloud/android/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/owncloud/android/deployments\",\n  \"created_at\": \"2012-08-25T10:35:56Z\",\n  \"updated_at\": \"2019-02-26T12:44:57Z\",\n  \"pushed_at\": \"2019-02-26T05:01:41Z\",\n  \"git_url\": \"git://github.com/owncloud/android.git\",\n  \"ssh_url\": \"git@github.com:owncloud/android.git\",\n  \"clone_url\": \"https://github.com/owncloud/android.git\",\n  \"svn_url\": \"https://github.com/owncloud/android\",\n  \"homepage\": \"\",\n  \"size\": 216851,\n  \"stargazers_count\": 2736,\n  \"watchers_count\": 2736,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": false,\n  \"forks_count\": 2743,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 378,\n  \"license\": {\n    \"key\": \"gpl-2.0\",\n    \"name\": \"GNU General Public License v2.0\",\n    \"spdx_id\": \"GPL-2.0\",\n    \"url\": \"https://api.github.com/licenses/gpl-2.0\",\n    \"node_id\": \"MDc6TGljZW5zZTg=\"\n  },\n  \"forks\": 2743,\n  \"open_issues\": 378,\n  \"watchers\": 2736,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"organization\": {\n    \"login\": \"owncloud\",\n    \"id\": 1645051,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE2NDUwNTE=\",\n    \"avatar_url\": \"https://avatars3.githubusercontent.com/u/1645051?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/owncloud\",\n    \"html_url\": \"https://github.com/owncloud\",\n    \"followers_url\": \"https://api.github.com/users/owncloud/followers\",\n    \"following_url\": \"https://api.github.com/users/owncloud/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/owncloud/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/owncloud/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/owncloud/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/owncloud/orgs\",\n    \"repos_url\": \"https://api.github.com/users/owncloud/repos\",\n    \"events_url\": \"https://api.github.com/users/owncloud/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/owncloud/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"network_count\": 2743,\n  \"subscribers_count\": 381\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:02'),
(11, 'AmazeFileManager', 'TeamAmaze/AmazeFileManager', 'https://github.com/TeamAmaze/AmazeFileManager', 2, 2386, '{\n  \"id\": 21833183,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnkyMTgzMzE4Mw==\",\n  \"name\": \"AmazeFileManager\",\n  \"full_name\": \"TeamAmaze/AmazeFileManager\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"TeamAmaze\",\n    \"id\": 30984365,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjMwOTg0MzY1\",\n    \"avatar_url\": \"https://avatars0.githubusercontent.com/u/30984365?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/TeamAmaze\",\n    \"html_url\": \"https://github.com/TeamAmaze\",\n    \"followers_url\": \"https://api.github.com/users/TeamAmaze/followers\",\n    \"following_url\": \"https://api.github.com/users/TeamAmaze/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/TeamAmaze/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/TeamAmaze/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/TeamAmaze/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/TeamAmaze/orgs\",\n    \"repos_url\": \"https://api.github.com/users/TeamAmaze/repos\",\n    \"events_url\": \"https://api.github.com/users/TeamAmaze/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/TeamAmaze/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/TeamAmaze/AmazeFileManager\",\n  \"description\": \"Material design file manager for Android\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager\",\n  \"forks_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/forks\",\n  \"keys_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/events\",\n  \"assignees_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/merges\",\n  \"archive_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/TeamAmaze/AmazeFileManager/deployments\",\n  \"created_at\": \"2014-07-14T19:47:53Z\",\n  \"updated_at\": \"2019-02-26T06:13:04Z\",\n  \"pushed_at\": \"2019-02-23T03:22:20Z\",\n  \"git_url\": \"git://github.com/TeamAmaze/AmazeFileManager.git\",\n  \"ssh_url\": \"git@github.com:TeamAmaze/AmazeFileManager.git\",\n  \"clone_url\": \"https://github.com/TeamAmaze/AmazeFileManager.git\",\n  \"svn_url\": \"https://github.com/TeamAmaze/AmazeFileManager\",\n  \"homepage\": \"\",\n  \"size\": 45359,\n  \"stargazers_count\": 2386,\n  \"watchers_count\": 2386,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": false,\n  \"forks_count\": 833,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 260,\n  \"license\": {\n    \"key\": \"gpl-3.0\",\n    \"name\": \"GNU General Public License v3.0\",\n    \"spdx_id\": \"GPL-3.0\",\n    \"url\": \"https://api.github.com/licenses/gpl-3.0\",\n    \"node_id\": \"MDc6TGljZW5zZTk=\"\n  },\n  \"forks\": 833,\n  \"open_issues\": 260,\n  \"watchers\": 2386,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"organization\": {\n    \"login\": \"TeamAmaze\",\n    \"id\": 30984365,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjMwOTg0MzY1\",\n    \"avatar_url\": \"https://avatars0.githubusercontent.com/u/30984365?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/TeamAmaze\",\n    \"html_url\": \"https://github.com/TeamAmaze\",\n    \"followers_url\": \"https://api.github.com/users/TeamAmaze/followers\",\n    \"following_url\": \"https://api.github.com/users/TeamAmaze/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/TeamAmaze/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/TeamAmaze/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/TeamAmaze/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/TeamAmaze/orgs\",\n    \"repos_url\": \"https://api.github.com/users/TeamAmaze/repos\",\n    \"events_url\": \"https://api.github.com/users/TeamAmaze/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/TeamAmaze/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"network_count\": 833,\n  \"subscribers_count\": 146\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:03'),
(12, 'Omni-Notes', 'federicoiosue/Omni-Notes', 'https://github.com/federicoiosue/Omni-Notes', 2, 1753, '{\n  \"id\": 15120144,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnkxNTEyMDE0NA==\",\n  \"name\": \"Omni-Notes\",\n  \"full_name\": \"federicoiosue/Omni-Notes\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"federicoiosue\",\n    \"id\": 487104,\n    \"node_id\": \"MDQ6VXNlcjQ4NzEwNA==\",\n    \"avatar_url\": \"https://avatars0.githubusercontent.com/u/487104?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/federicoiosue\",\n    \"html_url\": \"https://github.com/federicoiosue\",\n    \"followers_url\": \"https://api.github.com/users/federicoiosue/followers\",\n    \"following_url\": \"https://api.github.com/users/federicoiosue/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/federicoiosue/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/federicoiosue/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/federicoiosue/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/federicoiosue/orgs\",\n    \"repos_url\": \"https://api.github.com/users/federicoiosue/repos\",\n    \"events_url\": \"https://api.github.com/users/federicoiosue/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/federicoiosue/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/federicoiosue/Omni-Notes\",\n  \"description\": \"Open source note-taking application for Android\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes\",\n  \"forks_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/forks\",\n  \"keys_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/events\",\n  \"assignees_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/merges\",\n  \"archive_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/deployments\",\n  \"created_at\": \"2013-12-11T21:59:18Z\",\n  \"updated_at\": \"2019-02-24T11:13:14Z\",\n  \"pushed_at\": \"2019-02-07T23:09:17Z\",\n  \"git_url\": \"git://github.com/federicoiosue/Omni-Notes.git\",\n  \"ssh_url\": \"git@github.com:federicoiosue/Omni-Notes.git\",\n  \"clone_url\": \"https://github.com/federicoiosue/Omni-Notes.git\",\n  \"svn_url\": \"https://github.com/federicoiosue/Omni-Notes\",\n  \"homepage\": \"https://omninotes.app\",\n  \"size\": 41006,\n  \"stargazers_count\": 1753,\n  \"watchers_count\": 1753,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": true,\n  \"forks_count\": 759,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 148,\n  \"license\": {\n    \"key\": \"gpl-3.0\",\n    \"name\": \"GNU General Public License v3.0\",\n    \"spdx_id\": \"GPL-3.0\",\n    \"url\": \"https://api.github.com/licenses/gpl-3.0\",\n    \"node_id\": \"MDc6TGljZW5zZTk=\"\n  },\n  \"forks\": 759,\n  \"open_issues\": 148,\n  \"watchers\": 1753,\n  \"default_branch\": \"develop\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"network_count\": 759,\n  \"subscribers_count\": 143\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:03'),
(13, 'Timber', 'naman14/Timber', 'https://github.com/naman14/Timber', 2, 5536, '{\n  \"id\": 37333214,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnkzNzMzMzIxNA==\",\n  \"name\": \"Timber\",\n  \"full_name\": \"naman14/Timber\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"naman14\",\n    \"id\": 8599099,\n    \"node_id\": \"MDQ6VXNlcjg1OTkwOTk=\",\n    \"avatar_url\": \"https://avatars3.githubusercontent.com/u/8599099?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/naman14\",\n    \"html_url\": \"https://github.com/naman14\",\n    \"followers_url\": \"https://api.github.com/users/naman14/followers\",\n    \"following_url\": \"https://api.github.com/users/naman14/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/naman14/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/naman14/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/naman14/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/naman14/orgs\",\n    \"repos_url\": \"https://api.github.com/users/naman14/repos\",\n    \"events_url\": \"https://api.github.com/users/naman14/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/naman14/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/naman14/Timber\",\n  \"description\": \"Material Design Music Player\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/naman14/Timber\",\n  \"forks_url\": \"https://api.github.com/repos/naman14/Timber/forks\",\n  \"keys_url\": \"https://api.github.com/repos/naman14/Timber/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/naman14/Timber/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/naman14/Timber/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/naman14/Timber/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/naman14/Timber/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/naman14/Timber/events\",\n  \"assignees_url\": \"https://api.github.com/repos/naman14/Timber/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/naman14/Timber/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/naman14/Timber/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/naman14/Timber/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/naman14/Timber/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/naman14/Timber/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/naman14/Timber/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/naman14/Timber/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/naman14/Timber/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/naman14/Timber/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/naman14/Timber/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/naman14/Timber/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/naman14/Timber/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/naman14/Timber/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/naman14/Timber/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/naman14/Timber/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/naman14/Timber/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/naman14/Timber/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/naman14/Timber/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/naman14/Timber/merges\",\n  \"archive_url\": \"https://api.github.com/repos/naman14/Timber/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/naman14/Timber/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/naman14/Timber/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/naman14/Timber/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/naman14/Timber/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/naman14/Timber/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/naman14/Timber/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/naman14/Timber/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/naman14/Timber/deployments\",\n  \"created_at\": \"2015-06-12T16:43:55Z\",\n  \"updated_at\": \"2019-02-26T12:24:58Z\",\n  \"pushed_at\": \"2019-02-06T15:31:39Z\",\n  \"git_url\": \"git://github.com/naman14/Timber.git\",\n  \"ssh_url\": \"git@github.com:naman14/Timber.git\",\n  \"clone_url\": \"https://github.com/naman14/Timber.git\",\n  \"svn_url\": \"https://github.com/naman14/Timber\",\n  \"homepage\": \"\",\n  \"size\": 17405,\n  \"stargazers_count\": 5536,\n  \"watchers_count\": 5536,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": true,\n  \"forks_count\": 1813,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 174,\n  \"license\": null,\n  \"forks\": 1813,\n  \"open_issues\": 174,\n  \"watchers\": 5536,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"network_count\": 1813,\n  \"subscribers_count\": 288\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:04'),
(14, 'Phonograph', 'kabouzeid/Phonograph', 'https://github.com/kabouzeid/Phonograph', 2, 2027, '{\n  \"id\": 31720673,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnkzMTcyMDY3Mw==\",\n  \"name\": \"Phonograph\",\n  \"full_name\": \"kabouzeid/Phonograph\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"kabouzeid\",\n    \"id\": 7303830,\n    \"node_id\": \"MDQ6VXNlcjczMDM4MzA=\",\n    \"avatar_url\": \"https://avatars1.githubusercontent.com/u/7303830?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/kabouzeid\",\n    \"html_url\": \"https://github.com/kabouzeid\",\n    \"followers_url\": \"https://api.github.com/users/kabouzeid/followers\",\n    \"following_url\": \"https://api.github.com/users/kabouzeid/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/kabouzeid/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/kabouzeid/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/kabouzeid/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/kabouzeid/orgs\",\n    \"repos_url\": \"https://api.github.com/users/kabouzeid/repos\",\n    \"events_url\": \"https://api.github.com/users/kabouzeid/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/kabouzeid/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/kabouzeid/Phonograph\",\n  \"description\": \"A material designed music player for Android\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/kabouzeid/Phonograph\",\n  \"forks_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/forks\",\n  \"keys_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/events\",\n  \"assignees_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/merges\",\n  \"archive_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/kabouzeid/Phonograph/deployments\",\n  \"created_at\": \"2015-03-05T15:28:53Z\",\n  \"updated_at\": \"2019-02-25T09:32:06Z\",\n  \"pushed_at\": \"2019-02-23T08:04:36Z\",\n  \"git_url\": \"git://github.com/kabouzeid/Phonograph.git\",\n  \"ssh_url\": \"git@github.com:kabouzeid/Phonograph.git\",\n  \"clone_url\": \"https://github.com/kabouzeid/Phonograph.git\",\n  \"svn_url\": \"https://github.com/kabouzeid/Phonograph\",\n  \"homepage\": \"\",\n  \"size\": 17671,\n  \"stargazers_count\": 2027,\n  \"watchers_count\": 2027,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": false,\n  \"forks_count\": 525,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 239,\n  \"license\": {\n    \"key\": \"gpl-3.0\",\n    \"name\": \"GNU General Public License v3.0\",\n    \"spdx_id\": \"GPL-3.0\",\n    \"url\": \"https://api.github.com/licenses/gpl-3.0\",\n    \"node_id\": \"MDc6TGljZW5zZTk=\"\n  },\n  \"forks\": 525,\n  \"open_issues\": 239,\n  \"watchers\": 2027,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"network_count\": 525,\n  \"subscribers_count\": 89\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:04');
INSERT INTO `projects` (`id`, `name`, `package_name`, `url`, `technology_id`, `stars_count`, `gh_repo_data`, `deleted_at`, `created_at`, `updated_at`) VALUES
(15, 'Shuttle Music Player', 'timusus/Shuttle', 'https://github.com/timusus/Shuttle', 2, 1824, '{\n  \"id\": 82670303,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnk4MjY3MDMwMw==\",\n  \"name\": \"Shuttle\",\n  \"full_name\": \"timusus/Shuttle\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"timusus\",\n    \"id\": 4422616,\n    \"node_id\": \"MDQ6VXNlcjQ0MjI2MTY=\",\n    \"avatar_url\": \"https://avatars3.githubusercontent.com/u/4422616?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/timusus\",\n    \"html_url\": \"https://github.com/timusus\",\n    \"followers_url\": \"https://api.github.com/users/timusus/followers\",\n    \"following_url\": \"https://api.github.com/users/timusus/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/timusus/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/timusus/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/timusus/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/timusus/orgs\",\n    \"repos_url\": \"https://api.github.com/users/timusus/repos\",\n    \"events_url\": \"https://api.github.com/users/timusus/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/timusus/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/timusus/Shuttle\",\n  \"description\": \"Shuttle Music Player\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/timusus/Shuttle\",\n  \"forks_url\": \"https://api.github.com/repos/timusus/Shuttle/forks\",\n  \"keys_url\": \"https://api.github.com/repos/timusus/Shuttle/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/timusus/Shuttle/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/timusus/Shuttle/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/timusus/Shuttle/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/timusus/Shuttle/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/timusus/Shuttle/events\",\n  \"assignees_url\": \"https://api.github.com/repos/timusus/Shuttle/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/timusus/Shuttle/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/timusus/Shuttle/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/timusus/Shuttle/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/timusus/Shuttle/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/timusus/Shuttle/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/timusus/Shuttle/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/timusus/Shuttle/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/timusus/Shuttle/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/timusus/Shuttle/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/timusus/Shuttle/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/timusus/Shuttle/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/timusus/Shuttle/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/timusus/Shuttle/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/timusus/Shuttle/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/timusus/Shuttle/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/timusus/Shuttle/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/timusus/Shuttle/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/timusus/Shuttle/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/timusus/Shuttle/merges\",\n  \"archive_url\": \"https://api.github.com/repos/timusus/Shuttle/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/timusus/Shuttle/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/timusus/Shuttle/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/timusus/Shuttle/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/timusus/Shuttle/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/timusus/Shuttle/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/timusus/Shuttle/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/timusus/Shuttle/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/timusus/Shuttle/deployments\",\n  \"created_at\": \"2017-02-21T11:06:23Z\",\n  \"updated_at\": \"2019-02-26T12:26:54Z\",\n  \"pushed_at\": \"2019-02-26T12:26:52Z\",\n  \"git_url\": \"git://github.com/timusus/Shuttle.git\",\n  \"ssh_url\": \"git@github.com:timusus/Shuttle.git\",\n  \"clone_url\": \"https://github.com/timusus/Shuttle.git\",\n  \"svn_url\": \"https://github.com/timusus/Shuttle\",\n  \"homepage\": null,\n  \"size\": 8670,\n  \"stargazers_count\": 1824,\n  \"watchers_count\": 1824,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": false,\n  \"forks_count\": 385,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 138,\n  \"license\": {\n    \"key\": \"gpl-3.0\",\n    \"name\": \"GNU General Public License v3.0\",\n    \"spdx_id\": \"GPL-3.0\",\n    \"url\": \"https://api.github.com/licenses/gpl-3.0\",\n    \"node_id\": \"MDc6TGljZW5zZTk=\"\n  },\n  \"forks\": 385,\n  \"open_issues\": 138,\n  \"watchers\": 1824,\n  \"default_branch\": \"dev\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"network_count\": 385,\n  \"subscribers_count\": 84\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:05'),
(16, 'Pixel-dungeon', 'watabou/pixel-dungeon', 'https://github.com/watabou/pixel-dungeon', 2, 2204, '{\n  \"id\": 22292230,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnkyMjI5MjIzMA==\",\n  \"name\": \"pixel-dungeon\",\n  \"full_name\": \"watabou/pixel-dungeon\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"watabou\",\n    \"id\": 594670,\n    \"node_id\": \"MDQ6VXNlcjU5NDY3MA==\",\n    \"avatar_url\": \"https://avatars0.githubusercontent.com/u/594670?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/watabou\",\n    \"html_url\": \"https://github.com/watabou\",\n    \"followers_url\": \"https://api.github.com/users/watabou/followers\",\n    \"following_url\": \"https://api.github.com/users/watabou/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/watabou/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/watabou/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/watabou/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/watabou/orgs\",\n    \"repos_url\": \"https://api.github.com/users/watabou/repos\",\n    \"events_url\": \"https://api.github.com/users/watabou/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/watabou/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/watabou/pixel-dungeon\",\n  \"description\": \"Traditional roguelike game with pixel-art graphics and simple interface\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/watabou/pixel-dungeon\",\n  \"forks_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/forks\",\n  \"keys_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/events\",\n  \"assignees_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/merges\",\n  \"archive_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/watabou/pixel-dungeon/deployments\",\n  \"created_at\": \"2014-07-26T17:34:32Z\",\n  \"updated_at\": \"2019-02-24T21:16:52Z\",\n  \"pushed_at\": \"2019-02-05T12:29:02Z\",\n  \"git_url\": \"git://github.com/watabou/pixel-dungeon.git\",\n  \"ssh_url\": \"git@github.com:watabou/pixel-dungeon.git\",\n  \"clone_url\": \"https://github.com/watabou/pixel-dungeon.git\",\n  \"svn_url\": \"https://github.com/watabou/pixel-dungeon\",\n  \"homepage\": null,\n  \"size\": 8161,\n  \"stargazers_count\": 2204,\n  \"watchers_count\": 2204,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": false,\n  \"forks_count\": 830,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 54,\n  \"license\": {\n    \"key\": \"gpl-3.0\",\n    \"name\": \"GNU General Public License v3.0\",\n    \"spdx_id\": \"GPL-3.0\",\n    \"url\": \"https://api.github.com/licenses/gpl-3.0\",\n    \"node_id\": \"MDc6TGljZW5zZTk=\"\n  },\n  \"forks\": 830,\n  \"open_issues\": 54,\n  \"watchers\": 2204,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"network_count\": 830,\n  \"subscribers_count\": 240\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:05'),
(17, 'Santa-tracker-android', 'google/santa-tracker-android', 'https://github.com/google/santa-tracker-android', 2, 1769, '{\n  \"id\": 32765638,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnkzMjc2NTYzOA==\",\n  \"name\": \"santa-tracker-android\",\n  \"full_name\": \"google/santa-tracker-android\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"google\",\n    \"id\": 1342004,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjEzNDIwMDQ=\",\n    \"avatar_url\": \"https://avatars1.githubusercontent.com/u/1342004?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/google\",\n    \"html_url\": \"https://github.com/google\",\n    \"followers_url\": \"https://api.github.com/users/google/followers\",\n    \"following_url\": \"https://api.github.com/users/google/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/google/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/google/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/google/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/google/orgs\",\n    \"repos_url\": \"https://api.github.com/users/google/repos\",\n    \"events_url\": \"https://api.github.com/users/google/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/google/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/google/santa-tracker-android\",\n  \"description\": \"Ho Ho Ho\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/google/santa-tracker-android\",\n  \"forks_url\": \"https://api.github.com/repos/google/santa-tracker-android/forks\",\n  \"keys_url\": \"https://api.github.com/repos/google/santa-tracker-android/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/google/santa-tracker-android/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/google/santa-tracker-android/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/google/santa-tracker-android/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/google/santa-tracker-android/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/google/santa-tracker-android/events\",\n  \"assignees_url\": \"https://api.github.com/repos/google/santa-tracker-android/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/google/santa-tracker-android/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/google/santa-tracker-android/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/google/santa-tracker-android/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/google/santa-tracker-android/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/google/santa-tracker-android/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/google/santa-tracker-android/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/google/santa-tracker-android/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/google/santa-tracker-android/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/google/santa-tracker-android/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/google/santa-tracker-android/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/google/santa-tracker-android/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/google/santa-tracker-android/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/google/santa-tracker-android/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/google/santa-tracker-android/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/google/santa-tracker-android/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/google/santa-tracker-android/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/google/santa-tracker-android/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/google/santa-tracker-android/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/google/santa-tracker-android/merges\",\n  \"archive_url\": \"https://api.github.com/repos/google/santa-tracker-android/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/google/santa-tracker-android/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/google/santa-tracker-android/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/google/santa-tracker-android/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/google/santa-tracker-android/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/google/santa-tracker-android/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/google/santa-tracker-android/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/google/santa-tracker-android/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/google/santa-tracker-android/deployments\",\n  \"created_at\": \"2015-03-23T23:58:50Z\",\n  \"updated_at\": \"2019-02-26T05:59:01Z\",\n  \"pushed_at\": \"2019-02-02T18:49:10Z\",\n  \"git_url\": \"git://github.com/google/santa-tracker-android.git\",\n  \"ssh_url\": \"git@github.com:google/santa-tracker-android.git\",\n  \"clone_url\": \"https://github.com/google/santa-tracker-android.git\",\n  \"svn_url\": \"https://github.com/google/santa-tracker-android\",\n  \"homepage\": \"https://santatracker.google.com/\",\n  \"size\": 157513,\n  \"stargazers_count\": 1769,\n  \"watchers_count\": 1769,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": false,\n  \"has_downloads\": false,\n  \"has_wiki\": false,\n  \"has_pages\": false,\n  \"forks_count\": 337,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 9,\n  \"license\": {\n    \"key\": \"other\",\n    \"name\": \"Other\",\n    \"spdx_id\": \"NOASSERTION\",\n    \"url\": null,\n    \"node_id\": \"MDc6TGljZW5zZTA=\"\n  },\n  \"forks\": 337,\n  \"open_issues\": 9,\n  \"watchers\": 1769,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"organization\": {\n    \"login\": \"google\",\n    \"id\": 1342004,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjEzNDIwMDQ=\",\n    \"avatar_url\": \"https://avatars1.githubusercontent.com/u/1342004?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/google\",\n    \"html_url\": \"https://github.com/google\",\n    \"followers_url\": \"https://api.github.com/users/google/followers\",\n    \"following_url\": \"https://api.github.com/users/google/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/google/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/google/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/google/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/google/orgs\",\n    \"repos_url\": \"https://api.github.com/users/google/repos\",\n    \"events_url\": \"https://api.github.com/users/google/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/google/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"network_count\": 337,\n  \"subscribers_count\": 119\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:06'),
(18, '2048-android', 'uberspot/2048-android', 'https://github.com/uberspot/2048-android', 2, 778, '{\n  \"id\": 17747462,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnkxNzc0NzQ2Mg==\",\n  \"name\": \"2048-android\",\n  \"full_name\": \"uberspot/2048-android\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"uberspot\",\n    \"id\": 237927,\n    \"node_id\": \"MDQ6VXNlcjIzNzkyNw==\",\n    \"avatar_url\": \"https://avatars2.githubusercontent.com/u/237927?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/uberspot\",\n    \"html_url\": \"https://github.com/uberspot\",\n    \"followers_url\": \"https://api.github.com/users/uberspot/followers\",\n    \"following_url\": \"https://api.github.com/users/uberspot/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/uberspot/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/uberspot/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/uberspot/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/uberspot/orgs\",\n    \"repos_url\": \"https://api.github.com/users/uberspot/repos\",\n    \"events_url\": \"https://api.github.com/users/uberspot/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/uberspot/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/uberspot/2048-android\",\n  \"description\": \"The android port of the 2048 game (for offline playing)\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/uberspot/2048-android\",\n  \"forks_url\": \"https://api.github.com/repos/uberspot/2048-android/forks\",\n  \"keys_url\": \"https://api.github.com/repos/uberspot/2048-android/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/uberspot/2048-android/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/uberspot/2048-android/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/uberspot/2048-android/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/uberspot/2048-android/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/uberspot/2048-android/events\",\n  \"assignees_url\": \"https://api.github.com/repos/uberspot/2048-android/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/uberspot/2048-android/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/uberspot/2048-android/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/uberspot/2048-android/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/uberspot/2048-android/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/uberspot/2048-android/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/uberspot/2048-android/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/uberspot/2048-android/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/uberspot/2048-android/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/uberspot/2048-android/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/uberspot/2048-android/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/uberspot/2048-android/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/uberspot/2048-android/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/uberspot/2048-android/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/uberspot/2048-android/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/uberspot/2048-android/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/uberspot/2048-android/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/uberspot/2048-android/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/uberspot/2048-android/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/uberspot/2048-android/merges\",\n  \"archive_url\": \"https://api.github.com/repos/uberspot/2048-android/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/uberspot/2048-android/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/uberspot/2048-android/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/uberspot/2048-android/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/uberspot/2048-android/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/uberspot/2048-android/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/uberspot/2048-android/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/uberspot/2048-android/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/uberspot/2048-android/deployments\",\n  \"created_at\": \"2014-03-14T13:45:21Z\",\n  \"updated_at\": \"2019-02-26T11:14:55Z\",\n  \"pushed_at\": \"2019-01-21T20:58:30Z\",\n  \"git_url\": \"git://github.com/uberspot/2048-android.git\",\n  \"ssh_url\": \"git@github.com:uberspot/2048-android.git\",\n  \"clone_url\": \"https://github.com/uberspot/2048-android.git\",\n  \"svn_url\": \"https://github.com/uberspot/2048-android\",\n  \"homepage\": null,\n  \"size\": 8152,\n  \"stargazers_count\": 778,\n  \"watchers_count\": 778,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": false,\n  \"has_pages\": false,\n  \"forks_count\": 668,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 12,\n  \"license\": {\n    \"key\": \"mit\",\n    \"name\": \"MIT License\",\n    \"spdx_id\": \"MIT\",\n    \"url\": \"https://api.github.com/licenses/mit\",\n    \"node_id\": \"MDc6TGljZW5zZTEz\"\n  },\n  \"forks\": 668,\n  \"open_issues\": 12,\n  \"watchers\": 778,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"network_count\": 668,\n  \"subscribers_count\": 86\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:07'),
(19, 'Telegram for Android source', 'DrKLO/Telegram', 'https://github.com/DrKLO/Telegram', 2, 11309, '{\n  \"id\": 13862381,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMzg2MjM4MQ==\",\n  \"name\": \"Telegram\",\n  \"full_name\": \"DrKLO/Telegram\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"DrKLO\",\n    \"id\": 69369,\n    \"node_id\": \"MDQ6VXNlcjY5MzY5\",\n    \"avatar_url\": \"https://avatars2.githubusercontent.com/u/69369?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/DrKLO\",\n    \"html_url\": \"https://github.com/DrKLO\",\n    \"followers_url\": \"https://api.github.com/users/DrKLO/followers\",\n    \"following_url\": \"https://api.github.com/users/DrKLO/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/DrKLO/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/DrKLO/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/DrKLO/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/DrKLO/orgs\",\n    \"repos_url\": \"https://api.github.com/users/DrKLO/repos\",\n    \"events_url\": \"https://api.github.com/users/DrKLO/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/DrKLO/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/DrKLO/Telegram\",\n  \"description\": \"Telegram for Android source\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/DrKLO/Telegram\",\n  \"forks_url\": \"https://api.github.com/repos/DrKLO/Telegram/forks\",\n  \"keys_url\": \"https://api.github.com/repos/DrKLO/Telegram/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/DrKLO/Telegram/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/DrKLO/Telegram/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/DrKLO/Telegram/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/DrKLO/Telegram/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/DrKLO/Telegram/events\",\n  \"assignees_url\": \"https://api.github.com/repos/DrKLO/Telegram/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/DrKLO/Telegram/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/DrKLO/Telegram/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/DrKLO/Telegram/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/DrKLO/Telegram/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/DrKLO/Telegram/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/DrKLO/Telegram/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/DrKLO/Telegram/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/DrKLO/Telegram/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/DrKLO/Telegram/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/DrKLO/Telegram/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/DrKLO/Telegram/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/DrKLO/Telegram/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/DrKLO/Telegram/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/DrKLO/Telegram/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/DrKLO/Telegram/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/DrKLO/Telegram/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/DrKLO/Telegram/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/DrKLO/Telegram/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/DrKLO/Telegram/merges\",\n  \"archive_url\": \"https://api.github.com/repos/DrKLO/Telegram/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/DrKLO/Telegram/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/DrKLO/Telegram/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/DrKLO/Telegram/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/DrKLO/Telegram/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/DrKLO/Telegram/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/DrKLO/Telegram/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/DrKLO/Telegram/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/DrKLO/Telegram/deployments\",\n  \"created_at\": \"2013-10-25T14:08:10Z\",\n  \"updated_at\": \"2019-02-26T09:38:38Z\",\n  \"pushed_at\": \"2019-02-13T11:42:18Z\",\n  \"git_url\": \"git://github.com/DrKLO/Telegram.git\",\n  \"ssh_url\": \"git@github.com:DrKLO/Telegram.git\",\n  \"clone_url\": \"https://github.com/DrKLO/Telegram.git\",\n  \"svn_url\": \"https://github.com/DrKLO/Telegram\",\n  \"homepage\": null,\n  \"size\": 159523,\n  \"stargazers_count\": 11309,\n  \"watchers_count\": 11309,\n  \"language\": \"Java\",\n  \"has_issues\": false,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": false,\n  \"has_pages\": false,\n  \"forks_count\": 4446,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 368,\n  \"license\": {\n    \"key\": \"gpl-2.0\",\n    \"name\": \"GNU General Public License v2.0\",\n    \"spdx_id\": \"GPL-2.0\",\n    \"url\": \"https://api.github.com/licenses/gpl-2.0\",\n    \"node_id\": \"MDc6TGljZW5zZTg=\"\n  },\n  \"forks\": 4446,\n  \"open_issues\": 368,\n  \"watchers\": 11309,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"network_count\": 4446,\n  \"subscribers_count\": 1018\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:07'),
(20, 'Signal-Android', 'WhisperSystems/Signal-Android', 'https://github.com/WhisperSystems/Signal-Android', 2, 11124, '{\n  \"id\": 2990192,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnkyOTkwMTky\",\n  \"name\": \"Signal-Android\",\n  \"full_name\": \"signalapp/Signal-Android\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"signalapp\",\n    \"id\": 702459,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjcwMjQ1OQ==\",\n    \"avatar_url\": \"https://avatars2.githubusercontent.com/u/702459?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/signalapp\",\n    \"html_url\": \"https://github.com/signalapp\",\n    \"followers_url\": \"https://api.github.com/users/signalapp/followers\",\n    \"following_url\": \"https://api.github.com/users/signalapp/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/signalapp/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/signalapp/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/signalapp/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/signalapp/orgs\",\n    \"repos_url\": \"https://api.github.com/users/signalapp/repos\",\n    \"events_url\": \"https://api.github.com/users/signalapp/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/signalapp/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/signalapp/Signal-Android\",\n  \"description\": \"A private messenger for Android.\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/signalapp/Signal-Android\",\n  \"forks_url\": \"https://api.github.com/repos/signalapp/Signal-Android/forks\",\n  \"keys_url\": \"https://api.github.com/repos/signalapp/Signal-Android/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/signalapp/Signal-Android/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/signalapp/Signal-Android/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/signalapp/Signal-Android/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/signalapp/Signal-Android/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/signalapp/Signal-Android/events\",\n  \"assignees_url\": \"https://api.github.com/repos/signalapp/Signal-Android/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/signalapp/Signal-Android/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/signalapp/Signal-Android/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/signalapp/Signal-Android/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/signalapp/Signal-Android/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/signalapp/Signal-Android/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/signalapp/Signal-Android/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/signalapp/Signal-Android/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/signalapp/Signal-Android/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/signalapp/Signal-Android/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/signalapp/Signal-Android/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/signalapp/Signal-Android/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/signalapp/Signal-Android/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/signalapp/Signal-Android/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/signalapp/Signal-Android/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/signalapp/Signal-Android/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/signalapp/Signal-Android/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/signalapp/Signal-Android/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/signalapp/Signal-Android/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/signalapp/Signal-Android/merges\",\n  \"archive_url\": \"https://api.github.com/repos/signalapp/Signal-Android/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/signalapp/Signal-Android/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/signalapp/Signal-Android/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/signalapp/Signal-Android/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/signalapp/Signal-Android/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/signalapp/Signal-Android/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/signalapp/Signal-Android/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/signalapp/Signal-Android/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/signalapp/Signal-Android/deployments\",\n  \"created_at\": \"2011-12-15T20:01:12Z\",\n  \"updated_at\": \"2019-02-26T09:49:03Z\",\n  \"pushed_at\": \"2019-02-25T20:38:52Z\",\n  \"git_url\": \"git://github.com/signalapp/Signal-Android.git\",\n  \"ssh_url\": \"git@github.com:signalapp/Signal-Android.git\",\n  \"clone_url\": \"https://github.com/signalapp/Signal-Android.git\",\n  \"svn_url\": \"https://github.com/signalapp/Signal-Android\",\n  \"homepage\": \"https://signal.org\",\n  \"size\": 167882,\n  \"stargazers_count\": 11124,\n  \"watchers_count\": 11124,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": false,\n  \"forks_count\": 2881,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 364,\n  \"license\": {\n    \"key\": \"gpl-3.0\",\n    \"name\": \"GNU General Public License v3.0\",\n    \"spdx_id\": \"GPL-3.0\",\n    \"url\": \"https://api.github.com/licenses/gpl-3.0\",\n    \"node_id\": \"MDc6TGljZW5zZTk=\"\n  },\n  \"forks\": 2881,\n  \"open_issues\": 364,\n  \"watchers\": 11124,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"organization\": {\n    \"login\": \"signalapp\",\n    \"id\": 702459,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjcwMjQ1OQ==\",\n    \"avatar_url\": \"https://avatars2.githubusercontent.com/u/702459?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/signalapp\",\n    \"html_url\": \"https://github.com/signalapp\",\n    \"followers_url\": \"https://api.github.com/users/signalapp/followers\",\n    \"following_url\": \"https://api.github.com/users/signalapp/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/signalapp/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/signalapp/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/signalapp/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/signalapp/orgs\",\n    \"repos_url\": \"https://api.github.com/users/signalapp/repos\",\n    \"events_url\": \"https://api.github.com/users/signalapp/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/signalapp/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"network_count\": 2881,\n  \"subscribers_count\": 728\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:08'),
(21, 'Qksms', 'moezbhatti/qksms', 'https://github.com/moezbhatti/qksms', 2, 2311, '{\n  \"id\": 31138452,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnkzMTEzODQ1Mg==\",\n  \"name\": \"qksms\",\n  \"full_name\": \"moezbhatti/qksms\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"moezbhatti\",\n    \"id\": 4358785,\n    \"node_id\": \"MDQ6VXNlcjQzNTg3ODU=\",\n    \"avatar_url\": \"https://avatars3.githubusercontent.com/u/4358785?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/moezbhatti\",\n    \"html_url\": \"https://github.com/moezbhatti\",\n    \"followers_url\": \"https://api.github.com/users/moezbhatti/followers\",\n    \"following_url\": \"https://api.github.com/users/moezbhatti/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/moezbhatti/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/moezbhatti/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/moezbhatti/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/moezbhatti/orgs\",\n    \"repos_url\": \"https://api.github.com/users/moezbhatti/repos\",\n    \"events_url\": \"https://api.github.com/users/moezbhatti/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/moezbhatti/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/moezbhatti/qksms\",\n  \"description\": \"The most beautiful SMS messenger for Android\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/moezbhatti/qksms\",\n  \"forks_url\": \"https://api.github.com/repos/moezbhatti/qksms/forks\",\n  \"keys_url\": \"https://api.github.com/repos/moezbhatti/qksms/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/moezbhatti/qksms/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/moezbhatti/qksms/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/moezbhatti/qksms/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/moezbhatti/qksms/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/moezbhatti/qksms/events\",\n  \"assignees_url\": \"https://api.github.com/repos/moezbhatti/qksms/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/moezbhatti/qksms/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/moezbhatti/qksms/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/moezbhatti/qksms/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/moezbhatti/qksms/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/moezbhatti/qksms/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/moezbhatti/qksms/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/moezbhatti/qksms/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/moezbhatti/qksms/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/moezbhatti/qksms/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/moezbhatti/qksms/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/moezbhatti/qksms/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/moezbhatti/qksms/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/moezbhatti/qksms/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/moezbhatti/qksms/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/moezbhatti/qksms/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/moezbhatti/qksms/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/moezbhatti/qksms/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/moezbhatti/qksms/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/moezbhatti/qksms/merges\",\n  \"archive_url\": \"https://api.github.com/repos/moezbhatti/qksms/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/moezbhatti/qksms/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/moezbhatti/qksms/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/moezbhatti/qksms/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/moezbhatti/qksms/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/moezbhatti/qksms/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/moezbhatti/qksms/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/moezbhatti/qksms/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/moezbhatti/qksms/deployments\",\n  \"created_at\": \"2015-02-21T19:50:43Z\",\n  \"updated_at\": \"2019-02-25T17:20:12Z\",\n  \"pushed_at\": \"2019-02-23T17:22:36Z\",\n  \"git_url\": \"git://github.com/moezbhatti/qksms.git\",\n  \"ssh_url\": \"git@github.com:moezbhatti/qksms.git\",\n  \"clone_url\": \"https://github.com/moezbhatti/qksms.git\",\n  \"svn_url\": \"https://github.com/moezbhatti/qksms\",\n  \"homepage\": \"https://qklabs.com/download\",\n  \"size\": 12487,\n  \"stargazers_count\": 2311,\n  \"watchers_count\": 2311,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": true,\n  \"forks_count\": 707,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 254,\n  \"license\": {\n    \"key\": \"gpl-3.0\",\n    \"name\": \"GNU General Public License v3.0\",\n    \"spdx_id\": \"GPL-3.0\",\n    \"url\": \"https://api.github.com/licenses/gpl-3.0\",\n    \"node_id\": \"MDc6TGljZW5zZTk=\"\n  },\n  \"forks\": 707,\n  \"open_issues\": 254,\n  \"watchers\": 2311,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"network_count\": 707,\n  \"subscribers_count\": 111\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:09');
INSERT INTO `projects` (`id`, `name`, `package_name`, `url`, `technology_id`, `stars_count`, `gh_repo_data`, `deleted_at`, `created_at`, `updated_at`) VALUES
(22, 'ExoPlayer', 'google/ExoPlayer', 'https://github.com/google/ExoPlayer', 2, 12377, '{\n  \"id\": 20818126,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnkyMDgxODEyNg==\",\n  \"name\": \"ExoPlayer\",\n  \"full_name\": \"google/ExoPlayer\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"google\",\n    \"id\": 1342004,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjEzNDIwMDQ=\",\n    \"avatar_url\": \"https://avatars1.githubusercontent.com/u/1342004?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/google\",\n    \"html_url\": \"https://github.com/google\",\n    \"followers_url\": \"https://api.github.com/users/google/followers\",\n    \"following_url\": \"https://api.github.com/users/google/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/google/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/google/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/google/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/google/orgs\",\n    \"repos_url\": \"https://api.github.com/users/google/repos\",\n    \"events_url\": \"https://api.github.com/users/google/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/google/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/google/ExoPlayer\",\n  \"description\": \"An extensible media player for Android\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/google/ExoPlayer\",\n  \"forks_url\": \"https://api.github.com/repos/google/ExoPlayer/forks\",\n  \"keys_url\": \"https://api.github.com/repos/google/ExoPlayer/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/google/ExoPlayer/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/google/ExoPlayer/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/google/ExoPlayer/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/google/ExoPlayer/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/google/ExoPlayer/events\",\n  \"assignees_url\": \"https://api.github.com/repos/google/ExoPlayer/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/google/ExoPlayer/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/google/ExoPlayer/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/google/ExoPlayer/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/google/ExoPlayer/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/google/ExoPlayer/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/google/ExoPlayer/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/google/ExoPlayer/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/google/ExoPlayer/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/google/ExoPlayer/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/google/ExoPlayer/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/google/ExoPlayer/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/google/ExoPlayer/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/google/ExoPlayer/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/google/ExoPlayer/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/google/ExoPlayer/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/google/ExoPlayer/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/google/ExoPlayer/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/google/ExoPlayer/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/google/ExoPlayer/merges\",\n  \"archive_url\": \"https://api.github.com/repos/google/ExoPlayer/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/google/ExoPlayer/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/google/ExoPlayer/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/google/ExoPlayer/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/google/ExoPlayer/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/google/ExoPlayer/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/google/ExoPlayer/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/google/ExoPlayer/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/google/ExoPlayer/deployments\",\n  \"created_at\": \"2014-06-13T21:19:18Z\",\n  \"updated_at\": \"2019-02-26T10:38:06Z\",\n  \"pushed_at\": \"2019-02-26T10:38:04Z\",\n  \"git_url\": \"git://github.com/google/ExoPlayer.git\",\n  \"ssh_url\": \"git@github.com:google/ExoPlayer.git\",\n  \"clone_url\": \"https://github.com/google/ExoPlayer.git\",\n  \"svn_url\": \"https://github.com/google/ExoPlayer\",\n  \"homepage\": \"\",\n  \"size\": 82730,\n  \"stargazers_count\": 12377,\n  \"watchers_count\": 12377,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": false,\n  \"has_pages\": true,\n  \"forks_count\": 3770,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 339,\n  \"license\": {\n    \"key\": \"apache-2.0\",\n    \"name\": \"Apache License 2.0\",\n    \"spdx_id\": \"Apache-2.0\",\n    \"url\": \"https://api.github.com/licenses/apache-2.0\",\n    \"node_id\": \"MDc6TGljZW5zZTI=\"\n  },\n  \"forks\": 3770,\n  \"open_issues\": 339,\n  \"watchers\": 12377,\n  \"default_branch\": \"release-v2\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"organization\": {\n    \"login\": \"google\",\n    \"id\": 1342004,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjEzNDIwMDQ=\",\n    \"avatar_url\": \"https://avatars1.githubusercontent.com/u/1342004?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/google\",\n    \"html_url\": \"https://github.com/google\",\n    \"followers_url\": \"https://api.github.com/users/google/followers\",\n    \"following_url\": \"https://api.github.com/users/google/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/google/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/google/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/google/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/google/orgs\",\n    \"repos_url\": \"https://api.github.com/users/google/repos\",\n    \"events_url\": \"https://api.github.com/users/google/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/google/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"network_count\": 3770,\n  \"subscribers_count\": 812\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:09'),
(23, 'VLC Android', 'videolan/vlc', 'https://github.com/videolan/vlc-android', 2, 4662, '{\n  \"id\": 3299208,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnkzMjk5MjA4\",\n  \"name\": \"vlc\",\n  \"full_name\": \"videolan/vlc\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"videolan\",\n    \"id\": 1389585,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjEzODk1ODU=\",\n    \"avatar_url\": \"https://avatars1.githubusercontent.com/u/1389585?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/videolan\",\n    \"html_url\": \"https://github.com/videolan\",\n    \"followers_url\": \"https://api.github.com/users/videolan/followers\",\n    \"following_url\": \"https://api.github.com/users/videolan/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/videolan/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/videolan/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/videolan/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/videolan/orgs\",\n    \"repos_url\": \"https://api.github.com/users/videolan/repos\",\n    \"events_url\": \"https://api.github.com/users/videolan/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/videolan/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/videolan/vlc\",\n  \"description\": \"VLC media player - All pull requests are ignored, please follow https://wiki.videolan.org/Sending_Patches_VLC/\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/videolan/vlc\",\n  \"forks_url\": \"https://api.github.com/repos/videolan/vlc/forks\",\n  \"keys_url\": \"https://api.github.com/repos/videolan/vlc/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/videolan/vlc/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/videolan/vlc/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/videolan/vlc/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/videolan/vlc/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/videolan/vlc/events\",\n  \"assignees_url\": \"https://api.github.com/repos/videolan/vlc/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/videolan/vlc/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/videolan/vlc/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/videolan/vlc/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/videolan/vlc/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/videolan/vlc/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/videolan/vlc/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/videolan/vlc/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/videolan/vlc/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/videolan/vlc/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/videolan/vlc/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/videolan/vlc/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/videolan/vlc/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/videolan/vlc/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/videolan/vlc/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/videolan/vlc/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/videolan/vlc/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/videolan/vlc/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/videolan/vlc/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/videolan/vlc/merges\",\n  \"archive_url\": \"https://api.github.com/repos/videolan/vlc/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/videolan/vlc/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/videolan/vlc/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/videolan/vlc/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/videolan/vlc/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/videolan/vlc/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/videolan/vlc/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/videolan/vlc/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/videolan/vlc/deployments\",\n  \"created_at\": \"2012-01-29T19:30:36Z\",\n  \"updated_at\": \"2019-02-26T09:30:17Z\",\n  \"pushed_at\": \"2019-02-26T09:30:11Z\",\n  \"git_url\": \"git://github.com/videolan/vlc.git\",\n  \"ssh_url\": \"git@github.com:videolan/vlc.git\",\n  \"clone_url\": \"https://github.com/videolan/vlc.git\",\n  \"svn_url\": \"https://github.com/videolan/vlc\",\n  \"homepage\": \"http://www.videolan.org/vlc\",\n  \"size\": 366493,\n  \"stargazers_count\": 4662,\n  \"watchers_count\": 4662,\n  \"language\": \"C\",\n  \"has_issues\": false,\n  \"has_projects\": false,\n  \"has_downloads\": true,\n  \"has_wiki\": false,\n  \"has_pages\": false,\n  \"forks_count\": 1822,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 2,\n  \"license\": {\n    \"key\": \"other\",\n    \"name\": \"Other\",\n    \"spdx_id\": \"NOASSERTION\",\n    \"url\": null,\n    \"node_id\": \"MDc6TGljZW5zZTA=\"\n  },\n  \"forks\": 1822,\n  \"open_issues\": 2,\n  \"watchers\": 4662,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"organization\": {\n    \"login\": \"videolan\",\n    \"id\": 1389585,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjEzODk1ODU=\",\n    \"avatar_url\": \"https://avatars1.githubusercontent.com/u/1389585?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/videolan\",\n    \"html_url\": \"https://github.com/videolan\",\n    \"followers_url\": \"https://api.github.com/users/videolan/followers\",\n    \"following_url\": \"https://api.github.com/users/videolan/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/videolan/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/videolan/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/videolan/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/videolan/orgs\",\n    \"repos_url\": \"https://api.github.com/users/videolan/repos\",\n    \"events_url\": \"https://api.github.com/users/videolan/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/videolan/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"network_count\": 1822,\n  \"subscribers_count\": 470\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:10'),
(24, 'AntennaPod', 'AntennaPod/AntennaPod', 'https://github.com/AntennaPod/AntennaPod', 2, 2217, '{\n  \"id\": 5244445,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnk1MjQ0NDQ1\",\n  \"name\": \"AntennaPod\",\n  \"full_name\": \"AntennaPod/AntennaPod\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"AntennaPod\",\n    \"id\": 10713470,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjEwNzEzNDcw\",\n    \"avatar_url\": \"https://avatars1.githubusercontent.com/u/10713470?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/AntennaPod\",\n    \"html_url\": \"https://github.com/AntennaPod\",\n    \"followers_url\": \"https://api.github.com/users/AntennaPod/followers\",\n    \"following_url\": \"https://api.github.com/users/AntennaPod/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/AntennaPod/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/AntennaPod/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/AntennaPod/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/AntennaPod/orgs\",\n    \"repos_url\": \"https://api.github.com/users/AntennaPod/repos\",\n    \"events_url\": \"https://api.github.com/users/AntennaPod/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/AntennaPod/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/AntennaPod/AntennaPod\",\n  \"description\": \"A podcast manager for Android\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/AntennaPod/AntennaPod\",\n  \"forks_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/forks\",\n  \"keys_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/events\",\n  \"assignees_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/merges\",\n  \"archive_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/AntennaPod/AntennaPod/deployments\",\n  \"created_at\": \"2012-07-31T10:25:08Z\",\n  \"updated_at\": \"2019-02-26T11:40:14Z\",\n  \"pushed_at\": \"2019-02-26T08:25:47Z\",\n  \"git_url\": \"git://github.com/AntennaPod/AntennaPod.git\",\n  \"ssh_url\": \"git@github.com:AntennaPod/AntennaPod.git\",\n  \"clone_url\": \"https://github.com/AntennaPod/AntennaPod.git\",\n  \"svn_url\": \"https://github.com/AntennaPod/AntennaPod\",\n  \"homepage\": \"\",\n  \"size\": 31952,\n  \"stargazers_count\": 2217,\n  \"watchers_count\": 2217,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": false,\n  \"forks_count\": 688,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 407,\n  \"license\": {\n    \"key\": \"mit\",\n    \"name\": \"MIT License\",\n    \"spdx_id\": \"MIT\",\n    \"url\": \"https://api.github.com/licenses/mit\",\n    \"node_id\": \"MDc6TGljZW5zZTEz\"\n  },\n  \"forks\": 688,\n  \"open_issues\": 407,\n  \"watchers\": 2217,\n  \"default_branch\": \"develop\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"organization\": {\n    \"login\": \"AntennaPod\",\n    \"id\": 10713470,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjEwNzEzNDcw\",\n    \"avatar_url\": \"https://avatars1.githubusercontent.com/u/10713470?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/AntennaPod\",\n    \"html_url\": \"https://github.com/AntennaPod\",\n    \"followers_url\": \"https://api.github.com/users/AntennaPod/followers\",\n    \"following_url\": \"https://api.github.com/users/AntennaPod/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/AntennaPod/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/AntennaPod/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/AntennaPod/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/AntennaPod/orgs\",\n    \"repos_url\": \"https://api.github.com/users/AntennaPod/repos\",\n    \"events_url\": \"https://api.github.com/users/AntennaPod/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/AntennaPod/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"network_count\": 688,\n  \"subscribers_count\": 156\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:10'),
(25, 'MovieGuide', 'esoxjem/MovieGuide', 'https://github.com/esoxjem/MovieGuide', 2, 2247, '{\n  \"id\": 47489502,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnk0NzQ4OTUwMg==\",\n  \"name\": \"MovieGuide\",\n  \"full_name\": \"esoxjem/MovieGuide\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"esoxjem\",\n    \"id\": 7837006,\n    \"node_id\": \"MDQ6VXNlcjc4MzcwMDY=\",\n    \"avatar_url\": \"https://avatars0.githubusercontent.com/u/7837006?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/esoxjem\",\n    \"html_url\": \"https://github.com/esoxjem\",\n    \"followers_url\": \"https://api.github.com/users/esoxjem/followers\",\n    \"following_url\": \"https://api.github.com/users/esoxjem/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/esoxjem/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/esoxjem/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/esoxjem/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/esoxjem/orgs\",\n    \"repos_url\": \"https://api.github.com/users/esoxjem/repos\",\n    \"events_url\": \"https://api.github.com/users/esoxjem/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/esoxjem/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/esoxjem/MovieGuide\",\n  \"description\": \"Movie discovery app showcasing MVP, RxJava, Dagger 2 and Clean Architecture\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/esoxjem/MovieGuide\",\n  \"forks_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/forks\",\n  \"keys_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/events\",\n  \"assignees_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/merges\",\n  \"archive_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/esoxjem/MovieGuide/deployments\",\n  \"created_at\": \"2015-12-06T08:40:06Z\",\n  \"updated_at\": \"2019-02-24T17:56:51Z\",\n  \"pushed_at\": \"2018-10-09T13:01:51Z\",\n  \"git_url\": \"git://github.com/esoxjem/MovieGuide.git\",\n  \"ssh_url\": \"git@github.com:esoxjem/MovieGuide.git\",\n  \"clone_url\": \"https://github.com/esoxjem/MovieGuide.git\",\n  \"svn_url\": \"https://github.com/esoxjem/MovieGuide\",\n  \"homepage\": \"\",\n  \"size\": 423,\n  \"stargazers_count\": 2247,\n  \"watchers_count\": 2247,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": false,\n  \"has_downloads\": true,\n  \"has_wiki\": false,\n  \"has_pages\": false,\n  \"forks_count\": 720,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 4,\n  \"license\": {\n    \"key\": \"mit\",\n    \"name\": \"MIT License\",\n    \"spdx_id\": \"MIT\",\n    \"url\": \"https://api.github.com/licenses/mit\",\n    \"node_id\": \"MDc6TGljZW5zZTEz\"\n  },\n  \"forks\": 720,\n  \"open_issues\": 4,\n  \"watchers\": 2247,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"network_count\": 720,\n  \"subscribers_count\": 122\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:11'),
(26, 'CoCoin', 'Nightonke/CoCoin', 'https://github.com/Nightonke/CoCoin', 2, 2346, '{\n  \"id\": 44438823,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnk0NDQzODgyMw==\",\n  \"name\": \"CoCoin\",\n  \"full_name\": \"Nightonke/CoCoin\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"Nightonke\",\n    \"id\": 7379793,\n    \"node_id\": \"MDQ6VXNlcjczNzk3OTM=\",\n    \"avatar_url\": \"https://avatars3.githubusercontent.com/u/7379793?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/Nightonke\",\n    \"html_url\": \"https://github.com/Nightonke\",\n    \"followers_url\": \"https://api.github.com/users/Nightonke/followers\",\n    \"following_url\": \"https://api.github.com/users/Nightonke/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/Nightonke/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/Nightonke/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/Nightonke/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/Nightonke/orgs\",\n    \"repos_url\": \"https://api.github.com/users/Nightonke/repos\",\n    \"events_url\": \"https://api.github.com/users/Nightonke/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/Nightonke/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/Nightonke/CoCoin\",\n  \"description\": \"CoCoin, Multi-view Accounting Application\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/Nightonke/CoCoin\",\n  \"forks_url\": \"https://api.github.com/repos/Nightonke/CoCoin/forks\",\n  \"keys_url\": \"https://api.github.com/repos/Nightonke/CoCoin/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/Nightonke/CoCoin/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/Nightonke/CoCoin/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/Nightonke/CoCoin/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/Nightonke/CoCoin/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/Nightonke/CoCoin/events\",\n  \"assignees_url\": \"https://api.github.com/repos/Nightonke/CoCoin/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/Nightonke/CoCoin/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/Nightonke/CoCoin/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/Nightonke/CoCoin/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/Nightonke/CoCoin/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/Nightonke/CoCoin/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/Nightonke/CoCoin/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/Nightonke/CoCoin/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/Nightonke/CoCoin/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/Nightonke/CoCoin/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/Nightonke/CoCoin/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/Nightonke/CoCoin/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/Nightonke/CoCoin/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/Nightonke/CoCoin/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/Nightonke/CoCoin/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/Nightonke/CoCoin/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/Nightonke/CoCoin/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/Nightonke/CoCoin/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/Nightonke/CoCoin/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/Nightonke/CoCoin/merges\",\n  \"archive_url\": \"https://api.github.com/repos/Nightonke/CoCoin/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/Nightonke/CoCoin/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/Nightonke/CoCoin/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/Nightonke/CoCoin/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/Nightonke/CoCoin/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/Nightonke/CoCoin/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/Nightonke/CoCoin/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/Nightonke/CoCoin/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/Nightonke/CoCoin/deployments\",\n  \"created_at\": \"2015-10-17T13:50:12Z\",\n  \"updated_at\": \"2019-02-25T08:41:35Z\",\n  \"pushed_at\": \"2018-12-30T10:14:44Z\",\n  \"git_url\": \"git://github.com/Nightonke/CoCoin.git\",\n  \"ssh_url\": \"git@github.com:Nightonke/CoCoin.git\",\n  \"clone_url\": \"https://github.com/Nightonke/CoCoin.git\",\n  \"svn_url\": \"https://github.com/Nightonke/CoCoin\",\n  \"homepage\": \"\",\n  \"size\": 73657,\n  \"stargazers_count\": 2346,\n  \"watchers_count\": 2346,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": false,\n  \"forks_count\": 906,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 38,\n  \"license\": null,\n  \"forks\": 906,\n  \"open_issues\": 38,\n  \"watchers\": 2346,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"network_count\": 906,\n  \"subscribers_count\": 125\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:12'),
(27, 'Kickmaterial', 'byoutline/kickmaterial', 'https://github.com/byoutline/kickmaterial', 2, 1590, '{\n  \"id\": 43504255,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnk0MzUwNDI1NQ==\",\n  \"name\": \"kickmaterial\",\n  \"full_name\": \"byoutline/kickmaterial\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"byoutline\",\n    \"id\": 8026805,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjgwMjY4MDU=\",\n    \"avatar_url\": \"https://avatars0.githubusercontent.com/u/8026805?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/byoutline\",\n    \"html_url\": \"https://github.com/byoutline\",\n    \"followers_url\": \"https://api.github.com/users/byoutline/followers\",\n    \"following_url\": \"https://api.github.com/users/byoutline/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/byoutline/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/byoutline/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/byoutline/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/byoutline/orgs\",\n    \"repos_url\": \"https://api.github.com/users/byoutline/repos\",\n    \"events_url\": \"https://api.github.com/users/byoutline/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/byoutline/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/byoutline/kickmaterial\",\n  \"description\": \"Crowdfunding app concept for Android. Created to showcase new trends in Android development with strong focus on Material Design.\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/byoutline/kickmaterial\",\n  \"forks_url\": \"https://api.github.com/repos/byoutline/kickmaterial/forks\",\n  \"keys_url\": \"https://api.github.com/repos/byoutline/kickmaterial/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/byoutline/kickmaterial/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/byoutline/kickmaterial/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/byoutline/kickmaterial/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/byoutline/kickmaterial/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/byoutline/kickmaterial/events\",\n  \"assignees_url\": \"https://api.github.com/repos/byoutline/kickmaterial/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/byoutline/kickmaterial/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/byoutline/kickmaterial/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/byoutline/kickmaterial/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/byoutline/kickmaterial/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/byoutline/kickmaterial/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/byoutline/kickmaterial/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/byoutline/kickmaterial/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/byoutline/kickmaterial/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/byoutline/kickmaterial/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/byoutline/kickmaterial/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/byoutline/kickmaterial/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/byoutline/kickmaterial/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/byoutline/kickmaterial/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/byoutline/kickmaterial/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/byoutline/kickmaterial/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/byoutline/kickmaterial/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/byoutline/kickmaterial/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/byoutline/kickmaterial/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/byoutline/kickmaterial/merges\",\n  \"archive_url\": \"https://api.github.com/repos/byoutline/kickmaterial/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/byoutline/kickmaterial/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/byoutline/kickmaterial/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/byoutline/kickmaterial/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/byoutline/kickmaterial/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/byoutline/kickmaterial/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/byoutline/kickmaterial/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/byoutline/kickmaterial/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/byoutline/kickmaterial/deployments\",\n  \"created_at\": \"2015-10-01T15:24:43Z\",\n  \"updated_at\": \"2019-02-21T10:04:22Z\",\n  \"pushed_at\": \"2018-11-14T15:57:36Z\",\n  \"git_url\": \"git://github.com/byoutline/kickmaterial.git\",\n  \"ssh_url\": \"git@github.com:byoutline/kickmaterial.git\",\n  \"clone_url\": \"https://github.com/byoutline/kickmaterial.git\",\n  \"svn_url\": \"https://github.com/byoutline/kickmaterial\",\n  \"homepage\": \"\",\n  \"size\": 39656,\n  \"stargazers_count\": 1590,\n  \"watchers_count\": 1590,\n  \"language\": \"Kotlin\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": false,\n  \"forks_count\": 288,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 0,\n  \"license\": {\n    \"key\": \"apache-2.0\",\n    \"name\": \"Apache License 2.0\",\n    \"spdx_id\": \"Apache-2.0\",\n    \"url\": \"https://api.github.com/licenses/apache-2.0\",\n    \"node_id\": \"MDc6TGljZW5zZTI=\"\n  },\n  \"forks\": 288,\n  \"open_issues\": 0,\n  \"watchers\": 1590,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"organization\": {\n    \"login\": \"byoutline\",\n    \"id\": 8026805,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjgwMjY4MDU=\",\n    \"avatar_url\": \"https://avatars0.githubusercontent.com/u/8026805?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/byoutline\",\n    \"html_url\": \"https://github.com/byoutline\",\n    \"followers_url\": \"https://api.github.com/users/byoutline/followers\",\n    \"following_url\": \"https://api.github.com/users/byoutline/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/byoutline/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/byoutline/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/byoutline/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/byoutline/orgs\",\n    \"repos_url\": \"https://api.github.com/users/byoutline/repos\",\n    \"events_url\": \"https://api.github.com/users/byoutline/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/byoutline/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"network_count\": 288,\n  \"subscribers_count\": 87\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:12'),
(28, 'Bitcoin Wallet Android', 'bitcoin-wallet/bitcoin-wallet', 'https://github.com/bitcoin-wallet/bitcoin-wallet', 2, 1705, '{\n  \"id\": 3886965,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnkzODg2OTY1\",\n  \"name\": \"bitcoin-wallet\",\n  \"full_name\": \"bitcoin-wallet/bitcoin-wallet\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"bitcoin-wallet\",\n    \"id\": 12846910,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjEyODQ2OTEw\",\n    \"avatar_url\": \"https://avatars3.githubusercontent.com/u/12846910?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/bitcoin-wallet\",\n    \"html_url\": \"https://github.com/bitcoin-wallet\",\n    \"followers_url\": \"https://api.github.com/users/bitcoin-wallet/followers\",\n    \"following_url\": \"https://api.github.com/users/bitcoin-wallet/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/bitcoin-wallet/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/bitcoin-wallet/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/bitcoin-wallet/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/bitcoin-wallet/orgs\",\n    \"repos_url\": \"https://api.github.com/users/bitcoin-wallet/repos\",\n    \"events_url\": \"https://api.github.com/users/bitcoin-wallet/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/bitcoin-wallet/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/bitcoin-wallet/bitcoin-wallet\",\n  \"description\": \"Bitcoin Wallet app for your Android device. Standalone Bitcoin node, no centralized backend required.\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet\",\n  \"forks_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/forks\",\n  \"keys_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/events\",\n  \"assignees_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/merges\",\n  \"archive_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/bitcoin-wallet/bitcoin-wallet/deployments\",\n  \"created_at\": \"2012-03-31T17:06:47Z\",\n  \"updated_at\": \"2019-02-25T18:39:55Z\",\n  \"pushed_at\": \"2019-02-21T15:43:23Z\",\n  \"git_url\": \"git://github.com/bitcoin-wallet/bitcoin-wallet.git\",\n  \"ssh_url\": \"git@github.com:bitcoin-wallet/bitcoin-wallet.git\",\n  \"clone_url\": \"https://github.com/bitcoin-wallet/bitcoin-wallet.git\",\n  \"svn_url\": \"https://github.com/bitcoin-wallet/bitcoin-wallet\",\n  \"homepage\": \"\",\n  \"size\": 32936,\n  \"stargazers_count\": 1705,\n  \"watchers_count\": 1705,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": false,\n  \"forks_count\": 1253,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 76,\n  \"license\": null,\n  \"forks\": 1253,\n  \"open_issues\": 76,\n  \"watchers\": 1705,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"organization\": {\n    \"login\": \"bitcoin-wallet\",\n    \"id\": 12846910,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjEyODQ2OTEw\",\n    \"avatar_url\": \"https://avatars3.githubusercontent.com/u/12846910?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/bitcoin-wallet\",\n    \"html_url\": \"https://github.com/bitcoin-wallet\",\n    \"followers_url\": \"https://api.github.com/users/bitcoin-wallet/followers\",\n    \"following_url\": \"https://api.github.com/users/bitcoin-wallet/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/bitcoin-wallet/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/bitcoin-wallet/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/bitcoin-wallet/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/bitcoin-wallet/orgs\",\n    \"repos_url\": \"https://api.github.com/users/bitcoin-wallet/repos\",\n    \"events_url\": \"https://api.github.com/users/bitcoin-wallet/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/bitcoin-wallet/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"network_count\": 1253,\n  \"subscribers_count\": 328\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:13');
INSERT INTO `projects` (`id`, `name`, `package_name`, `url`, `technology_id`, `stars_count`, `gh_repo_data`, `deleted_at`, `created_at`, `updated_at`) VALUES
(29, 'GnuCash Android', 'codinguser/gnucash-android', 'https://github.com/codinguser/gnucash-android', 2, 893, '{\n  \"id\": 4387088,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnk0Mzg3MDg4\",\n  \"name\": \"gnucash-android\",\n  \"full_name\": \"codinguser/gnucash-android\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"codinguser\",\n    \"id\": 276699,\n    \"node_id\": \"MDQ6VXNlcjI3NjY5OQ==\",\n    \"avatar_url\": \"https://avatars3.githubusercontent.com/u/276699?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/codinguser\",\n    \"html_url\": \"https://github.com/codinguser\",\n    \"followers_url\": \"https://api.github.com/users/codinguser/followers\",\n    \"following_url\": \"https://api.github.com/users/codinguser/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/codinguser/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/codinguser/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/codinguser/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/codinguser/orgs\",\n    \"repos_url\": \"https://api.github.com/users/codinguser/repos\",\n    \"events_url\": \"https://api.github.com/users/codinguser/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/codinguser/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/codinguser/gnucash-android\",\n  \"description\": \"Gnucash for Android mobile companion application. \",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/codinguser/gnucash-android\",\n  \"forks_url\": \"https://api.github.com/repos/codinguser/gnucash-android/forks\",\n  \"keys_url\": \"https://api.github.com/repos/codinguser/gnucash-android/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/codinguser/gnucash-android/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/codinguser/gnucash-android/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/codinguser/gnucash-android/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/codinguser/gnucash-android/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/codinguser/gnucash-android/events\",\n  \"assignees_url\": \"https://api.github.com/repos/codinguser/gnucash-android/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/codinguser/gnucash-android/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/codinguser/gnucash-android/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/codinguser/gnucash-android/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/codinguser/gnucash-android/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/codinguser/gnucash-android/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/codinguser/gnucash-android/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/codinguser/gnucash-android/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/codinguser/gnucash-android/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/codinguser/gnucash-android/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/codinguser/gnucash-android/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/codinguser/gnucash-android/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/codinguser/gnucash-android/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/codinguser/gnucash-android/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/codinguser/gnucash-android/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/codinguser/gnucash-android/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/codinguser/gnucash-android/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/codinguser/gnucash-android/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/codinguser/gnucash-android/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/codinguser/gnucash-android/merges\",\n  \"archive_url\": \"https://api.github.com/repos/codinguser/gnucash-android/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/codinguser/gnucash-android/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/codinguser/gnucash-android/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/codinguser/gnucash-android/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/codinguser/gnucash-android/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/codinguser/gnucash-android/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/codinguser/gnucash-android/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/codinguser/gnucash-android/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/codinguser/gnucash-android/deployments\",\n  \"created_at\": \"2012-05-20T19:58:40Z\",\n  \"updated_at\": \"2019-02-26T01:56:58Z\",\n  \"pushed_at\": \"2019-02-25T00:26:46Z\",\n  \"git_url\": \"git://github.com/codinguser/gnucash-android.git\",\n  \"ssh_url\": \"git@github.com:codinguser/gnucash-android.git\",\n  \"clone_url\": \"https://github.com/codinguser/gnucash-android.git\",\n  \"svn_url\": \"https://github.com/codinguser/gnucash-android\",\n  \"homepage\": \"\",\n  \"size\": 20486,\n  \"stargazers_count\": 893,\n  \"watchers_count\": 893,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": true,\n  \"forks_count\": 438,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 116,\n  \"license\": {\n    \"key\": \"apache-2.0\",\n    \"name\": \"Apache License 2.0\",\n    \"spdx_id\": \"Apache-2.0\",\n    \"url\": \"https://api.github.com/licenses/apache-2.0\",\n    \"node_id\": \"MDc6TGljZW5zZTI=\"\n  },\n  \"forks\": 438,\n  \"open_issues\": 116,\n  \"watchers\": 893,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"network_count\": 438,\n  \"subscribers_count\": 93\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:14'),
(30, 'Android-CleanArchitecture', 'android10/Android-CleanArchitecture', 'https://github.com/android10/Android-CleanArchitecture', 2, 13106, '{\n  \"id\": 23112526,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnkyMzExMjUyNg==\",\n  \"name\": \"Android-CleanArchitecture\",\n  \"full_name\": \"android10/Android-CleanArchitecture\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"android10\",\n    \"id\": 1360604,\n    \"node_id\": \"MDQ6VXNlcjEzNjA2MDQ=\",\n    \"avatar_url\": \"https://avatars0.githubusercontent.com/u/1360604?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/android10\",\n    \"html_url\": \"https://github.com/android10\",\n    \"followers_url\": \"https://api.github.com/users/android10/followers\",\n    \"following_url\": \"https://api.github.com/users/android10/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/android10/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/android10/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/android10/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/android10/orgs\",\n    \"repos_url\": \"https://api.github.com/users/android10/repos\",\n    \"events_url\": \"https://api.github.com/users/android10/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/android10/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/android10/Android-CleanArchitecture\",\n  \"description\": \"This is a sample app that is part of a series of blog posts I have written about how to architect an android application using Uncle Bob\'s clean architecture approach.\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture\",\n  \"forks_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/forks\",\n  \"keys_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/events\",\n  \"assignees_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/merges\",\n  \"archive_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/android10/Android-CleanArchitecture/deployments\",\n  \"created_at\": \"2014-08-19T14:09:26Z\",\n  \"updated_at\": \"2019-02-26T03:11:13Z\",\n  \"pushed_at\": \"2018-08-30T23:35:29Z\",\n  \"git_url\": \"git://github.com/android10/Android-CleanArchitecture.git\",\n  \"ssh_url\": \"git@github.com:android10/Android-CleanArchitecture.git\",\n  \"clone_url\": \"https://github.com/android10/Android-CleanArchitecture.git\",\n  \"svn_url\": \"https://github.com/android10/Android-CleanArchitecture\",\n  \"homepage\": \"\",\n  \"size\": 5182,\n  \"stargazers_count\": 13106,\n  \"watchers_count\": 13106,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": false,\n  \"forks_count\": 3018,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 137,\n  \"license\": {\n    \"key\": \"apache-2.0\",\n    \"name\": \"Apache License 2.0\",\n    \"spdx_id\": \"Apache-2.0\",\n    \"url\": \"https://api.github.com/licenses/apache-2.0\",\n    \"node_id\": \"MDc6TGljZW5zZTI=\"\n  },\n  \"forks\": 3018,\n  \"open_issues\": 137,\n  \"watchers\": 13106,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"network_count\": 3018,\n  \"subscribers_count\": 856\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:14'),
(31, 'Archi', 'ivacf/archi', 'https://github.com/ivacf/archi', 2, 3283, '{\n  \"id\": 42318990,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnk0MjMxODk5MA==\",\n  \"name\": \"archi\",\n  \"full_name\": \"ivacf/archi\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"ivacf\",\n    \"id\": 1452346,\n    \"node_id\": \"MDQ6VXNlcjE0NTIzNDY=\",\n    \"avatar_url\": \"https://avatars0.githubusercontent.com/u/1452346?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/ivacf\",\n    \"html_url\": \"https://github.com/ivacf\",\n    \"followers_url\": \"https://api.github.com/users/ivacf/followers\",\n    \"following_url\": \"https://api.github.com/users/ivacf/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/ivacf/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/ivacf/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/ivacf/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/ivacf/orgs\",\n    \"repos_url\": \"https://api.github.com/users/ivacf/repos\",\n    \"events_url\": \"https://api.github.com/users/ivacf/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/ivacf/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/ivacf/archi\",\n  \"description\": \"Repository that showcases 3 Android app architectures: \\\"Standard Android\\\", MVP and MVVM. The exact same app is built 3 times following the different patterns.\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/ivacf/archi\",\n  \"forks_url\": \"https://api.github.com/repos/ivacf/archi/forks\",\n  \"keys_url\": \"https://api.github.com/repos/ivacf/archi/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/ivacf/archi/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/ivacf/archi/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/ivacf/archi/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/ivacf/archi/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/ivacf/archi/events\",\n  \"assignees_url\": \"https://api.github.com/repos/ivacf/archi/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/ivacf/archi/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/ivacf/archi/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/ivacf/archi/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/ivacf/archi/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/ivacf/archi/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/ivacf/archi/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/ivacf/archi/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/ivacf/archi/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/ivacf/archi/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/ivacf/archi/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/ivacf/archi/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/ivacf/archi/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/ivacf/archi/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/ivacf/archi/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/ivacf/archi/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/ivacf/archi/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/ivacf/archi/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/ivacf/archi/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/ivacf/archi/merges\",\n  \"archive_url\": \"https://api.github.com/repos/ivacf/archi/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/ivacf/archi/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/ivacf/archi/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/ivacf/archi/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/ivacf/archi/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/ivacf/archi/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/ivacf/archi/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/ivacf/archi/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/ivacf/archi/deployments\",\n  \"created_at\": \"2015-09-11T16:13:34Z\",\n  \"updated_at\": \"2019-02-24T10:26:26Z\",\n  \"pushed_at\": \"2017-08-10T11:33:58Z\",\n  \"git_url\": \"git://github.com/ivacf/archi.git\",\n  \"ssh_url\": \"git@github.com:ivacf/archi.git\",\n  \"clone_url\": \"https://github.com/ivacf/archi.git\",\n  \"svn_url\": \"https://github.com/ivacf/archi\",\n  \"homepage\": \"\",\n  \"size\": 1454,\n  \"stargazers_count\": 3283,\n  \"watchers_count\": 3283,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": false,\n  \"forks_count\": 515,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 10,\n  \"license\": {\n    \"key\": \"apache-2.0\",\n    \"name\": \"Apache License 2.0\",\n    \"spdx_id\": \"Apache-2.0\",\n    \"url\": \"https://api.github.com/licenses/apache-2.0\",\n    \"node_id\": \"MDc6TGljZW5zZTI=\"\n  },\n  \"forks\": 515,\n  \"open_issues\": 10,\n  \"watchers\": 3283,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"network_count\": 515,\n  \"subscribers_count\": 157\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:15'),
(32, 'Android-mvvm-architecture', 'MindorksOpenSource/android-mvp-architecture', 'https://github.com/MindorksOpenSource/android-mvp-architecture', 2, 3611, '{\n  \"id\": 80192374,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnk4MDE5MjM3NA==\",\n  \"name\": \"android-mvp-architecture\",\n  \"full_name\": \"MindorksOpenSource/android-mvp-architecture\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"MindorksOpenSource\",\n    \"id\": 22527655,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjIyNTI3NjU1\",\n    \"avatar_url\": \"https://avatars0.githubusercontent.com/u/22527655?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/MindorksOpenSource\",\n    \"html_url\": \"https://github.com/MindorksOpenSource\",\n    \"followers_url\": \"https://api.github.com/users/MindorksOpenSource/followers\",\n    \"following_url\": \"https://api.github.com/users/MindorksOpenSource/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/MindorksOpenSource/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/MindorksOpenSource/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/MindorksOpenSource/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/MindorksOpenSource/orgs\",\n    \"repos_url\": \"https://api.github.com/users/MindorksOpenSource/repos\",\n    \"events_url\": \"https://api.github.com/users/MindorksOpenSource/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/MindorksOpenSource/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/MindorksOpenSource/android-mvp-architecture\",\n  \"description\": \"This repository contains a detailed sample app that implements MVP architecture using Dagger2,  GreenDao, RxJava2, FastAndroidNetworking and PlaceholderView\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture\",\n  \"forks_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/forks\",\n  \"keys_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/events\",\n  \"assignees_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/merges\",\n  \"archive_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/MindorksOpenSource/android-mvp-architecture/deployments\",\n  \"created_at\": \"2017-01-27T08:39:06Z\",\n  \"updated_at\": \"2019-02-26T09:00:34Z\",\n  \"pushed_at\": \"2019-01-18T06:37:43Z\",\n  \"git_url\": \"git://github.com/MindorksOpenSource/android-mvp-architecture.git\",\n  \"ssh_url\": \"git@github.com:MindorksOpenSource/android-mvp-architecture.git\",\n  \"clone_url\": \"https://github.com/MindorksOpenSource/android-mvp-architecture.git\",\n  \"svn_url\": \"https://github.com/MindorksOpenSource/android-mvp-architecture\",\n  \"homepage\": \"https://mindorks.com/open-source-projects\",\n  \"size\": 1135,\n  \"stargazers_count\": 3611,\n  \"watchers_count\": 3611,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": false,\n  \"forks_count\": 1039,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 30,\n  \"license\": {\n    \"key\": \"apache-2.0\",\n    \"name\": \"Apache License 2.0\",\n    \"spdx_id\": \"Apache-2.0\",\n    \"url\": \"https://api.github.com/licenses/apache-2.0\",\n    \"node_id\": \"MDc6TGljZW5zZTI=\"\n  },\n  \"forks\": 1039,\n  \"open_issues\": 30,\n  \"watchers\": 3611,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"organization\": {\n    \"login\": \"MindorksOpenSource\",\n    \"id\": 22527655,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjIyNTI3NjU1\",\n    \"avatar_url\": \"https://avatars0.githubusercontent.com/u/22527655?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/MindorksOpenSource\",\n    \"html_url\": \"https://github.com/MindorksOpenSource\",\n    \"followers_url\": \"https://api.github.com/users/MindorksOpenSource/followers\",\n    \"following_url\": \"https://api.github.com/users/MindorksOpenSource/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/MindorksOpenSource/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/MindorksOpenSource/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/MindorksOpenSource/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/MindorksOpenSource/orgs\",\n    \"repos_url\": \"https://api.github.com/users/MindorksOpenSource/repos\",\n    \"events_url\": \"https://api.github.com/users/MindorksOpenSource/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/MindorksOpenSource/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"network_count\": 1039,\n  \"subscribers_count\": 196\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:15'),
(33, 'Shadowsocks client', 'shadowsocks/shadowsocks-android', 'https://github.com/shadowsocks/shadowsocks-android', 2, 21243, '{\n  \"id\": 7190986,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnk3MTkwOTg2\",\n  \"name\": \"shadowsocks-android\",\n  \"full_name\": \"shadowsocks/shadowsocks-android\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"shadowsocks\",\n    \"id\": 3006190,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjMwMDYxOTA=\",\n    \"avatar_url\": \"https://avatars1.githubusercontent.com/u/3006190?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/shadowsocks\",\n    \"html_url\": \"https://github.com/shadowsocks\",\n    \"followers_url\": \"https://api.github.com/users/shadowsocks/followers\",\n    \"following_url\": \"https://api.github.com/users/shadowsocks/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/shadowsocks/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/shadowsocks/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/shadowsocks/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/shadowsocks/orgs\",\n    \"repos_url\": \"https://api.github.com/users/shadowsocks/repos\",\n    \"events_url\": \"https://api.github.com/users/shadowsocks/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/shadowsocks/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/shadowsocks/shadowsocks-android\",\n  \"description\": \"A shadowsocks client for Android\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android\",\n  \"forks_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/forks\",\n  \"keys_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/events\",\n  \"assignees_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/merges\",\n  \"archive_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/shadowsocks/shadowsocks-android/deployments\",\n  \"created_at\": \"2012-12-16T13:40:29Z\",\n  \"updated_at\": \"2019-02-26T11:18:03Z\",\n  \"pushed_at\": \"2019-02-25T02:54:04Z\",\n  \"git_url\": \"git://github.com/shadowsocks/shadowsocks-android.git\",\n  \"ssh_url\": \"git@github.com:shadowsocks/shadowsocks-android.git\",\n  \"clone_url\": \"https://github.com/shadowsocks/shadowsocks-android.git\",\n  \"svn_url\": \"https://github.com/shadowsocks/shadowsocks-android\",\n  \"homepage\": \"\",\n  \"size\": 52897,\n  \"stargazers_count\": 21243,\n  \"watchers_count\": 21243,\n  \"language\": \"Kotlin\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": false,\n  \"forks_count\": 8518,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 10,\n  \"license\": {\n    \"key\": \"other\",\n    \"name\": \"Other\",\n    \"spdx_id\": \"NOASSERTION\",\n    \"url\": null,\n    \"node_id\": \"MDc6TGljZW5zZTA=\"\n  },\n  \"forks\": 8518,\n  \"open_issues\": 10,\n  \"watchers\": 21243,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"organization\": {\n    \"login\": \"shadowsocks\",\n    \"id\": 3006190,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjMwMDYxOTA=\",\n    \"avatar_url\": \"https://avatars1.githubusercontent.com/u/3006190?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/shadowsocks\",\n    \"html_url\": \"https://github.com/shadowsocks\",\n    \"followers_url\": \"https://api.github.com/users/shadowsocks/followers\",\n    \"following_url\": \"https://api.github.com/users/shadowsocks/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/shadowsocks/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/shadowsocks/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/shadowsocks/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/shadowsocks/orgs\",\n    \"repos_url\": \"https://api.github.com/users/shadowsocks/repos\",\n    \"events_url\": \"https://api.github.com/users/shadowsocks/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/shadowsocks/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"network_count\": 8518,\n  \"subscribers_count\": 1501\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:16'),
(34, 'SoundRecorder', 'dkim0419/SoundRecorder', 'https://github.com/dkim0419/SoundRecorder', 2, 1045, '{\n  \"id\": 28464887,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnkyODQ2NDg4Nw==\",\n  \"name\": \"SoundRecorder\",\n  \"full_name\": \"dkim0419/SoundRecorder\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"dkim0419\",\n    \"id\": 2625330,\n    \"node_id\": \"MDQ6VXNlcjI2MjUzMzA=\",\n    \"avatar_url\": \"https://avatars0.githubusercontent.com/u/2625330?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/dkim0419\",\n    \"html_url\": \"https://github.com/dkim0419\",\n    \"followers_url\": \"https://api.github.com/users/dkim0419/followers\",\n    \"following_url\": \"https://api.github.com/users/dkim0419/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/dkim0419/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/dkim0419/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/dkim0419/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/dkim0419/orgs\",\n    \"repos_url\": \"https://api.github.com/users/dkim0419/repos\",\n    \"events_url\": \"https://api.github.com/users/dkim0419/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/dkim0419/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/dkim0419/SoundRecorder\",\n  \"description\": \"A simple sound recording app implementing Material Design\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/dkim0419/SoundRecorder\",\n  \"forks_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/forks\",\n  \"keys_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/events\",\n  \"assignees_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/merges\",\n  \"archive_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/dkim0419/SoundRecorder/deployments\",\n  \"created_at\": \"2014-12-24T23:43:30Z\",\n  \"updated_at\": \"2019-02-26T09:18:21Z\",\n  \"pushed_at\": \"2019-02-10T23:01:42Z\",\n  \"git_url\": \"git://github.com/dkim0419/SoundRecorder.git\",\n  \"ssh_url\": \"git@github.com:dkim0419/SoundRecorder.git\",\n  \"clone_url\": \"https://github.com/dkim0419/SoundRecorder.git\",\n  \"svn_url\": \"https://github.com/dkim0419/SoundRecorder\",\n  \"homepage\": \"\",\n  \"size\": 4955,\n  \"stargazers_count\": 1045,\n  \"watchers_count\": 1045,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": false,\n  \"forks_count\": 603,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 58,\n  \"license\": {\n    \"key\": \"gpl-3.0\",\n    \"name\": \"GNU General Public License v3.0\",\n    \"spdx_id\": \"GPL-3.0\",\n    \"url\": \"https://api.github.com/licenses/gpl-3.0\",\n    \"node_id\": \"MDc6TGljZW5zZTk=\"\n  },\n  \"forks\": 603,\n  \"open_issues\": 58,\n  \"watchers\": 1045,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"network_count\": 603,\n  \"subscribers_count\": 67\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:17'),
(35, 'iosched', 'google/iosched', 'https://github.com/google/iosched', 2, 17915, '{\n  \"id\": 18347476,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnkxODM0NzQ3Ng==\",\n  \"name\": \"iosched\",\n  \"full_name\": \"google/iosched\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"google\",\n    \"id\": 1342004,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjEzNDIwMDQ=\",\n    \"avatar_url\": \"https://avatars1.githubusercontent.com/u/1342004?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/google\",\n    \"html_url\": \"https://github.com/google\",\n    \"followers_url\": \"https://api.github.com/users/google/followers\",\n    \"following_url\": \"https://api.github.com/users/google/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/google/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/google/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/google/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/google/orgs\",\n    \"repos_url\": \"https://api.github.com/users/google/repos\",\n    \"events_url\": \"https://api.github.com/users/google/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/google/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/google/iosched\",\n  \"description\": \"The Google I/O 2018 Android App\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/google/iosched\",\n  \"forks_url\": \"https://api.github.com/repos/google/iosched/forks\",\n  \"keys_url\": \"https://api.github.com/repos/google/iosched/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/google/iosched/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/google/iosched/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/google/iosched/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/google/iosched/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/google/iosched/events\",\n  \"assignees_url\": \"https://api.github.com/repos/google/iosched/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/google/iosched/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/google/iosched/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/google/iosched/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/google/iosched/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/google/iosched/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/google/iosched/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/google/iosched/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/google/iosched/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/google/iosched/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/google/iosched/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/google/iosched/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/google/iosched/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/google/iosched/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/google/iosched/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/google/iosched/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/google/iosched/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/google/iosched/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/google/iosched/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/google/iosched/merges\",\n  \"archive_url\": \"https://api.github.com/repos/google/iosched/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/google/iosched/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/google/iosched/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/google/iosched/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/google/iosched/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/google/iosched/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/google/iosched/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/google/iosched/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/google/iosched/deployments\",\n  \"created_at\": \"2014-04-01T22:40:40Z\",\n  \"updated_at\": \"2019-02-26T10:48:50Z\",\n  \"pushed_at\": \"2019-02-04T08:23:10Z\",\n  \"git_url\": \"git://github.com/google/iosched.git\",\n  \"ssh_url\": \"git@github.com:google/iosched.git\",\n  \"clone_url\": \"https://github.com/google/iosched.git\",\n  \"svn_url\": \"https://github.com/google/iosched\",\n  \"homepage\": \"https://play.google.com/store/apps/details?id=com.google.samples.apps.iosched\",\n  \"size\": 50876,\n  \"stargazers_count\": 17915,\n  \"watchers_count\": 17915,\n  \"language\": \"Kotlin\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": false,\n  \"has_pages\": false,\n  \"forks_count\": 5710,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 24,\n  \"license\": {\n    \"key\": \"apache-2.0\",\n    \"name\": \"Apache License 2.0\",\n    \"spdx_id\": \"Apache-2.0\",\n    \"url\": \"https://api.github.com/licenses/apache-2.0\",\n    \"node_id\": \"MDc6TGljZW5zZTI=\"\n  },\n  \"forks\": 5710,\n  \"open_issues\": 24,\n  \"watchers\": 17915,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"organization\": {\n    \"login\": \"google\",\n    \"id\": 1342004,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjEzNDIwMDQ=\",\n    \"avatar_url\": \"https://avatars1.githubusercontent.com/u/1342004?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/google\",\n    \"html_url\": \"https://github.com/google\",\n    \"followers_url\": \"https://api.github.com/users/google/followers\",\n    \"following_url\": \"https://api.github.com/users/google/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/google/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/google/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/google/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/google/orgs\",\n    \"repos_url\": \"https://api.github.com/users/google/repos\",\n    \"events_url\": \"https://api.github.com/users/google/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/google/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"network_count\": 5710,\n  \"subscribers_count\": 1493\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:18');
INSERT INTO `projects` (`id`, `name`, `package_name`, `url`, `technology_id`, `stars_count`, `gh_repo_data`, `deleted_at`, `created_at`, `updated_at`) VALUES
(36, 'Apps-android-wikipedia', 'wikimedia/apps-android-wikipedia', 'https://github.com/wikimedia/apps-android-wikipedia', 2, 906, '{\n  \"id\": 13862999,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMzg2Mjk5OQ==\",\n  \"name\": \"apps-android-wikipedia\",\n  \"full_name\": \"wikimedia/apps-android-wikipedia\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"wikimedia\",\n    \"id\": 56668,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjU2NjY4\",\n    \"avatar_url\": \"https://avatars0.githubusercontent.com/u/56668?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/wikimedia\",\n    \"html_url\": \"https://github.com/wikimedia\",\n    \"followers_url\": \"https://api.github.com/users/wikimedia/followers\",\n    \"following_url\": \"https://api.github.com/users/wikimedia/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/wikimedia/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/wikimedia/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/wikimedia/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/wikimedia/orgs\",\n    \"repos_url\": \"https://api.github.com/users/wikimedia/repos\",\n    \"events_url\": \"https://api.github.com/users/wikimedia/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/wikimedia/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/wikimedia/apps-android-wikipedia\",\n  \"description\": \" 📱The official Wikipedia app for Android!\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia\",\n  \"forks_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/forks\",\n  \"keys_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/events\",\n  \"assignees_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/merges\",\n  \"archive_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/wikimedia/apps-android-wikipedia/deployments\",\n  \"created_at\": \"2013-10-25T14:31:39Z\",\n  \"updated_at\": \"2019-02-26T07:10:32Z\",\n  \"pushed_at\": \"2019-02-26T00:23:37Z\",\n  \"git_url\": \"git://github.com/wikimedia/apps-android-wikipedia.git\",\n  \"ssh_url\": \"git@github.com:wikimedia/apps-android-wikipedia.git\",\n  \"clone_url\": \"https://github.com/wikimedia/apps-android-wikipedia.git\",\n  \"svn_url\": \"https://github.com/wikimedia/apps-android-wikipedia\",\n  \"homepage\": \"https://www.mediawiki.org/wiki/Wikimedia_Apps/Team/Android/App_hacking\",\n  \"size\": 188949,\n  \"stargazers_count\": 906,\n  \"watchers_count\": 906,\n  \"language\": \"Java\",\n  \"has_issues\": false,\n  \"has_projects\": false,\n  \"has_downloads\": false,\n  \"has_wiki\": false,\n  \"has_pages\": false,\n  \"forks_count\": 302,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 12,\n  \"license\": {\n    \"key\": \"apache-2.0\",\n    \"name\": \"Apache License 2.0\",\n    \"spdx_id\": \"Apache-2.0\",\n    \"url\": \"https://api.github.com/licenses/apache-2.0\",\n    \"node_id\": \"MDc6TGljZW5zZTI=\"\n  },\n  \"forks\": 302,\n  \"open_issues\": 12,\n  \"watchers\": 906,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"organization\": {\n    \"login\": \"wikimedia\",\n    \"id\": 56668,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjU2NjY4\",\n    \"avatar_url\": \"https://avatars0.githubusercontent.com/u/56668?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/wikimedia\",\n    \"html_url\": \"https://github.com/wikimedia\",\n    \"followers_url\": \"https://api.github.com/users/wikimedia/followers\",\n    \"following_url\": \"https://api.github.com/users/wikimedia/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/wikimedia/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/wikimedia/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/wikimedia/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/wikimedia/orgs\",\n    \"repos_url\": \"https://api.github.com/users/wikimedia/repos\",\n    \"events_url\": \"https://api.github.com/users/wikimedia/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/wikimedia/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"network_count\": 302,\n  \"subscribers_count\": 95\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:18'),
(37, 'SeeWeather', 'xcc3641/SeeWeather', 'https://github.com/xcc3641/SeeWeather', 2, 3359, '{\n  \"id\": 52153906,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnk1MjE1MzkwNg==\",\n  \"name\": \"SeeWeather\",\n  \"full_name\": \"xcc3641/SeeWeather\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"xcc3641\",\n    \"id\": 11666634,\n    \"node_id\": \"MDQ6VXNlcjExNjY2NjM0\",\n    \"avatar_url\": \"https://avatars1.githubusercontent.com/u/11666634?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/xcc3641\",\n    \"html_url\": \"https://github.com/xcc3641\",\n    \"followers_url\": \"https://api.github.com/users/xcc3641/followers\",\n    \"following_url\": \"https://api.github.com/users/xcc3641/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/xcc3641/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/xcc3641/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/xcc3641/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/xcc3641/orgs\",\n    \"repos_url\": \"https://api.github.com/users/xcc3641/repos\",\n    \"events_url\": \"https://api.github.com/users/xcc3641/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/xcc3641/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/xcc3641/SeeWeather\",\n  \"description\": \":partly_sunny: [@Deprecated]RxJava+RxBus+Retrofit+Glide+Material Design Weather App\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/xcc3641/SeeWeather\",\n  \"forks_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/forks\",\n  \"keys_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/events\",\n  \"assignees_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/merges\",\n  \"archive_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/xcc3641/SeeWeather/deployments\",\n  \"created_at\": \"2016-02-20T13:10:14Z\",\n  \"updated_at\": \"2019-02-26T11:17:45Z\",\n  \"pushed_at\": \"2018-01-07T08:37:55Z\",\n  \"git_url\": \"git://github.com/xcc3641/SeeWeather.git\",\n  \"ssh_url\": \"git@github.com:xcc3641/SeeWeather.git\",\n  \"clone_url\": \"https://github.com/xcc3641/SeeWeather.git\",\n  \"svn_url\": \"https://github.com/xcc3641/SeeWeather\",\n  \"homepage\": \"https://fir.im/seeWeather\",\n  \"size\": 16071,\n  \"stargazers_count\": 3359,\n  \"watchers_count\": 3359,\n  \"language\": \"Java\",\n  \"has_issues\": false,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": false,\n  \"has_pages\": false,\n  \"forks_count\": 734,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 5,\n  \"license\": {\n    \"key\": \"apache-2.0\",\n    \"name\": \"Apache License 2.0\",\n    \"spdx_id\": \"Apache-2.0\",\n    \"url\": \"https://api.github.com/licenses/apache-2.0\",\n    \"node_id\": \"MDc6TGljZW5zZTI=\"\n  },\n  \"forks\": 734,\n  \"open_issues\": 5,\n  \"watchers\": 3359,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"network_count\": 734,\n  \"subscribers_count\": 134\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:19'),
(38, 'Simple Calendar', 'SimpleMobileTools/Simple-Calendar', 'https://github.com/SimpleMobileTools/Simple-Calendar', 2, 1538, '{\n  \"id\": 50459012,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnk1MDQ1OTAxMg==\",\n  \"name\": \"Simple-Calendar\",\n  \"full_name\": \"SimpleMobileTools/Simple-Calendar\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"SimpleMobileTools\",\n    \"id\": 16476257,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE2NDc2MjU3\",\n    \"avatar_url\": \"https://avatars2.githubusercontent.com/u/16476257?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/SimpleMobileTools\",\n    \"html_url\": \"https://github.com/SimpleMobileTools\",\n    \"followers_url\": \"https://api.github.com/users/SimpleMobileTools/followers\",\n    \"following_url\": \"https://api.github.com/users/SimpleMobileTools/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/SimpleMobileTools/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/SimpleMobileTools/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/SimpleMobileTools/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/SimpleMobileTools/orgs\",\n    \"repos_url\": \"https://api.github.com/users/SimpleMobileTools/repos\",\n    \"events_url\": \"https://api.github.com/users/SimpleMobileTools/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/SimpleMobileTools/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/SimpleMobileTools/Simple-Calendar\",\n  \"description\": \"A simple calendar with events, customizable widgets and no ads.\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar\",\n  \"forks_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/forks\",\n  \"keys_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/events\",\n  \"assignees_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/merges\",\n  \"archive_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/SimpleMobileTools/Simple-Calendar/deployments\",\n  \"created_at\": \"2016-01-26T21:02:54Z\",\n  \"updated_at\": \"2019-02-26T09:38:26Z\",\n  \"pushed_at\": \"2019-02-25T11:03:33Z\",\n  \"git_url\": \"git://github.com/SimpleMobileTools/Simple-Calendar.git\",\n  \"ssh_url\": \"git@github.com:SimpleMobileTools/Simple-Calendar.git\",\n  \"clone_url\": \"https://github.com/SimpleMobileTools/Simple-Calendar.git\",\n  \"svn_url\": \"https://github.com/SimpleMobileTools/Simple-Calendar\",\n  \"homepage\": \"\",\n  \"size\": 19446,\n  \"stargazers_count\": 1538,\n  \"watchers_count\": 1538,\n  \"language\": \"Kotlin\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": false,\n  \"forks_count\": 636,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 91,\n  \"license\": {\n    \"key\": \"apache-2.0\",\n    \"name\": \"Apache License 2.0\",\n    \"spdx_id\": \"Apache-2.0\",\n    \"url\": \"https://api.github.com/licenses/apache-2.0\",\n    \"node_id\": \"MDc6TGljZW5zZTI=\"\n  },\n  \"forks\": 636,\n  \"open_issues\": 91,\n  \"watchers\": 1538,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"organization\": {\n    \"login\": \"SimpleMobileTools\",\n    \"id\": 16476257,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE2NDc2MjU3\",\n    \"avatar_url\": \"https://avatars2.githubusercontent.com/u/16476257?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/SimpleMobileTools\",\n    \"html_url\": \"https://github.com/SimpleMobileTools\",\n    \"followers_url\": \"https://api.github.com/users/SimpleMobileTools/followers\",\n    \"following_url\": \"https://api.github.com/users/SimpleMobileTools/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/SimpleMobileTools/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/SimpleMobileTools/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/SimpleMobileTools/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/SimpleMobileTools/orgs\",\n    \"repos_url\": \"https://api.github.com/users/SimpleMobileTools/repos\",\n    \"events_url\": \"https://api.github.com/users/SimpleMobileTools/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/SimpleMobileTools/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"network_count\": 636,\n  \"subscribers_count\": 89\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:20'),
(39, 'MLManager', 'javiersantos/MLManager', 'https://github.com/javiersantos/MLManager', 2, 983, '{\n  \"id\": 36009080,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnkzNjAwOTA4MA==\",\n  \"name\": \"MLManager\",\n  \"full_name\": \"javiersantos/MLManager\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"javiersantos\",\n    \"id\": 2229658,\n    \"node_id\": \"MDQ6VXNlcjIyMjk2NTg=\",\n    \"avatar_url\": \"https://avatars2.githubusercontent.com/u/2229658?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/javiersantos\",\n    \"html_url\": \"https://github.com/javiersantos\",\n    \"followers_url\": \"https://api.github.com/users/javiersantos/followers\",\n    \"following_url\": \"https://api.github.com/users/javiersantos/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/javiersantos/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/javiersantos/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/javiersantos/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/javiersantos/orgs\",\n    \"repos_url\": \"https://api.github.com/users/javiersantos/repos\",\n    \"events_url\": \"https://api.github.com/users/javiersantos/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/javiersantos/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/javiersantos/MLManager\",\n  \"description\": \"A modern, easy and customizable app manager for Android with Material Design\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/javiersantos/MLManager\",\n  \"forks_url\": \"https://api.github.com/repos/javiersantos/MLManager/forks\",\n  \"keys_url\": \"https://api.github.com/repos/javiersantos/MLManager/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/javiersantos/MLManager/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/javiersantos/MLManager/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/javiersantos/MLManager/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/javiersantos/MLManager/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/javiersantos/MLManager/events\",\n  \"assignees_url\": \"https://api.github.com/repos/javiersantos/MLManager/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/javiersantos/MLManager/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/javiersantos/MLManager/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/javiersantos/MLManager/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/javiersantos/MLManager/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/javiersantos/MLManager/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/javiersantos/MLManager/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/javiersantos/MLManager/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/javiersantos/MLManager/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/javiersantos/MLManager/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/javiersantos/MLManager/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/javiersantos/MLManager/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/javiersantos/MLManager/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/javiersantos/MLManager/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/javiersantos/MLManager/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/javiersantos/MLManager/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/javiersantos/MLManager/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/javiersantos/MLManager/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/javiersantos/MLManager/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/javiersantos/MLManager/merges\",\n  \"archive_url\": \"https://api.github.com/repos/javiersantos/MLManager/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/javiersantos/MLManager/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/javiersantos/MLManager/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/javiersantos/MLManager/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/javiersantos/MLManager/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/javiersantos/MLManager/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/javiersantos/MLManager/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/javiersantos/MLManager/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/javiersantos/MLManager/deployments\",\n  \"created_at\": \"2015-05-21T11:30:17Z\",\n  \"updated_at\": \"2019-02-25T09:26:51Z\",\n  \"pushed_at\": \"2018-01-03T02:43:31Z\",\n  \"git_url\": \"git://github.com/javiersantos/MLManager.git\",\n  \"ssh_url\": \"git@github.com:javiersantos/MLManager.git\",\n  \"clone_url\": \"https://github.com/javiersantos/MLManager.git\",\n  \"svn_url\": \"https://github.com/javiersantos/MLManager\",\n  \"homepage\": \"https://javiersantos.github.io/mlmanager\",\n  \"size\": 5836,\n  \"stargazers_count\": 983,\n  \"watchers_count\": 983,\n  \"language\": \"Java\",\n  \"has_issues\": false,\n  \"has_projects\": false,\n  \"has_downloads\": true,\n  \"has_wiki\": false,\n  \"has_pages\": false,\n  \"forks_count\": 352,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 5,\n  \"license\": {\n    \"key\": \"gpl-3.0\",\n    \"name\": \"GNU General Public License v3.0\",\n    \"spdx_id\": \"GPL-3.0\",\n    \"url\": \"https://api.github.com/licenses/gpl-3.0\",\n    \"node_id\": \"MDc6TGljZW5zZTk=\"\n  },\n  \"forks\": 352,\n  \"open_issues\": 5,\n  \"watchers\": 983,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"network_count\": 352,\n  \"subscribers_count\": 50\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:20'),
(40, 'PhotoAffix', 'afollestad/photo-affix', 'https://github.com/afollestad/photo-affix', 2, 839, '{\n  \"id\": 44452945,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnk0NDQ1Mjk0NQ==\",\n  \"name\": \"photo-affix\",\n  \"full_name\": \"afollestad/photo-affix\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"afollestad\",\n    \"id\": 1820165,\n    \"node_id\": \"MDQ6VXNlcjE4MjAxNjU=\",\n    \"avatar_url\": \"https://avatars0.githubusercontent.com/u/1820165?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/afollestad\",\n    \"html_url\": \"https://github.com/afollestad\",\n    \"followers_url\": \"https://api.github.com/users/afollestad/followers\",\n    \"following_url\": \"https://api.github.com/users/afollestad/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/afollestad/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/afollestad/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/afollestad/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/afollestad/orgs\",\n    \"repos_url\": \"https://api.github.com/users/afollestad/repos\",\n    \"events_url\": \"https://api.github.com/users/afollestad/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/afollestad/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/afollestad/photo-affix\",\n  \"description\": \"[BETA] Stitch your photos together vertically or horizontally easily!\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/afollestad/photo-affix\",\n  \"forks_url\": \"https://api.github.com/repos/afollestad/photo-affix/forks\",\n  \"keys_url\": \"https://api.github.com/repos/afollestad/photo-affix/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/afollestad/photo-affix/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/afollestad/photo-affix/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/afollestad/photo-affix/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/afollestad/photo-affix/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/afollestad/photo-affix/events\",\n  \"assignees_url\": \"https://api.github.com/repos/afollestad/photo-affix/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/afollestad/photo-affix/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/afollestad/photo-affix/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/afollestad/photo-affix/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/afollestad/photo-affix/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/afollestad/photo-affix/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/afollestad/photo-affix/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/afollestad/photo-affix/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/afollestad/photo-affix/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/afollestad/photo-affix/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/afollestad/photo-affix/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/afollestad/photo-affix/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/afollestad/photo-affix/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/afollestad/photo-affix/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/afollestad/photo-affix/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/afollestad/photo-affix/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/afollestad/photo-affix/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/afollestad/photo-affix/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/afollestad/photo-affix/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/afollestad/photo-affix/merges\",\n  \"archive_url\": \"https://api.github.com/repos/afollestad/photo-affix/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/afollestad/photo-affix/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/afollestad/photo-affix/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/afollestad/photo-affix/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/afollestad/photo-affix/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/afollestad/photo-affix/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/afollestad/photo-affix/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/afollestad/photo-affix/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/afollestad/photo-affix/deployments\",\n  \"created_at\": \"2015-10-17T20:17:30Z\",\n  \"updated_at\": \"2019-02-24T17:56:56Z\",\n  \"pushed_at\": \"2019-02-21T22:45:27Z\",\n  \"git_url\": \"git://github.com/afollestad/photo-affix.git\",\n  \"ssh_url\": \"git@github.com:afollestad/photo-affix.git\",\n  \"clone_url\": \"https://github.com/afollestad/photo-affix.git\",\n  \"svn_url\": \"https://github.com/afollestad/photo-affix\",\n  \"homepage\": \"https://af.codes\",\n  \"size\": 50457,\n  \"stargazers_count\": 839,\n  \"watchers_count\": 839,\n  \"language\": \"Kotlin\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": false,\n  \"forks_count\": 310,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 2,\n  \"license\": {\n    \"key\": \"apache-2.0\",\n    \"name\": \"Apache License 2.0\",\n    \"spdx_id\": \"Apache-2.0\",\n    \"url\": \"https://api.github.com/licenses/apache-2.0\",\n    \"node_id\": \"MDc6TGljZW5zZTI=\"\n  },\n  \"forks\": 310,\n  \"open_issues\": 2,\n  \"watchers\": 839,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"network_count\": 310,\n  \"subscribers_count\": 42\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:21'),
(41, 'AnExplorer', '1hakr/AnExplorer', 'https://github.com/1hakr/AnExplorer', 2, 960, '{\n  \"id\": 9133677,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnk5MTMzNjc3\",\n  \"name\": \"AnExplorer\",\n  \"full_name\": \"1hakr/AnExplorer\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"1hakr\",\n    \"id\": 614675,\n    \"node_id\": \"MDQ6VXNlcjYxNDY3NQ==\",\n    \"avatar_url\": \"https://avatars3.githubusercontent.com/u/614675?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/1hakr\",\n    \"html_url\": \"https://github.com/1hakr\",\n    \"followers_url\": \"https://api.github.com/users/1hakr/followers\",\n    \"following_url\": \"https://api.github.com/users/1hakr/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/1hakr/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/1hakr/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/1hakr/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/1hakr/orgs\",\n    \"repos_url\": \"https://api.github.com/users/1hakr/repos\",\n    \"events_url\": \"https://api.github.com/users/1hakr/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/1hakr/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/1hakr/AnExplorer\",\n  \"description\": \"📁 Another Android Explorer ( File Manager ) is an All-in-One Open source file manager. AnExplorer File Manager (File Explorer) is designed for all android devices including Phones, Phablets, Tablets, Chromecast, Wear OS, Android TV and Chromebooks. It\'s a fully designed with Material guidelines by Google.\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/1hakr/AnExplorer\",\n  \"forks_url\": \"https://api.github.com/repos/1hakr/AnExplorer/forks\",\n  \"keys_url\": \"https://api.github.com/repos/1hakr/AnExplorer/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/1hakr/AnExplorer/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/1hakr/AnExplorer/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/1hakr/AnExplorer/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/1hakr/AnExplorer/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/1hakr/AnExplorer/events\",\n  \"assignees_url\": \"https://api.github.com/repos/1hakr/AnExplorer/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/1hakr/AnExplorer/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/1hakr/AnExplorer/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/1hakr/AnExplorer/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/1hakr/AnExplorer/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/1hakr/AnExplorer/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/1hakr/AnExplorer/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/1hakr/AnExplorer/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/1hakr/AnExplorer/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/1hakr/AnExplorer/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/1hakr/AnExplorer/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/1hakr/AnExplorer/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/1hakr/AnExplorer/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/1hakr/AnExplorer/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/1hakr/AnExplorer/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/1hakr/AnExplorer/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/1hakr/AnExplorer/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/1hakr/AnExplorer/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/1hakr/AnExplorer/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/1hakr/AnExplorer/merges\",\n  \"archive_url\": \"https://api.github.com/repos/1hakr/AnExplorer/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/1hakr/AnExplorer/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/1hakr/AnExplorer/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/1hakr/AnExplorer/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/1hakr/AnExplorer/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/1hakr/AnExplorer/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/1hakr/AnExplorer/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/1hakr/AnExplorer/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/1hakr/AnExplorer/deployments\",\n  \"created_at\": \"2013-03-31T17:56:46Z\",\n  \"updated_at\": \"2019-02-26T06:55:04Z\",\n  \"pushed_at\": \"2018-12-18T01:22:50Z\",\n  \"git_url\": \"git://github.com/1hakr/AnExplorer.git\",\n  \"ssh_url\": \"git@github.com:1hakr/AnExplorer.git\",\n  \"clone_url\": \"https://github.com/1hakr/AnExplorer.git\",\n  \"svn_url\": \"https://github.com/1hakr/AnExplorer\",\n  \"homepage\": \"https://anexplorer.co\",\n  \"size\": 14992,\n  \"stargazers_count\": 960,\n  \"watchers_count\": 960,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": false,\n  \"forks_count\": 412,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 11,\n  \"license\": {\n    \"key\": \"apache-2.0\",\n    \"name\": \"Apache License 2.0\",\n    \"spdx_id\": \"Apache-2.0\",\n    \"url\": \"https://api.github.com/licenses/apache-2.0\",\n    \"node_id\": \"MDc6TGljZW5zZTI=\"\n  },\n  \"forks\": 412,\n  \"open_issues\": 11,\n  \"watchers\": 960,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"network_count\": 412,\n  \"subscribers_count\": 74\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:22'),
(42, 'Minimal ToDo', 'avjinder/Minimal-Todo', 'https://github.com/avjinder/Minimal-Todo', 2, 1615, '{\n  \"id\": 42064055,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnk0MjA2NDA1NQ==\",\n  \"name\": \"Minimal-Todo\",\n  \"full_name\": \"avjinder/Minimal-Todo\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"avjinder\",\n    \"id\": 1726038,\n    \"node_id\": \"MDQ6VXNlcjE3MjYwMzg=\",\n    \"avatar_url\": \"https://avatars0.githubusercontent.com/u/1726038?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/avjinder\",\n    \"html_url\": \"https://github.com/avjinder\",\n    \"followers_url\": \"https://api.github.com/users/avjinder/followers\",\n    \"following_url\": \"https://api.github.com/users/avjinder/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/avjinder/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/avjinder/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/avjinder/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/avjinder/orgs\",\n    \"repos_url\": \"https://api.github.com/users/avjinder/repos\",\n    \"events_url\": \"https://api.github.com/users/avjinder/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/avjinder/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/avjinder/Minimal-Todo\",\n  \"description\": \"Material To-Do App\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/avjinder/Minimal-Todo\",\n  \"forks_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/forks\",\n  \"keys_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/events\",\n  \"assignees_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/merges\",\n  \"archive_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/avjinder/Minimal-Todo/deployments\",\n  \"created_at\": \"2015-09-07T16:41:11Z\",\n  \"updated_at\": \"2019-02-25T02:41:39Z\",\n  \"pushed_at\": \"2019-02-14T18:54:54Z\",\n  \"git_url\": \"git://github.com/avjinder/Minimal-Todo.git\",\n  \"ssh_url\": \"git@github.com:avjinder/Minimal-Todo.git\",\n  \"clone_url\": \"https://github.com/avjinder/Minimal-Todo.git\",\n  \"svn_url\": \"https://github.com/avjinder/Minimal-Todo\",\n  \"homepage\": null,\n  \"size\": 17725,\n  \"stargazers_count\": 1615,\n  \"watchers_count\": 1615,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": false,\n  \"forks_count\": 708,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 69,\n  \"license\": {\n    \"key\": \"mit\",\n    \"name\": \"MIT License\",\n    \"spdx_id\": \"MIT\",\n    \"url\": \"https://api.github.com/licenses/mit\",\n    \"node_id\": \"MDc6TGljZW5zZTEz\"\n  },\n  \"forks\": 708,\n  \"open_issues\": 69,\n  \"watchers\": 1615,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"network_count\": 708,\n  \"subscribers_count\": 86\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:22');
INSERT INTO `projects` (`id`, `name`, `package_name`, `url`, `technology_id`, `stars_count`, `gh_repo_data`, `deleted_at`, `created_at`, `updated_at`) VALUES
(43, 'AnotherMonitor', 'AntonioRedondo/AnotherMonitor', 'https://github.com/AntonioRedondo/AnotherMonitor', 2, 817, '{\n  \"id\": 32958366,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnkzMjk1ODM2Ng==\",\n  \"name\": \"AnotherMonitor\",\n  \"full_name\": \"AntonioRedondo/AnotherMonitor\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"AntonioRedondo\",\n    \"id\": 5444421,\n    \"node_id\": \"MDQ6VXNlcjU0NDQ0MjE=\",\n    \"avatar_url\": \"https://avatars1.githubusercontent.com/u/5444421?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/AntonioRedondo\",\n    \"html_url\": \"https://github.com/AntonioRedondo\",\n    \"followers_url\": \"https://api.github.com/users/AntonioRedondo/followers\",\n    \"following_url\": \"https://api.github.com/users/AntonioRedondo/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/AntonioRedondo/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/AntonioRedondo/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/AntonioRedondo/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/AntonioRedondo/orgs\",\n    \"repos_url\": \"https://api.github.com/users/AntonioRedondo/repos\",\n    \"events_url\": \"https://api.github.com/users/AntonioRedondo/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/AntonioRedondo/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/AntonioRedondo/AnotherMonitor\",\n  \"description\": \"Monitors and records the CPU and memory usage of Android devices\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor\",\n  \"forks_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/forks\",\n  \"keys_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/events\",\n  \"assignees_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/merges\",\n  \"archive_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/AntonioRedondo/AnotherMonitor/deployments\",\n  \"created_at\": \"2015-03-26T23:58:09Z\",\n  \"updated_at\": \"2019-02-23T11:49:22Z\",\n  \"pushed_at\": \"2017-10-22T19:30:38Z\",\n  \"git_url\": \"git://github.com/AntonioRedondo/AnotherMonitor.git\",\n  \"ssh_url\": \"git@github.com:AntonioRedondo/AnotherMonitor.git\",\n  \"clone_url\": \"https://github.com/AntonioRedondo/AnotherMonitor.git\",\n  \"svn_url\": \"https://github.com/AntonioRedondo/AnotherMonitor\",\n  \"homepage\": \"https://play.google.com/store/apps/details?id=org.anothermonitor\",\n  \"size\": 255,\n  \"stargazers_count\": 817,\n  \"watchers_count\": 817,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": false,\n  \"has_downloads\": true,\n  \"has_wiki\": false,\n  \"has_pages\": false,\n  \"forks_count\": 259,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 4,\n  \"license\": {\n    \"key\": \"gpl-3.0\",\n    \"name\": \"GNU General Public License v3.0\",\n    \"spdx_id\": \"GPL-3.0\",\n    \"url\": \"https://api.github.com/licenses/gpl-3.0\",\n    \"node_id\": \"MDc6TGljZW5zZTk=\"\n  },\n  \"forks\": 259,\n  \"open_issues\": 4,\n  \"watchers\": 817,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"network_count\": 259,\n  \"subscribers_count\": 60\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:23'),
(44, 'InstaMaterial', 'frogermcs/InstaMaterial', 'https://github.com/frogermcs/InstaMaterial', 2, 4918, '{\n  \"id\": 26450553,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnkyNjQ1MDU1Mw==\",\n  \"name\": \"InstaMaterial\",\n  \"full_name\": \"frogermcs/InstaMaterial\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"frogermcs\",\n    \"id\": 407504,\n    \"node_id\": \"MDQ6VXNlcjQwNzUwNA==\",\n    \"avatar_url\": \"https://avatars3.githubusercontent.com/u/407504?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/frogermcs\",\n    \"html_url\": \"https://github.com/frogermcs\",\n    \"followers_url\": \"https://api.github.com/users/frogermcs/followers\",\n    \"following_url\": \"https://api.github.com/users/frogermcs/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/frogermcs/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/frogermcs/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/frogermcs/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/frogermcs/orgs\",\n    \"repos_url\": \"https://api.github.com/users/frogermcs/repos\",\n    \"events_url\": \"https://api.github.com/users/frogermcs/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/frogermcs/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/frogermcs/InstaMaterial\",\n  \"description\": \"Implementation of Instagram with Material Design (originally based on Emmanuel Pacamalan\'s concept)\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/frogermcs/InstaMaterial\",\n  \"forks_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/forks\",\n  \"keys_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/events\",\n  \"assignees_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/merges\",\n  \"archive_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/frogermcs/InstaMaterial/deployments\",\n  \"created_at\": \"2014-11-10T18:56:49Z\",\n  \"updated_at\": \"2019-02-25T11:15:20Z\",\n  \"pushed_at\": \"2018-10-10T17:24:33Z\",\n  \"git_url\": \"git://github.com/frogermcs/InstaMaterial.git\",\n  \"ssh_url\": \"git@github.com:frogermcs/InstaMaterial.git\",\n  \"clone_url\": \"https://github.com/frogermcs/InstaMaterial.git\",\n  \"svn_url\": \"https://github.com/frogermcs/InstaMaterial\",\n  \"homepage\": null,\n  \"size\": 4531,\n  \"stargazers_count\": 4918,\n  \"watchers_count\": 4918,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": false,\n  \"forks_count\": 1500,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 30,\n  \"license\": {\n    \"key\": \"apache-2.0\",\n    \"name\": \"Apache License 2.0\",\n    \"spdx_id\": \"Apache-2.0\",\n    \"url\": \"https://api.github.com/licenses/apache-2.0\",\n    \"node_id\": \"MDc6TGljZW5zZTI=\"\n  },\n  \"forks\": 1500,\n  \"open_issues\": 30,\n  \"watchers\": 4918,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"network_count\": 1500,\n  \"subscribers_count\": 308\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:23'),
(45, 'OmniNotes', 'federicoiosue/Omni-Notes', 'https://github.com/federicoiosue/Omni-Notes', 2, 1753, '{\n  \"id\": 15120144,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnkxNTEyMDE0NA==\",\n  \"name\": \"Omni-Notes\",\n  \"full_name\": \"federicoiosue/Omni-Notes\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"federicoiosue\",\n    \"id\": 487104,\n    \"node_id\": \"MDQ6VXNlcjQ4NzEwNA==\",\n    \"avatar_url\": \"https://avatars0.githubusercontent.com/u/487104?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/federicoiosue\",\n    \"html_url\": \"https://github.com/federicoiosue\",\n    \"followers_url\": \"https://api.github.com/users/federicoiosue/followers\",\n    \"following_url\": \"https://api.github.com/users/federicoiosue/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/federicoiosue/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/federicoiosue/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/federicoiosue/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/federicoiosue/orgs\",\n    \"repos_url\": \"https://api.github.com/users/federicoiosue/repos\",\n    \"events_url\": \"https://api.github.com/users/federicoiosue/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/federicoiosue/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/federicoiosue/Omni-Notes\",\n  \"description\": \"Open source note-taking application for Android\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes\",\n  \"forks_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/forks\",\n  \"keys_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/events\",\n  \"assignees_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/merges\",\n  \"archive_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/federicoiosue/Omni-Notes/deployments\",\n  \"created_at\": \"2013-12-11T21:59:18Z\",\n  \"updated_at\": \"2019-02-24T11:13:14Z\",\n  \"pushed_at\": \"2019-02-07T23:09:17Z\",\n  \"git_url\": \"git://github.com/federicoiosue/Omni-Notes.git\",\n  \"ssh_url\": \"git@github.com:federicoiosue/Omni-Notes.git\",\n  \"clone_url\": \"https://github.com/federicoiosue/Omni-Notes.git\",\n  \"svn_url\": \"https://github.com/federicoiosue/Omni-Notes\",\n  \"homepage\": \"https://omninotes.app\",\n  \"size\": 41006,\n  \"stargazers_count\": 1753,\n  \"watchers_count\": 1753,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": true,\n  \"forks_count\": 759,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 148,\n  \"license\": {\n    \"key\": \"gpl-3.0\",\n    \"name\": \"GNU General Public License v3.0\",\n    \"spdx_id\": \"GPL-3.0\",\n    \"url\": \"https://api.github.com/licenses/gpl-3.0\",\n    \"node_id\": \"MDc6TGljZW5zZTk=\"\n  },\n  \"forks\": 759,\n  \"open_issues\": 148,\n  \"watchers\": 1753,\n  \"default_branch\": \"develop\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"network_count\": 759,\n  \"subscribers_count\": 143\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:24'),
(46, 'Clip Stack', 'heruoxin/Clip-Stack', 'https://github.com/heruoxin/Clip-Stack', 2, 797, '{\n  \"id\": 28000009,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnkyODAwMDAwOQ==\",\n  \"name\": \"Clip-Stack\",\n  \"full_name\": \"heruoxin/Clip-Stack\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"heruoxin\",\n    \"id\": 1999794,\n    \"node_id\": \"MDQ6VXNlcjE5OTk3OTQ=\",\n    \"avatar_url\": \"https://avatars3.githubusercontent.com/u/1999794?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/heruoxin\",\n    \"html_url\": \"https://github.com/heruoxin\",\n    \"followers_url\": \"https://api.github.com/users/heruoxin/followers\",\n    \"following_url\": \"https://api.github.com/users/heruoxin/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/heruoxin/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/heruoxin/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/heruoxin/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/heruoxin/orgs\",\n    \"repos_url\": \"https://api.github.com/users/heruoxin/repos\",\n    \"events_url\": \"https://api.github.com/users/heruoxin/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/heruoxin/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/heruoxin/Clip-Stack\",\n  \"description\": \"[deprecated]\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/heruoxin/Clip-Stack\",\n  \"forks_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/forks\",\n  \"keys_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/events\",\n  \"assignees_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/merges\",\n  \"archive_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/heruoxin/Clip-Stack/deployments\",\n  \"created_at\": \"2014-12-14T16:20:42Z\",\n  \"updated_at\": \"2019-02-26T04:57:32Z\",\n  \"pushed_at\": \"2019-02-20T05:41:18Z\",\n  \"git_url\": \"git://github.com/heruoxin/Clip-Stack.git\",\n  \"ssh_url\": \"git@github.com:heruoxin/Clip-Stack.git\",\n  \"clone_url\": \"https://github.com/heruoxin/Clip-Stack.git\",\n  \"svn_url\": \"https://github.com/heruoxin/Clip-Stack\",\n  \"homepage\": \"https://play.google.com/store/apps/details?id=com.catchingnow.tinyclipboardmanager\",\n  \"size\": 19504,\n  \"stargazers_count\": 797,\n  \"watchers_count\": 797,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": false,\n  \"forks_count\": 279,\n  \"mirror_url\": null,\n  \"archived\": true,\n  \"open_issues_count\": 43,\n  \"license\": {\n    \"key\": \"mit\",\n    \"name\": \"MIT License\",\n    \"spdx_id\": \"MIT\",\n    \"url\": \"https://api.github.com/licenses/mit\",\n    \"node_id\": \"MDc6TGljZW5zZTEz\"\n  },\n  \"forks\": 279,\n  \"open_issues\": 43,\n  \"watchers\": 797,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"network_count\": 279,\n  \"subscribers_count\": 71\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:24'),
(47, 'Super Clean Master', 'joyoyao/superCleanMaster', 'https://github.com/joyoyao/superCleanMaster', 2, 1710, '{\n  \"id\": 30683883,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnkzMDY4Mzg4Mw==\",\n  \"name\": \"superCleanMaster\",\n  \"full_name\": \"joyoyao/superCleanMaster\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"joyoyao\",\n    \"id\": 4859506,\n    \"node_id\": \"MDQ6VXNlcjQ4NTk1MDY=\",\n    \"avatar_url\": \"https://avatars2.githubusercontent.com/u/4859506?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/joyoyao\",\n    \"html_url\": \"https://github.com/joyoyao\",\n    \"followers_url\": \"https://api.github.com/users/joyoyao/followers\",\n    \"following_url\": \"https://api.github.com/users/joyoyao/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/joyoyao/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/joyoyao/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/joyoyao/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/joyoyao/orgs\",\n    \"repos_url\": \"https://api.github.com/users/joyoyao/repos\",\n    \"events_url\": \"https://api.github.com/users/joyoyao/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/joyoyao/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/joyoyao/superCleanMaster\",\n  \"description\": \"[DEPRECATED] \",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/joyoyao/superCleanMaster\",\n  \"forks_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/forks\",\n  \"keys_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/events\",\n  \"assignees_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/merges\",\n  \"archive_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/joyoyao/superCleanMaster/deployments\",\n  \"created_at\": \"2015-02-12T03:37:41Z\",\n  \"updated_at\": \"2019-02-26T04:54:49Z\",\n  \"pushed_at\": \"2018-10-24T07:22:01Z\",\n  \"git_url\": \"git://github.com/joyoyao/superCleanMaster.git\",\n  \"ssh_url\": \"git@github.com:joyoyao/superCleanMaster.git\",\n  \"clone_url\": \"https://github.com/joyoyao/superCleanMaster.git\",\n  \"svn_url\": \"https://github.com/joyoyao/superCleanMaster\",\n  \"homepage\": \"\",\n  \"size\": 12302,\n  \"stargazers_count\": 1710,\n  \"watchers_count\": 1710,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": false,\n  \"forks_count\": 826,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 18,\n  \"license\": null,\n  \"forks\": 826,\n  \"open_issues\": 18,\n  \"watchers\": 1710,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"network_count\": 826,\n  \"subscribers_count\": 104\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:25'),
(48, 'Travel Mate', 'Swati4star/Travel-Mate', 'https://github.com/Swati4star/Travel-Mate', 2, 849, '{\n  \"id\": 50726401,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnk1MDcyNjQwMQ==\",\n  \"name\": \"Travel-Mate\",\n  \"full_name\": \"project-travel-mate/Travel-Mate\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"project-travel-mate\",\n    \"id\": 39533754,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjM5NTMzNzU0\",\n    \"avatar_url\": \"https://avatars2.githubusercontent.com/u/39533754?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/project-travel-mate\",\n    \"html_url\": \"https://github.com/project-travel-mate\",\n    \"followers_url\": \"https://api.github.com/users/project-travel-mate/followers\",\n    \"following_url\": \"https://api.github.com/users/project-travel-mate/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/project-travel-mate/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/project-travel-mate/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/project-travel-mate/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/project-travel-mate/orgs\",\n    \"repos_url\": \"https://api.github.com/users/project-travel-mate/repos\",\n    \"events_url\": \"https://api.github.com/users/project-travel-mate/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/project-travel-mate/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/project-travel-mate/Travel-Mate\",\n  \"description\": \"A complete travel guide!\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate\",\n  \"forks_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/forks\",\n  \"keys_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/events\",\n  \"assignees_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/merges\",\n  \"archive_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/project-travel-mate/Travel-Mate/deployments\",\n  \"created_at\": \"2016-01-30T13:42:30Z\",\n  \"updated_at\": \"2019-02-25T19:47:10Z\",\n  \"pushed_at\": \"2019-02-16T05:48:52Z\",\n  \"git_url\": \"git://github.com/project-travel-mate/Travel-Mate.git\",\n  \"ssh_url\": \"git@github.com:project-travel-mate/Travel-Mate.git\",\n  \"clone_url\": \"https://github.com/project-travel-mate/Travel-Mate.git\",\n  \"svn_url\": \"https://github.com/project-travel-mate/Travel-Mate\",\n  \"homepage\": \"http://project-travel-mate.github.io/Travel-Mate\",\n  \"size\": 60648,\n  \"stargazers_count\": 849,\n  \"watchers_count\": 849,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": true,\n  \"forks_count\": 571,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 13,\n  \"license\": {\n    \"key\": \"mit\",\n    \"name\": \"MIT License\",\n    \"spdx_id\": \"MIT\",\n    \"url\": \"https://api.github.com/licenses/mit\",\n    \"node_id\": \"MDc6TGljZW5zZTEz\"\n  },\n  \"forks\": 571,\n  \"open_issues\": 13,\n  \"watchers\": 849,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"organization\": {\n    \"login\": \"project-travel-mate\",\n    \"id\": 39533754,\n    \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjM5NTMzNzU0\",\n    \"avatar_url\": \"https://avatars2.githubusercontent.com/u/39533754?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/project-travel-mate\",\n    \"html_url\": \"https://github.com/project-travel-mate\",\n    \"followers_url\": \"https://api.github.com/users/project-travel-mate/followers\",\n    \"following_url\": \"https://api.github.com/users/project-travel-mate/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/project-travel-mate/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/project-travel-mate/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/project-travel-mate/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/project-travel-mate/orgs\",\n    \"repos_url\": \"https://api.github.com/users/project-travel-mate/repos\",\n    \"events_url\": \"https://api.github.com/users/project-travel-mate/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/project-travel-mate/received_events\",\n    \"type\": \"Organization\",\n    \"site_admin\": false\n  },\n  \"network_count\": 571,\n  \"subscribers_count\": 90\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:26'),
(49, 'KISS', 'Neamar/KISS', 'https://github.com/Neamar/KISS', 2, 1138, '{\n  \"id\": 6047468,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnk2MDQ3NDY4\",\n  \"name\": \"KISS\",\n  \"full_name\": \"Neamar/KISS\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"Neamar\",\n    \"id\": 536844,\n    \"node_id\": \"MDQ6VXNlcjUzNjg0NA==\",\n    \"avatar_url\": \"https://avatars0.githubusercontent.com/u/536844?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/Neamar\",\n    \"html_url\": \"https://github.com/Neamar\",\n    \"followers_url\": \"https://api.github.com/users/Neamar/followers\",\n    \"following_url\": \"https://api.github.com/users/Neamar/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/Neamar/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/Neamar/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/Neamar/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/Neamar/orgs\",\n    \"repos_url\": \"https://api.github.com/users/Neamar/repos\",\n    \"events_url\": \"https://api.github.com/users/Neamar/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/Neamar/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/Neamar/KISS\",\n  \"description\": \"Lightning fast, open-source, < 200kb Android launcher\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/Neamar/KISS\",\n  \"forks_url\": \"https://api.github.com/repos/Neamar/KISS/forks\",\n  \"keys_url\": \"https://api.github.com/repos/Neamar/KISS/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/Neamar/KISS/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/Neamar/KISS/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/Neamar/KISS/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/Neamar/KISS/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/Neamar/KISS/events\",\n  \"assignees_url\": \"https://api.github.com/repos/Neamar/KISS/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/Neamar/KISS/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/Neamar/KISS/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/Neamar/KISS/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/Neamar/KISS/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/Neamar/KISS/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/Neamar/KISS/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/Neamar/KISS/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/Neamar/KISS/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/Neamar/KISS/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/Neamar/KISS/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/Neamar/KISS/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/Neamar/KISS/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/Neamar/KISS/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/Neamar/KISS/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/Neamar/KISS/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/Neamar/KISS/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/Neamar/KISS/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/Neamar/KISS/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/Neamar/KISS/merges\",\n  \"archive_url\": \"https://api.github.com/repos/Neamar/KISS/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/Neamar/KISS/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/Neamar/KISS/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/Neamar/KISS/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/Neamar/KISS/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/Neamar/KISS/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/Neamar/KISS/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/Neamar/KISS/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/Neamar/KISS/deployments\",\n  \"created_at\": \"2012-10-02T16:03:43Z\",\n  \"updated_at\": \"2019-02-25T22:49:20Z\",\n  \"pushed_at\": \"2019-02-25T09:23:41Z\",\n  \"git_url\": \"git://github.com/Neamar/KISS.git\",\n  \"ssh_url\": \"git@github.com:Neamar/KISS.git\",\n  \"clone_url\": \"https://github.com/Neamar/KISS.git\",\n  \"svn_url\": \"https://github.com/Neamar/KISS\",\n  \"homepage\": \"https://kisslauncher.com/\",\n  \"size\": 101647,\n  \"stargazers_count\": 1138,\n  \"watchers_count\": 1138,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": true,\n  \"forks_count\": 394,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 83,\n  \"license\": {\n    \"key\": \"gpl-3.0\",\n    \"name\": \"GNU General Public License v3.0\",\n    \"spdx_id\": \"GPL-3.0\",\n    \"url\": \"https://api.github.com/licenses/gpl-3.0\",\n    \"node_id\": \"MDc6TGljZW5zZTk=\"\n  },\n  \"forks\": 394,\n  \"open_issues\": 83,\n  \"watchers\": 1138,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"network_count\": 394,\n  \"subscribers_count\": 109\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:26');
INSERT INTO `projects` (`id`, `name`, `package_name`, `url`, `technology_id`, `stars_count`, `gh_repo_data`, `deleted_at`, `created_at`, `updated_at`) VALUES
(50, 'Turbo Editor', 'vmihalachi/turbo-editor', 'https://github.com/vmihalachi/turbo-editor', 2, 927, '{\n  \"id\": 12828461,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjgyODQ2MQ==\",\n  \"name\": \"turbo-editor\",\n  \"full_name\": \"vmihalachi/turbo-editor\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"vmihalachi\",\n    \"id\": 956257,\n    \"node_id\": \"MDQ6VXNlcjk1NjI1Nw==\",\n    \"avatar_url\": \"https://avatars3.githubusercontent.com/u/956257?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/vmihalachi\",\n    \"html_url\": \"https://github.com/vmihalachi\",\n    \"followers_url\": \"https://api.github.com/users/vmihalachi/followers\",\n    \"following_url\": \"https://api.github.com/users/vmihalachi/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/vmihalachi/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/vmihalachi/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/vmihalachi/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/vmihalachi/orgs\",\n    \"repos_url\": \"https://api.github.com/users/vmihalachi/repos\",\n    \"events_url\": \"https://api.github.com/users/vmihalachi/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/vmihalachi/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/vmihalachi/turbo-editor\",\n  \"description\": \"Simple and powerful File Editor for Android. All is licensed under the GPLv3 license.\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/vmihalachi/turbo-editor\",\n  \"forks_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/forks\",\n  \"keys_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/events\",\n  \"assignees_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/merges\",\n  \"archive_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/vmihalachi/turbo-editor/deployments\",\n  \"created_at\": \"2013-09-14T11:42:42Z\",\n  \"updated_at\": \"2019-02-26T12:42:58Z\",\n  \"pushed_at\": \"2018-07-28T09:00:53Z\",\n  \"git_url\": \"git://github.com/vmihalachi/turbo-editor.git\",\n  \"ssh_url\": \"git@github.com:vmihalachi/turbo-editor.git\",\n  \"clone_url\": \"https://github.com/vmihalachi/turbo-editor.git\",\n  \"svn_url\": \"https://github.com/vmihalachi/turbo-editor\",\n  \"homepage\": \"http://vmihalachi.github.io/turbo-editor/\",\n  \"size\": 2761,\n  \"stargazers_count\": 927,\n  \"watchers_count\": 927,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": true,\n  \"forks_count\": 309,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 66,\n  \"license\": {\n    \"key\": \"gpl-3.0\",\n    \"name\": \"GNU General Public License v3.0\",\n    \"spdx_id\": \"GPL-3.0\",\n    \"url\": \"https://api.github.com/licenses/gpl-3.0\",\n    \"node_id\": \"MDc6TGljZW5zZTk=\"\n  },\n  \"forks\": 309,\n  \"open_issues\": 66,\n  \"watchers\": 927,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"network_count\": 309,\n  \"subscribers_count\": 75\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:28'),
(51, 'Wally', 'Musenkishi/wally', 'https://github.com/Musenkishi/wally', 2, 884, '{\n  \"id\": 27177077,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnkyNzE3NzA3Nw==\",\n  \"name\": \"wally\",\n  \"full_name\": \"Musenkishi/wally\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"Musenkishi\",\n    \"id\": 1108166,\n    \"node_id\": \"MDQ6VXNlcjExMDgxNjY=\",\n    \"avatar_url\": \"https://avatars1.githubusercontent.com/u/1108166?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/Musenkishi\",\n    \"html_url\": \"https://github.com/Musenkishi\",\n    \"followers_url\": \"https://api.github.com/users/Musenkishi/followers\",\n    \"following_url\": \"https://api.github.com/users/Musenkishi/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/Musenkishi/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/Musenkishi/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/Musenkishi/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/Musenkishi/orgs\",\n    \"repos_url\": \"https://api.github.com/users/Musenkishi/repos\",\n    \"events_url\": \"https://api.github.com/users/Musenkishi/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/Musenkishi/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/Musenkishi/wally\",\n  \"description\": \"Wally is a fast and efficient wallpaper application for Android\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/Musenkishi/wally\",\n  \"forks_url\": \"https://api.github.com/repos/Musenkishi/wally/forks\",\n  \"keys_url\": \"https://api.github.com/repos/Musenkishi/wally/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/Musenkishi/wally/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/Musenkishi/wally/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/Musenkishi/wally/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/Musenkishi/wally/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/Musenkishi/wally/events\",\n  \"assignees_url\": \"https://api.github.com/repos/Musenkishi/wally/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/Musenkishi/wally/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/Musenkishi/wally/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/Musenkishi/wally/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/Musenkishi/wally/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/Musenkishi/wally/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/Musenkishi/wally/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/Musenkishi/wally/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/Musenkishi/wally/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/Musenkishi/wally/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/Musenkishi/wally/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/Musenkishi/wally/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/Musenkishi/wally/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/Musenkishi/wally/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/Musenkishi/wally/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/Musenkishi/wally/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/Musenkishi/wally/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/Musenkishi/wally/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/Musenkishi/wally/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/Musenkishi/wally/merges\",\n  \"archive_url\": \"https://api.github.com/repos/Musenkishi/wally/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/Musenkishi/wally/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/Musenkishi/wally/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/Musenkishi/wally/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/Musenkishi/wally/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/Musenkishi/wally/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/Musenkishi/wally/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/Musenkishi/wally/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/Musenkishi/wally/deployments\",\n  \"created_at\": \"2014-11-26T13:04:05Z\",\n  \"updated_at\": \"2019-02-22T08:37:04Z\",\n  \"pushed_at\": \"2016-11-20T08:50:10Z\",\n  \"git_url\": \"git://github.com/Musenkishi/wally.git\",\n  \"ssh_url\": \"git@github.com:Musenkishi/wally.git\",\n  \"clone_url\": \"https://github.com/Musenkishi/wally.git\",\n  \"svn_url\": \"https://github.com/Musenkishi/wally\",\n  \"homepage\": \"\",\n  \"size\": 756,\n  \"stargazers_count\": 884,\n  \"watchers_count\": 884,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": false,\n  \"forks_count\": 294,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 9,\n  \"license\": {\n    \"key\": \"other\",\n    \"name\": \"Other\",\n    \"spdx_id\": \"NOASSERTION\",\n    \"url\": null,\n    \"node_id\": \"MDc6TGljZW5zZTA=\"\n  },\n  \"forks\": 294,\n  \"open_issues\": 9,\n  \"watchers\": 884,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"network_count\": 294,\n  \"subscribers_count\": 56\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:28'),
(52, 'Pedometer', 'j4velin/Pedometer', 'https://github.com/j4velin/Pedometer', 2, 1167, '{\n  \"id\": 14645983,\n  \"node_id\": \"MDEwOlJlcG9zaXRvcnkxNDY0NTk4Mw==\",\n  \"name\": \"Pedometer\",\n  \"full_name\": \"j4velin/Pedometer\",\n  \"private\": false,\n  \"owner\": {\n    \"login\": \"j4velin\",\n    \"id\": 3942091,\n    \"node_id\": \"MDQ6VXNlcjM5NDIwOTE=\",\n    \"avatar_url\": \"https://avatars1.githubusercontent.com/u/3942091?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/j4velin\",\n    \"html_url\": \"https://github.com/j4velin\",\n    \"followers_url\": \"https://api.github.com/users/j4velin/followers\",\n    \"following_url\": \"https://api.github.com/users/j4velin/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/j4velin/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/j4velin/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/j4velin/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/j4velin/orgs\",\n    \"repos_url\": \"https://api.github.com/users/j4velin/repos\",\n    \"events_url\": \"https://api.github.com/users/j4velin/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/j4velin/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"html_url\": \"https://github.com/j4velin/Pedometer\",\n  \"description\": \"Lightweight pedometer app for Android using the hardware step sensor\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/j4velin/Pedometer\",\n  \"forks_url\": \"https://api.github.com/repos/j4velin/Pedometer/forks\",\n  \"keys_url\": \"https://api.github.com/repos/j4velin/Pedometer/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/j4velin/Pedometer/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/j4velin/Pedometer/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/j4velin/Pedometer/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/j4velin/Pedometer/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/j4velin/Pedometer/events\",\n  \"assignees_url\": \"https://api.github.com/repos/j4velin/Pedometer/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/j4velin/Pedometer/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/j4velin/Pedometer/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/j4velin/Pedometer/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/j4velin/Pedometer/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/j4velin/Pedometer/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/j4velin/Pedometer/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/j4velin/Pedometer/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/j4velin/Pedometer/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/j4velin/Pedometer/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/j4velin/Pedometer/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/j4velin/Pedometer/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/j4velin/Pedometer/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/j4velin/Pedometer/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/j4velin/Pedometer/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/j4velin/Pedometer/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/j4velin/Pedometer/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/j4velin/Pedometer/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/j4velin/Pedometer/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/j4velin/Pedometer/merges\",\n  \"archive_url\": \"https://api.github.com/repos/j4velin/Pedometer/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/j4velin/Pedometer/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/j4velin/Pedometer/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/j4velin/Pedometer/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/j4velin/Pedometer/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/j4velin/Pedometer/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/j4velin/Pedometer/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/j4velin/Pedometer/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/j4velin/Pedometer/deployments\",\n  \"created_at\": \"2013-11-23T16:37:22Z\",\n  \"updated_at\": \"2019-02-26T05:39:34Z\",\n  \"pushed_at\": \"2018-12-18T21:39:15Z\",\n  \"git_url\": \"git://github.com/j4velin/Pedometer.git\",\n  \"ssh_url\": \"git@github.com:j4velin/Pedometer.git\",\n  \"clone_url\": \"https://github.com/j4velin/Pedometer.git\",\n  \"svn_url\": \"https://github.com/j4velin/Pedometer\",\n  \"homepage\": \"\",\n  \"size\": 1031,\n  \"stargazers_count\": 1167,\n  \"watchers_count\": 1167,\n  \"language\": \"Java\",\n  \"has_issues\": true,\n  \"has_projects\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": false,\n  \"forks_count\": 588,\n  \"mirror_url\": null,\n  \"archived\": false,\n  \"open_issues_count\": 20,\n  \"license\": {\n    \"key\": \"apache-2.0\",\n    \"name\": \"Apache License 2.0\",\n    \"spdx_id\": \"Apache-2.0\",\n    \"url\": \"https://api.github.com/licenses/apache-2.0\",\n    \"node_id\": \"MDc6TGljZW5zZTI=\"\n  },\n  \"forks\": 588,\n  \"open_issues\": 20,\n  \"watchers\": 1167,\n  \"default_branch\": \"master\",\n  \"permissions\": {\n    \"admin\": false,\n    \"push\": false,\n    \"pull\": true\n  },\n  \"network_count\": 588,\n  \"subscribers_count\": 96\n}\n', NULL, '2019-02-26 10:31:16', '2019-02-26 10:49:29');

-- --------------------------------------------------------

--
-- Table structure for table `source_codes`
--

CREATE TABLE `source_codes` (
  `id` int(10) UNSIGNED NOT NULL,
  `method_name` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL,
  `method_params` text COLLATE utf8mb4_unicode_ci,
  `method_body` longtext COLLATE utf8mb4_unicode_ci,
  `source_code_class_id` int(10) UNSIGNED NOT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `source_codes`
--

INSERT INTO `source_codes` (`id`, `method_name`, `method_params`, `method_body`, `source_code_class_id`, `deleted_at`, `created_at`, `updated_at`) VALUES
(1, 'fromReader', '', 'bypassHostnames.clear()\r\n        proxyHostnames.clear()\r\n        subnets.clear()\r\n        urls.clear()\r\n        bypass = defaultBypass\r\n        val bypassSubnets by lazy { SortedList(Subnet::class.java, SubnetSorter) }\r\n        val proxySubnets by lazy { SortedList(Subnet::class.java, SubnetSorter) }\r\n        var hostnames: SortedList<String>? = if (defaultBypass) proxyHostnames else bypassHostnames\r\n        var subnets: SortedList<Subnet>? = if (defaultBypass) proxySubnets else bypassSubnets\r\n        reader.useLines {\r\n            for (line in it) {\r\n                @Suppress(\"PLATFORM_CLASS_MAPPED_TO_KOTLIN\")\r\n                val blocks = (line as java.lang.String).split(\"#\", 2)\r\n                val url = networkAclParser.matchEntire(blocks.getOrElse(1) { \"\" })?.groupValues?.getOrNull(1)\r\n                if (url != null) urls.add(URL(url))\r\n                val input = blocks[0].trim()\r\n                when (input) {\r\n                    \"[outbound_block_list]\" -> {\r\n                        hostnames = null\r\n                        subnets = null\r\n                    }\r\n                    \"[black_list]\", \"[bypass_list]\" -> {\r\n                        hostnames = bypassHostnames\r\n                        subnets = bypassSubnets\r\n                    }\r\n                    \"[white_list]\", \"[proxy_list]\" -> {\r\n                        hostnames = proxyHostnames\r\n                        subnets = proxySubnets\r\n                    }\r\n                    \"[reject_all]\", \"[bypass_all]\" -> bypass = true\r\n                    \"[accept_all]\", \"[proxy_all]\" -> bypass = false\r\n                    else -> if (subnets != null && input.isNotEmpty()) {\r\n                        val subnet = Subnet.fromString(input)\r\n                        if (subnet == null) hostnames!!.add(input) else subnets!!.add(subnet)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for (item in (if (bypass) proxySubnets else bypassSubnets).asIterable()) this.subnets.add(item)\r\n        return this', 1, NULL, '2019-02-26 18:28:41', '2019-02-26 18:28:41'),
(3, 'MigrationTestHelper', 'Instrumentation instrumentation, String assetsFolder, SupportSQLiteOpenHelper.Factory openFactory', 'SupportSQLiteOpenHelper.Factory openFactory) {\r\n        mInstrumentation = instrumentation;\r\n        if (assetsFolder.endsWith(\"/\")) {\r\n            assetsFolder = assetsFolder.substring(0, assetsFolder.length() - 1);\r\n        }\r\n        mAssetsFolder = assetsFolder;\r\n        mOpenFactory = openFactory;', 2, NULL, '2019-02-26 18:49:32', '2019-02-26 18:52:29'),
(4, 'findAllUrls', 'data: CharSequence?, feature: Profile? = null', 'val uri = it.value.toUri()\r\n            try {\r\n                if (uri.userInfo == null) {\r\n                    val match = legacyPattern.matchEntire(String(Base64.decode(uri.host, Base64.NO_PADDING)))\r\n                    if (match != null) {\r\n                        val profile = Profile()\r\n                        feature?.copyFeatureSettingsTo(profile)\r\n                        profile.method = match.groupValues[1].toLowerCase()\r\n                        profile.password = match.groupValues[2]\r\n                        profile.host = match.groupValues[3]\r\n                        profile.remotePort = match.groupValues[4].toInt()\r\n                        profile.plugin = uri.getQueryParameter(Key.plugin)\r\n                        profile.name = uri.fragment\r\n                        profile\r\n                    } else {\r\n                        Log.e(TAG, \"Unrecognized URI: ${it.value}\")\r\n                        null\r\n                    }\r\n                } else {\r\n                    val match = userInfoPattern.matchEntire(String(Base64.decode(uri.userInfo,\r\n                            Base64.NO_PADDING or Base64.NO_WRAP or Base64.URL_SAFE)))\r\n                    if (match != null) {\r\n                        val profile = Profile()\r\n                        feature?.copyFeatureSettingsTo(profile)\r\n                        profile.method = match.groupValues[1]\r\n                        profile.password = match.groupValues[2]\r\n                        // bug in Android: https://code.google.com/p/android/issues/detail?id=192855\r\n                        try {\r\n                            val javaURI = URI(it.value)\r\n                            profile.host = javaURI.host ?: \"\"\r\n                            if (profile.host.firstOrNull() == \'[\' && profile.host.lastOrNull() == \']\')\r\n                                profile.host = profile.host.substring(1, profile.host.length - 1)\r\n                            profile.remotePort = javaURI.port\r\n                            profile.plugin = uri.getQueryParameter(Key.plugin)\r\n                            profile.name = uri.fragment ?: \"\"\r\n                            profile\r\n                        } catch (e: URISyntaxException) {\r\n                            Log.e(TAG, \"Invalid URI: ${it.value}\")\r\n                            null\r\n                        }\r\n                    } else {\r\n                        Log.e(TAG, \"Unknown user info: ${it.value}\")\r\n                        null\r\n                    }\r\n                }\r\n            } catch (e: IllegalArgumentException) {\r\n                Log.e(TAG, \"Invalid base64 detected: ${it.value}\")\r\n                null\r\n            }', 3, NULL, '2019-02-26 21:02:34', '2019-02-26 21:02:34'),
(5, 'fromString', 'value: String', '@Suppress(\"PLATFORM_CLASS_MAPPED_TO_KOTLIN\")\r\n            val parts = (value as java.lang.String).split(\"/\", 2)\r\n            val addr = parts[0].parseNumericAddress() ?: return null\r\n            return if (parts.size == 2) try {\r\n                val prefixSize = parts[1].toInt()\r\n                if (prefixSize < 0 || prefixSize > addr.address.size shl 3) null else Subnet(addr, prefixSize)\r\n            } catch (_: NumberFormatException) {\r\n                null\r\n            } else Subnet(addr, addr.address.size shl 3)', 4, NULL, '2019-02-26 21:10:00', '2019-02-26 21:10:00'),
(6, 'put', 'value: Boolean', 'valueType = TYPE_BOOLEAN\r\n        this.value = ByteBuffer.allocate(1).put((if (value) 1 else 0).toByte()).array()\r\n        return this', 6, NULL, '2019-02-26 21:21:23', '2019-02-26 21:21:23'),
(7, 'hashCode', NULL, 'Objects.hash(super.hashCode(), id)', 7, NULL, '2019-02-26 21:30:23', '2019-02-26 21:30:23'),
(8, 'PluginOptions', 'options: String?', 'this.id = id', 7, NULL, '2019-02-26 21:33:26', '2019-02-26 21:33:26'),
(9, 'mapAtInterval', 'source: LiveData<P>,             interval: Long,             map: (P?) -> R?', 'return delegate.mapAtInterval(source, interval, map)', 8, NULL, '2019-02-27 08:27:47', '2019-02-27 08:27:47'),
(10, 'wrapInQuotes', NULL, 'var formattedConfigString: String = this\r\n    if (!startsWith(\"\\\"\")) {\r\n        formattedConfigString = \"\\\"$formattedConfigString\"\r\n    }\r\n    if (!endsWith(\"\\\"\")) {\r\n        formattedConfigString = \"$formattedConfigString\\\"\"\r\n    }\r\n    return formattedConfigString', 9, NULL, '2019-02-27 08:55:35', '2019-02-27 08:55:35'),
(11, 'unwrapQuotes', NULL, 'var formattedConfigString: String = this\r\n    if (formattedConfigString.startsWith(\"\\\"\")) {\r\n        if (formattedConfigString.length > 1) {\r\n            formattedConfigString = formattedConfigString.substring(1)\r\n        } else {\r\n            formattedConfigString = \"\"\r\n        }\r\n    }\r\n    if (formattedConfigString.endsWith(\"\\\"\")) {\r\n        if (formattedConfigString.length > 1) {\r\n            formattedConfigString =\r\n                formattedConfigString.substring(0, formattedConfigString.length - 1)\r\n        } else {\r\n            formattedConfigString = \"\"\r\n        }\r\n    }\r\n    return formattedConfigString', 9, NULL, '2019-02-27 08:57:29', '2019-02-27 08:57:29'),
(12, 'convert', 'code: Int', 'return when (code) {\r\n            ErrorCodes.NO_NETWORK -> {\r\n                Timber.d(\"FirebaseAuth error: no_network\")\r\n                R.string.firebase_auth_no_network_connection\r\n            }\r\n            ErrorCodes.DEVELOPER_ERROR -> {\r\n                Timber.w(\"FirebaseAuth error: developer_error\")\r\n                R.string.firebase_auth_unknown_error\r\n            }\r\n            ErrorCodes.PLAY_SERVICES_UPDATE_CANCELLED -> {\r\n                Timber.d(\"FirebaseAuth error: play_services_update_cancelled\")\r\n                R.string.firebase_auth_unknown_error\r\n            }\r\n            ErrorCodes.PROVIDER_ERROR -> {\r\n                Timber.w(\"FirebaseAuth error: provider_error\")\r\n                R.string.firebase_auth_unknown_error\r\n            }\r\n            else -> {\r\n                Timber.w(\"FirebaseAuth error: unknown_error\")\r\n                R.string.firebase_auth_unknown_error\r\n            }\r\n        }', 10, NULL, '2019-02-27 08:59:58', '2019-02-27 08:59:58'),
(13, 'onRemoveClicked', NULL, '_dismissDialogAction.value = Event(true)\r\n\r\n        val immutableUserId = userId\r\n        val immutableSessionId = sessionId\r\n        // The user should be logged in at this point.\r\n        if (immutableUserId == null || immutableSessionId == null) {\r\n            Timber.e(\"Tried to remove a reservation with a null user or session ID\")\r\n            return\r\n        }\r\n        reservationActionUseCase.execute(\r\n            ReservationRequestParameters(immutableUserId, immutableSessionId, CancelAction())\r\n        )', 11, NULL, '2019-02-27 09:53:42', '2019-02-27 09:53:42'),
(14, 'onCancelClicked', NULL, '_dismissDialogAction.value = Event(true)', 11, NULL, '2019-02-27 09:54:34', '2019-02-27 09:54:34'),
(15, 'MapViewModel', 'loadMapTileProviderUseCase: LoadMapTileProviderUseCase,     private val loadGeoJsonFeaturesUseCase: LoadGeoJsonFeaturesUseCase,     private val analyticsHelper: AnalyticsHelper', '/**\r\n     * Area covered by the venue. Determines the viewport of the map.\r\n     */\r\n    val conferenceLocationBounds = LatLngBounds(\r\n        BuildConfig.MAP_VIEWPORT_BOUND_NW,\r\n        BuildConfig.MAP_VIEWPORT_BOUND_SE\r\n    )\r\n\r\n    /**\r\n     * True if any errors occur in fetching the data.\r\n     */\r\n    val errorMessageShown = MutableLiveData<Boolean>().apply { value = false }\r\n\r\n    private val tileProviderResult = MutableLiveData<Result<TileProvider>>()\r\n    val tileProvider: LiveData<TileProvider?>\r\n\r\n    private val _mapCenterEvent = MutableLiveData<Event<CameraUpdate>>()\r\n    val mapCenterEvent: LiveData<Event<CameraUpdate>>\r\n        get() = _mapCenterEvent\r\n\r\n    private val loadGeoJsonResult = MutableLiveData<Result<GeoJsonData>>()\r\n\r\n    private val _geoJsonLayer = MediatorLiveData<GeoJsonLayer>()\r\n    val geoJsonLayer: LiveData<GeoJsonLayer>\r\n        get() = _geoJsonLayer\r\n\r\n    private val featureLookup: MutableMap<String, GeoJsonFeature> = mutableMapOf()\r\n    private var hasLoadedFeatures = false\r\n    private var requestedFeatureId: String? = null\r\n\r\n    private val focusZoomLevel = BuildConfig.MAP_CAMERA_FOCUS_ZOOM\r\n\r\n    private val _bottomSheetStateEvent = MutableLiveData<Event<Int>>()\r\n    val bottomSheetStateEvent: LiveData<Event<Int>>\r\n        get() = _bottomSheetStateEvent\r\n    private val _selectedMarkerInfo = MutableLiveData<MarkerInfo>()\r\n    val selectedMarkerInfo: LiveData<MarkerInfo>\r\n        get() = _selectedMarkerInfo\r\n\r\n    init {\r\n        loadMapTileProviderUseCase(R.drawable.map_tile, tileProviderResult)\r\n        tileProvider = tileProviderResult.map { result ->\r\n            (result as? Success)?.data\r\n        }\r\n\r\n        _geoJsonLayer.addSource(loadGeoJsonResult, { result ->\r\n            if (result is Success) {\r\n                hasLoadedFeatures = true\r\n                setMapFeatures(result.data.featureMap)\r\n                _geoJsonLayer.value = result.data.geoJsonLayer\r\n            }\r\n        })\r\n\r\n        _bottomSheetStateEvent.value = Event(BottomSheetBehavior.STATE_HIDDEN)', 12, NULL, '2019-02-27 09:55:45', '2019-02-27 09:55:45'),
(16, 'observeNextMessage', NULL, 'return result', 13, NULL, '2019-02-27 10:08:50', '2019-02-27 10:10:47'),
(17, 'getStartedClick', NULL, 'onboardingCompleteActionUseCase(true)\r\n        _navigateToMainActivity.postValue(Event(Unit))', 14, NULL, '2019-02-27 10:17:08', '2019-02-27 10:17:08'),
(18, 'indexAgendaHeaders', 'agendaItems: List<Block>', 'return agendaItems\r\n        .mapIndexed { index, block -> index to block.startTime }\r\n        .distinctBy { it.second.dayOfMonth }', 15, NULL, '2019-02-27 10:20:36', '2019-02-27 10:20:36'),
(19, 'indexSessionHeaders', 'sessions: List<Session>, zoneId: ZoneId', 'return sessions\r\n        .mapIndexed { index, session ->\r\n            index to TimeUtils.zonedTime(session.startTime, zoneId)\r\n        }\r\n        .distinctBy { it.second.hour to it.second.minute }', 16, NULL, '2019-02-27 10:23:00', '2019-02-27 10:23:00'),
(20, 'interleaveSort', 'tags: List<Tag>', '// tags should all be the same category\r\n        val sorted = tags.sortedBy { it.orderInCategory }\r\n        val split = when {\r\n            sorted.size.isEven() -> sorted.size / 2\r\n            else -> sorted.size / 2 + 1\r\n        }\r\n        val newList = ArrayList<Tag>(sorted.size)\r\n        for (i in 0 until split) {\r\n            newList.add(sorted[i])\r\n            if (i + split < sorted.size) {\r\n                newList.add(sorted[i + split])\r\n            }\r\n        }\r\n        return newList', 17, NULL, '2019-02-27 10:26:44', '2019-02-27 10:26:44'),
(21, 'execute', 'parameters: UserSessionMatcher', 'val tags = tagRepository.getTags()\r\n        parameters.removeOrphanedTags(tags)\r\n\r\n        val filters = tags.filter { it.category in UserSessionMatcher.FILTER_CATEGORIES }\r\n            // Only tags in these categories appear in the filters list\r\n            // Map category -> List<TagFilter>\r\n            .groupBy { it.category }\r\n            // Sort entries in desired order\r\n            .toSortedMap(compareBy { key -> UserSessionMatcher.FILTER_CATEGORIES.indexOf(key) })\r\n            // Interleave items in each category. This makes them appear ordered vertically when\r\n            // displayed in the 2-column grid.\r\n            .mapValues { entry -> interleaveSort(entry.value) }\r\n            // Flatten to a single list\r\n            .flatMap { entry -> entry.value }\r\n            // Convert to TagFilters, checking ones that are currently selected\r\n            .map { TagFilter(it, it in parameters) }\r\n            .toMutableList<EventFilter>()\r\n        filters.add(0, MyEventsFilter(parameters.getShowPinnedEventsOnly()))\r\n        return filters', 17, NULL, '2019-02-27 10:30:42', '2019-02-27 10:30:42'),
(22, 'getSessionTimeDataForDay', 'day: Int', '0 -> sessionTimeDataDay1\r\n        1 -> sessionTimeDataDay2\r\n        2 -> sessionTimeDataDay3\r\n        else -> {\r\n            val exception = Exception(\"Invalid day: $day\")\r\n            Timber.e(exception)\r\n            throw exception\r\n        }', 18, NULL, '2019-02-27 11:02:23', '2019-02-27 11:04:48'),
(23, 'navigateToSignOutDialogAction', NULL, NULL, 18, NULL, '2019-02-27 11:06:15', '2019-02-27 11:06:15'),
(24, 'navigateToSignInDialogAction', NULL, NULL, 18, NULL, '2019-02-27 11:07:02', '2019-02-27 11:07:02'),
(25, 'profileContentDesc', NULL, NULL, 18, NULL, '2019-02-27 11:07:50', '2019-02-27 11:07:50'),
(26, 'profileContentDesc', NULL, NULL, 18, NULL, '2019-02-27 11:08:29', '2019-02-27 11:08:29'),
(27, 'errorMessage', NULL, NULL, 18, NULL, '2019-02-27 11:09:42', '2019-02-27 11:09:42'),
(28, 'onStarClicked', 'userSession: UserSession', 'if (!isSignedIn()) {\r\n            Timber.d(\"Showing Sign-in dialog after star click\")\r\n            _navigateToSignInDialogAction.value = Event(Unit)\r\n            return\r\n        }\r\n        val newIsStarredState = !userSession.userEvent.isStarred\r\n\r\n        // Update the snackbar message optimistically.\r\n        val stringResId = if (newIsStarredState) {\r\n            R.string.event_starred\r\n        } else {\r\n            R.string.event_unstarred\r\n        }\r\n\r\n        if (newIsStarredState) {\r\n            analyticsHelper.logUiEvent(userSession.session.title, AnalyticsActions.STARRED)\r\n        }\r\n\r\n        snackbarMessageManager.addMessage(\r\n            SnackbarMessage(\r\n                messageId = stringResId,\r\n                actionId = R.string.dont_show,\r\n                requestChangeId = UUID.randomUUID().toString()\r\n            )\r\n        )\r\n\r\n        getUserId()?.let {\r\n            starEventUseCase.execute(\r\n                StarEventParameter(\r\n                    it,\r\n                    userSession.userEvent.copy(isStarred = newIsStarredState)\r\n                )\r\n            )\r\n        }', 18, NULL, '2019-02-27 11:15:20', '2019-02-27 11:15:20'),
(29, 'showReservations', NULL, NULL, 18, NULL, '2019-02-27 11:27:07', '2019-02-27 11:27:07'),
(30, 'scheduleUiHintsShown', NULL, NULL, 18, NULL, '2019-02-27 11:28:37', '2019-02-27 11:28:37'),
(31, 'swipeRefreshing', NULL, NULL, 18, NULL, '2019-02-27 11:29:21', '2019-02-27 11:29:21'),
(32, 'session', NULL, NULL, 19, NULL, '2019-02-27 11:33:22', '2019-02-27 11:35:06'),
(33, 'navigateToYouTubeAction', NULL, NULL, 19, NULL, '2019-02-27 11:36:39', '2019-02-27 11:36:39'),
(34, 'onReservationClicked', NULL, 'if (!networkUtils.hasNetworkConnection()) {\r\n            Timber.d(\"No network connection, ignoring reserve click.\")\r\n            _snackBarMessage.postValue(\r\n                Event(\r\n                    SnackbarMessage(\r\n                        messageId = R.string.no_network_connection,\r\n                        requestChangeId = UUID.randomUUID().toString()\r\n                    )\r\n                )\r\n            )\r\n            return\r\n        }\r\n        if (!isSignedIn()) {\r\n            Timber.d(\"Showing Sign-in dialog after reserve click\")\r\n            _navigateToSignInDialogAction.value = Event(Unit)\r\n            return\r\n        }\r\n\r\n        val userEventSnapshot = userEvent.value ?: return\r\n        val sessionSnapshot = session.value ?: return\r\n        val isReservationDisabledSnapshot = isReservationDisabled.value ?: return\r\n\r\n        val userId = getUserId() ?: return\r\n\r\n        if (userEventSnapshot.isReserved() ||\r\n            userEventSnapshot.isWaitlisted() ||\r\n            userEventSnapshot.isReservationPending() ||\r\n            userEventSnapshot.isCancelPending() // Just in case\r\n        ) {\r\n            if (isReservationDisabledSnapshot) {\r\n                _snackBarMessage.postValue(\r\n                    Event(\r\n                        SnackbarMessage(R.string.cancellation_denied_cutoff, longDuration = true)\r\n                    )\r\n                )\r\n                analyticsHelper.logUiEvent(\r\n                    sessionSnapshot.title, AnalyticsActions.RES_CANCEL_FAILED\r\n                )\r\n            } else {\r\n                // Open the dialog to confirm if the user really wants to remove their reservation\r\n                _navigateToRemoveReservationDialogAction.value = Event(\r\n                    RemoveReservationDialogParameters(\r\n                        userId,\r\n                        sessionSnapshot.id,\r\n                        sessionSnapshot.title\r\n                    )\r\n                )\r\n                analyticsHelper.logUiEvent(sessionSnapshot.title, AnalyticsActions.RES_CANCEL)\r\n            }\r\n            return\r\n        }\r\n        if (isReservationDisabledSnapshot) {\r\n            _snackBarMessage.postValue(\r\n                Event(\r\n                    SnackbarMessage(R.string.reservation_denied_cutoff, longDuration = true)\r\n                )\r\n            )\r\n            analyticsHelper.logUiEvent(sessionSnapshot.title, AnalyticsActions.RESERVE_FAILED)\r\n        } else {\r\n            reservationActionUseCase.execute(\r\n                ReservationRequestParameters(userId, sessionSnapshot.id, RequestAction())\r\n            )\r\n            analyticsHelper.logUiEvent(sessionSnapshot.title, AnalyticsActions.RESERVE)\r\n        }', 19, NULL, '2019-02-27 12:04:03', '2019-02-27 12:04:03'),
(35, 'timeUntilStart', NULL, NULL, 19, NULL, '2019-02-27 12:10:16', '2019-02-27 12:10:16'),
(36, 'onPlayVideo', NULL, 'val currentSession = session.value\r\n        if (currentSession?.hasVideo() == true) {\r\n            navigateToYouTubeAction.value = Event(requireSession().youTubeUrl)\r\n        }', 19, NULL, '2019-02-27 12:11:47', '2019-02-27 12:11:47'),
(37, 'currentFirebaseUser', NULL, NULL, 20, NULL, '2019-02-27 12:14:22', '2019-02-27 12:14:22'),
(38, 'currentUserImageUri', NULL, NULL, 20, NULL, '2019-02-27 12:14:32', '2019-02-27 12:14:32'),
(39, 'isSignedIn', NULL, 'return (currentFirebaseUser.value as? Result.Success)?.data?.isSignedIn() == true', 20, NULL, '2019-02-27 12:14:46', '2019-02-27 12:14:46'),
(40, 'isRegistered', NULL, 'return (currentFirebaseUser.value as? Result.Success)?.data?.isRegistered() == true', 20, NULL, '2019-02-27 12:15:46', '2019-02-27 12:15:46'),
(41, 'emitSignInRequest', NULL, '// Refresh the notificationsPrefIsShown because it\'s used to indicate if the\r\n        // notifications preference dialog should be shown\r\n        notificationsPrefIsShownUseCase(Unit, notificationsPrefIsShown)\r\n\r\n        performSignInEvent.postValue(Event(SignInEvent.RequestSignIn))', 20, NULL, '2019-02-27 12:18:32', '2019-02-27 12:20:27'),
(42, 'performSignInEvent', NULL, NULL, 20, NULL, '2019-02-27 12:22:24', '2019-02-27 12:22:24'),
(43, 'onSignOut', NULL, 'Timber.d(\"Sign out requested\")\r\n        emitSignOutRequest()\r\n        _dismissDialogAction.value = Event(Unit)', 21, NULL, '2019-02-27 12:30:05', '2019-02-27 12:30:05'),
(44, 'onSignIn', NULL, 'Timber.d(\"Sign in requested\")\r\n        emitSignInRequest()\r\n        _dismissDialogAction.value = Event(Unit)', 21, NULL, '2019-02-27 12:31:51', '2019-02-27 12:31:51'),
(45, 'onCancel', NULL, '_dismissDialogAction.value = Event(Unit)', 21, NULL, '2019-02-27 12:32:42', '2019-02-27 12:32:42'),
(46, 'speaker', NULL, NULL, 22, NULL, '2019-02-27 12:37:51', '2019-02-27 12:37:51'),
(47, 'speakerUserSessions', NULL, NULL, 22, NULL, '2019-02-27 12:38:53', '2019-02-27 12:38:53'),
(48, 'launchDestination', NULL, NULL, 23, NULL, '2019-02-27 12:40:12', '2019-02-27 12:40:12'),
(49, 'serialize', 'Object object, Class clazz', 'return gson.toJson(object, clazz);', 24, NULL, '2019-02-27 14:08:57', '2019-02-27 14:08:57'),
(50, 'deserialize', 'String string, Class<T> clazz', 'return gson.fromJson(string, clazz);', 24, NULL, '2019-02-27 14:10:17', '2019-02-27 14:10:17'),
(51, 'writeToFile', 'File file, String fileContent', 'if (!file.exists()) {\r\n      try {\r\n        final FileWriter writer = new FileWriter(file);\r\n        writer.write(fileContent);\r\n        writer.close();\r\n      } catch (IOException e) {\r\n        e.printStackTrace();\r\n      }\r\n    }', 25, NULL, '2019-02-27 14:11:56', '2019-02-27 14:11:56'),
(52, 'readFileContent', 'File file', 'final StringBuilder fileContentBuilder = new StringBuilder();\r\n    if (file.exists()) {\r\n      String stringLine;\r\n      try {\r\n        final FileReader fileReader = new FileReader(file);\r\n        final BufferedReader bufferedReader = new BufferedReader(fileReader);\r\n        while ((stringLine = bufferedReader.readLine()) != null) {\r\n          fileContentBuilder.append(stringLine).append(\"\\n\");\r\n        }\r\n        bufferedReader.close();\r\n        fileReader.close();\r\n      } catch (IOException e) {\r\n        e.printStackTrace();\r\n      }\r\n    }\r\n    return fileContentBuilder.toString();', 25, NULL, '2019-02-27 14:12:53', '2019-02-27 14:12:53'),
(53, 'transform', 'UserEntity userEntity', 'User user = null;\r\n    if (userEntity != null) {\r\n      user = new User(userEntity.getUserId());\r\n      user.setCoverUrl(userEntity.getCoverUrl());\r\n      user.setFullName(userEntity.getFullname());\r\n      user.setDescription(userEntity.getDescription());\r\n      user.setFollowers(userEntity.getFollowers());\r\n      user.setEmail(userEntity.getEmail());\r\n    }\r\n    return user;', 26, NULL, '2019-02-27 14:16:47', '2019-02-27 14:16:47'),
(54, 'getErrorMessage', NULL, 'String message = \"\";\r\n    if (this.exception != null) {\r\n      message = this.exception.getMessage();\r\n    }\r\n    return message;', 27, NULL, '2019-02-27 14:24:15', '2019-02-27 14:24:15'),
(55, 'userEntityList', NULL, 'return this.restApi.userEntityList();', 28, NULL, '2019-02-27 14:26:55', '2019-02-27 14:26:55'),
(56, 'userEntityDetails', 'final int userId', 'return this.restApi.userEntityById(userId).doOnNext(CloudUserDataStore.this.userCache::put);', 28, NULL, '2019-02-27 14:28:05', '2019-02-27 14:28:05'),
(57, 'userEntityList', NULL, 'throw new UnsupportedOperationException(\"Operation is not available!!!\");', 29, NULL, '2019-02-27 14:32:47', '2019-02-27 14:32:47'),
(58, 'create', 'int userId', 'UserDataStore userDataStore;\r\n\r\n    if (!this.userCache.isExpired() && this.userCache.isCached(userId)) {\r\n      userDataStore = new DiskUserDataStore(this.userCache);\r\n    } else {\r\n      userDataStore = createCloudDataStore();\r\n    }\r\n\r\n    return userDataStore;', 30, NULL, '2019-02-27 14:35:48', '2019-02-27 14:35:48'),
(59, 'users', NULL, '//we always get all users from the cloud\r\n    final UserDataStore userDataStore = this.userDataStoreFactory.createCloudDataStore();\r\n    return userDataStore.userEntityList().map(this.userEntityDataMapper::transform);', 31, NULL, '2019-02-27 14:45:08', '2019-02-27 14:45:08'),
(60, 'user', 'int userId', 'final UserDataStore userDataStore = this.userDataStoreFactory.create(userId);\r\n    return userDataStore.userEntityDetails(userId).map(this.userEntityDataMapper::transform);', 31, NULL, '2019-02-27 14:45:25', '2019-02-27 14:45:25'),
(61, 'getErrorMessage', NULL, 'return (exception != null) ? this.exception.getMessage() : DEFAULT_ERROR_MSG;', 32, NULL, '2019-02-28 03:21:10', '2019-02-28 03:21:10'),
(62, 'buildUseCaseObservable', 'Params params', 'Preconditions.checkNotNull(params);\r\n    return this.userRepository.user(params.userId);', 33, NULL, '2019-02-28 03:24:00', '2019-02-28 03:24:00'),
(63, 'buildUseCaseObservable', 'Void unused', 'return this.userRepository.users();', 34, NULL, '2019-02-28 03:26:01', '2019-02-28 03:26:01'),
(64, 'execute', 'DisposableObserver<Object> observer, Params params', 'Preconditions.checkNotNull(observer);\r\n    final Observable<T> observable = this.buildUseCaseObservable(params)\r\n        .subscribeOn(Schedulers.from(threadExecutor))\r\n        .observeOn(postExecutionThread.getScheduler());\r\n    addDisposable(observable.subscribeWith(observer));', 35, NULL, '2019-02-28 03:28:14', '2019-02-28 03:28:14'),
(65, 'dispose', NULL, 'if (!disposables.isDisposed()) {\r\n      disposables.dispose();\r\n    }', 35, NULL, '2019-02-28 03:32:12', '2019-02-28 03:32:27'),
(66, 'getUserId', NULL, 'return userId;', 36, NULL, '2019-02-28 03:34:55', '2019-02-28 03:34:55'),
(67, 'create', 'Context context, Exception exception', 'String message = context.getString(R.string.exception_message_generic);\r\n\r\n    if (exception instanceof NetworkConnectionException) {\r\n      message = context.getString(R.string.exception_message_no_connection);\r\n    } else if (exception instanceof UserNotFoundException) {\r\n      message = context.getString(R.string.exception_message_user_not_found);\r\n    }\r\n\r\n    return message;', 37, NULL, '2019-02-28 03:38:26', '2019-02-28 03:38:26'),
(68, 'transform', 'User user', 'if (user == null) {\r\n      throw new IllegalArgumentException(\"Cannot transform a null value\");\r\n    }\r\n    final UserModel userModel = new UserModel(user.getUserId());\r\n    userModel.setCoverUrl(user.getCoverUrl());\r\n    userModel.setFullName(user.getFullName());\r\n    userModel.setEmail(user.getEmail());\r\n    userModel.setDescription(user.getDescription());\r\n    userModel.setFollowers(user.getFollowers());\r\n\r\n    return userModel;', 38, NULL, '2019-02-28 03:41:39', '2019-02-28 03:41:39'),
(69, 'initialize', 'int userId', 'this.hideViewRetry();\r\n    this.showViewLoading();\r\n    this.getUserDetails(userId);', 39, NULL, '2019-02-28 03:44:29', '2019-02-28 03:44:29'),
(70, 'initialize', NULL, 'this.loadUserList();', 40, NULL, '2019-02-28 03:46:03', '2019-02-28 03:46:03'),
(71, 'onLibraryClick', 'library: Library', '_navigationTarget.value = Event(library.link)', 41, NULL, '2019-02-28 04:02:55', '2019-02-28 04:02:55'),
(72, 'getKeys', NULL, 'Set<String>? = getMutableKeys()', 42, NULL, '2019-02-28 04:07:17', '2019-02-28 04:07:17'),
(73, 'getSourceActiveState', 'source: String', 'return prefs.getBoolean(source, false)', 42, NULL, '2019-02-28 04:08:06', '2019-02-28 04:08:06'),
(75, 'setLoggedInUser', 'loggedInUser: LoggedInUser', 'deleteLoggedInUser()\r\n        insertLoggedInUser(loggedInUser)', 43, NULL, '2019-02-28 04:18:41', '2019-02-28 04:19:59'),
(76, 'deleteLoggedInUser', NULL, '@Query(\"DELETE FROM logged_in_user\")', 43, NULL, '2019-02-28 04:21:10', '2019-02-28 04:21:10'),
(77, 'authToken', NULL, NULL, 44, NULL, '2019-02-28 04:23:06', '2019-02-28 04:23:06'),
(78, 'clearData', NULL, 'prefs.edit { KEY_ACCESS_TOKEN to null }\r\n        authToken = null', 44, NULL, '2019-02-28 04:23:18', '2019-02-28 04:23:18'),
(79, 'user', NULL, NULL, 46, NULL, '2019-02-28 04:24:59', '2019-02-28 04:24:59'),
(80, 'logout', NULL, 'prefs.edit {\r\n            putLong(KEY_USER_ID, 0L)\r\n            putString(KEY_USER_NAME, null)\r\n            putString(KEY_USER_AVATAR, null)\r\n        }', 46, NULL, '2019-02-28 04:25:11', '2019-02-28 04:25:11'),
(81, 'doBeforeTextChanged', 'action: (         text: CharSequence?,         start: Int,         count: Int,         after: Int     ) -> Unit', 'addTextChangedListener(beforeTextChanged = action)', 47, NULL, '2019-02-28 04:29:29', '2019-02-28 04:29:29'),
(82, 'doOnTextChanged', 'action: (         text: CharSequence?,         start: Int,         count: Int,         after: Int     ) -> Unit', 'addTextChangedListener(onTextChanged = action)', 47, NULL, '2019-02-28 04:29:42', '2019-02-28 04:29:42'),
(83, 'doAfterTextChanged', 'action: (text: Editable?) -> Unit', 'addTextChangedListener(afterTextChanged = action)', 47, NULL, '2019-02-28 04:29:57', '2019-02-28 04:29:57'),
(84, 'getSources', NULL, 'if (cache.isNotEmpty()) {\r\n            return cache\r\n        }\r\n        // cache is empty\r\n        val sourceKeys = dataSource.getKeys()\r\n        if (sourceKeys == null) {\r\n            addSources(defaultSources)\r\n            return defaultSources\r\n        }\r\n\r\n        val sources = mutableListOf<Source>()\r\n        sourceKeys.forEach { sourceKey ->\r\n            val activeState = dataSource.getSourceActiveState(sourceKey)\r\n            when {\r\n                // add Dribbble source\r\n                sourceKey.startsWith(Source.DribbbleSearchSource.DRIBBBLE_QUERY_PREFIX) -> {\r\n                    val query = sourceKey.replace(Source.DribbbleSearchSource.DRIBBBLE_QUERY_PREFIX, \"\")\r\n                    sources.add(Source.DribbbleSearchSource(query, activeState))\r\n                }\r\n                // add Designer News source\r\n                sourceKey.startsWith(Source.DesignerNewsSearchSource.DESIGNER_NEWS_QUERY_PREFIX) -> {\r\n                    val query = sourceKey.replace(Source.DesignerNewsSearchSource\r\n                            .DESIGNER_NEWS_QUERY_PREFIX, \"\")\r\n                    sources.add(Source.DesignerNewsSearchSource(query, activeState))\r\n                }\r\n                // remove deprecated sources\r\n                isDeprecatedDesignerNewsSource(sourceKey) -> dataSource.removeSource(sourceKey)\r\n                isDeprecatedDribbbleV1Source(sourceKey) -> dataSource.removeSource(sourceKey)\r\n                else -> getSourceFromDefaults(sourceKey, activeState)?.let { sources.add(it) }\r\n            }\r\n        }\r\n        Collections.sort(sources, Source.SourceComparator())\r\n        cache.addAll(sources)\r\n        return cache', 48, NULL, '2019-02-28 07:19:47', '2019-02-28 07:19:47'),
(85, 'addSource', 'source: Source', 'dataSource.addSource(source.key, source.active)\r\n        cache.add(source)\r\n        dispatchSourceChanged(source)', 48, NULL, '2019-02-28 07:21:55', '2019-02-28 07:21:55'),
(86, 'updateSource', 'source: Source', 'dataSource.updateSource(source.key, source.active)\r\n        cache.find { it.key == source.key }?.apply { active = source.active }\r\n        dispatchSourceChanged(source)', 48, NULL, '2019-02-28 07:22:09', '2019-02-28 07:22:09'),
(87, 'removeSource', 'source: Source', 'dataSource.removeSource(source.key)\r\n        cache.remove(source)\r\n        dispatchSourceRemoved(source)', 48, NULL, '2019-02-28 07:23:25', '2019-02-28 07:23:25'),
(88, 'registerFilterChangedCallback', 'callback: FiltersChangedCallback', 'callbacks.add(callback)', 48, NULL, '2019-02-28 07:39:21', '2019-02-28 07:39:21'),
(89, 'getActiveSourcesCount', NULL, 'return getSources().count { it.active }', 48, NULL, '2019-02-28 07:40:58', '2019-02-28 07:40:58'),
(90, 'csvToLongArray', 'csvString: String', 'return if (csvString.isEmpty()) {\r\n            emptyList()\r\n        } else {\r\n            csvString.split(CSV_DELIMITER).map { it.toLong() }\r\n        }', 49, NULL, '2019-02-28 07:42:36', '2019-02-28 07:42:36'),
(91, 'longListToCsv', 'longList: List<Long>', 'return longList.joinToString(CSV_DELIMITER)', 49, NULL, '2019-02-28 07:42:53', '2019-02-28 07:42:53'),
(92, 'convert', 'body: ResponseBody', 'val searchResults = Jsoup.parse(body.string(), DesignerNewsSearchService.ENDPOINT)\r\n            .select(\"li.search-page-result > a\")\r\n        return searchResults.mapNotNull { parseSearchResult(it) }', 50, NULL, '2019-02-28 07:45:32', '2019-02-28 07:45:32'),
(93, 'getComments', 'ids: List<Long>', 'call = { requestGetComments(ids) },\r\n        errorMessage = \"Error getting comments\"', 51, NULL, '2019-02-28 07:54:01', '2019-02-28 07:54:01'),
(94, 'comment', 'commentBody: String,         parentCommentId: Long?,         storyId: Long?,         userId: Long', 'check(\r\n            parentCommentId != null || storyId != null\r\n        ) { \"Unable to post comment. Either parent comment or the story need to be present\" }\r\n\r\n        return safeApiCall(\r\n            call = { postComment(commentBody, parentCommentId, storyId, userId) },\r\n            errorMessage = \"Unable to post comment\"\r\n        )', 51, NULL, '2019-02-28 07:56:34', '2019-02-28 07:56:34'),
(95, 'getComments', 'ids: List<Long>', 'return remoteDataSource.getComments(ids)', 52, NULL, '2019-02-28 07:59:36', '2019-02-28 07:59:36'),
(96, 'postStoryComment', 'body: String,         storyId: Long,         userId: Long', 'return remoteDataSource.comment(\r\n            commentBody = body,\r\n            parentCommentId = null,\r\n            storyId = storyId,\r\n            userId = userId\r\n        )', 52, NULL, '2019-02-28 08:00:33', '2019-02-28 08:00:33'),
(97, 'login', 'username: String, password: String', 'call = { requestLogin(username, password) },\r\n        errorMessage = \"Error logging in\"', 53, NULL, '2019-02-28 08:03:22', '2019-02-28 08:03:22'),
(98, 'logout', NULL, 'tokenLocalDataSource.authToken = null', 53, NULL, '2019-02-28 08:03:53', '2019-02-28 08:03:53'),
(99, 'isLoggedIn', NULL, NULL, 54, NULL, '2019-02-28 08:06:02', '2019-02-28 08:06:02'),
(100, 'user', NULL, NULL, 54, NULL, '2019-02-28 08:06:23', '2019-02-28 08:06:23'),
(101, 'login', 'username: String, password: String', 'val result = remoteDataSource.login(username, password)\r\n\r\n        if (result is Result.Success) {\r\n            setLoggedInUser(result.data)\r\n        }\r\n        return result', 54, NULL, '2019-02-28 08:08:48', '2019-02-28 08:09:06'),
(102, 'logout', NULL, 'user = null\r\n\r\n        localDataSource.logout()\r\n        remoteDataSource.logout()', 54, NULL, '2019-02-28 08:11:21', '2019-02-28 08:11:21'),
(103, 'toStory', NULL, 'id = id,\r\n    title = title,\r\n    url = url,\r\n    comment = comment,\r\n    commentHtml = comment_html,\r\n    commentCount = comment_count,\r\n    voteCount = vote_count,\r\n    userId = links.user,\r\n    createdAt = created_at,\r\n    links = links', 55, NULL, '2019-02-28 08:13:53', '2019-02-28 08:13:53'),
(104, 'loadStories', 'page: Int', 'return try {\r\n            val response = service.getStories(page).await()\r\n            getResult(response = response, onError = {\r\n                Result.Error(\r\n                    IOException(\"Error getting stories ${response.code()} ${response.message()}\")\r\n                )\r\n            })\r\n        } catch (e: Exception) {\r\n            Result.Error(IOException(\"Error getting stories\", e))\r\n        }', 56, NULL, '2019-02-28 08:15:20', '2019-02-28 08:15:20'),
(105, 'search', 'query: String, page: Int', 'val queryWithoutPrefix = query.replace(Source.DesignerNewsSearchSource.DESIGNER_NEWS_QUERY_PREFIX, \"\")\r\n        return try {\r\n            val searchResults = service.search(queryWithoutPrefix, page).await()\r\n            val ids = searchResults.body()\r\n            if (searchResults.isSuccessful && !ids.isNullOrEmpty()) {\r\n                val commaSeparatedIds = ids.joinToString(\",\")\r\n                loadStories(commaSeparatedIds)\r\n            } else {\r\n                Result.Error(IOException(\"Error searching $queryWithoutPrefix\"))\r\n            }\r\n        } catch (e: Exception) {\r\n            Result.Error(IOException(\"Error searching $queryWithoutPrefix\", e))\r\n        }', 56, NULL, '2019-02-28 08:16:46', '2019-02-28 08:16:46'),
(106, 'loadStories', 'page: Int', 'getData { remoteDataSource.loadStories(page) }', 57, NULL, '2019-02-28 08:19:00', '2019-02-28 08:19:00'),
(107, 'search', 'query: String, page: Int', 'getData { remoteDataSource.search(query, page) }', 57, NULL, '2019-02-28 08:20:50', '2019-02-28 08:20:50'),
(108, 'getStory', 'id: Long', 'val story = cache[id]\r\n        return if (story != null) {\r\n            Result.Success(story)\r\n        } else {\r\n            Result.Error(IllegalStateException(\"Story $id not cached\"))\r\n        }', 57, NULL, '2019-02-28 08:22:33', '2019-02-28 08:22:33'),
(110, 'weigh', 'shots: List<Shot>', '// We add 1 to the max so that weights don\'t \'overflow\' into the next page range\r\n        val maxLikes = (shots.maxBy { it.likesCount }?.likesCount?.toFloat() ?: 0f) + 1f\r\n        shots.forEach { shot ->\r\n            val weight = 1f - (shot.likesCount.toFloat() / maxLikes)\r\n            shot.weight = shot.page + weight\r\n        }', 59, NULL, '2019-02-28 08:46:12', '2019-02-28 08:46:12'),
(111, 'convert', 'value: ResponseBody', 'val shotElements = Jsoup.parse(value.string(), HOST).select(\"li[id^=screenshot]\")\r\n        return shotElements.map { parseShot(it) }', 60, NULL, '2019-02-28 08:48:33', '2019-02-28 08:48:33'),
(112, 'search', 'query: String,         page: Int,         sortOrder: SortOrder = RECENT,         pageSize: Int = PER_PAGE_DEFAULT', 'safeApiCall(\r\n        call = { requestSearch(query, page, sortOrder, pageSize) },\r\n        errorMessage = \"Error getting Dribbble data\"\r\n    )', 61, NULL, '2019-02-28 08:55:39', '2019-02-28 08:55:39'),
(113, 'search', 'query: String,         page: Int,         onResult: (Result<List<Shot>>) -> Unit', 'val id = \"$query::$page\"\r\n        inflight[id] = launchSearch(query, page, id, onResult)', 62, NULL, '2019-02-28 08:58:35', '2019-02-28 08:58:35'),
(114, 'loadData', 'page: Int', 'call = { requestData(page) },\r\n            errorMessage = \"Error loading ProductHunt data\"', 63, NULL, '2019-02-28 09:00:52', '2019-02-28 09:00:52'),
(115, 'getUsers', 'userids: String', NULL, 64, NULL, '2019-02-28 10:09:51', '2019-02-28 10:09:51'),
(116, 'getUsers', 'userIds: List<Long>', 'safeApiCall(\r\n        call = { requestGetUsers(userIds) },\r\n        errorMessage = \"Error getting user\"\r\n    )', 65, NULL, '2019-02-28 10:13:01', '2019-02-28 10:13:01'),
(117, 'upvoteStory', 'storyId: Long, userId: Long', 'safeApiCall(\r\n        call = { requestUpvoteStory(storyId, userId) },\r\n        errorMessage = \"Unable to upvote story\"\r\n    )', 66, NULL, '2019-02-28 10:15:56', '2019-02-28 10:15:56'),
(118, 'upvoteComment', 'commentId: Long, userId: Long', 'safeApiCall(\r\n        call = { requestUpvoteComment(commentId, userId) },\r\n        errorMessage = \"Unable to upvote comment\"\r\n    )', 66, NULL, '2019-02-28 10:16:13', '2019-02-28 10:16:13'),
(119, 'upvoteStory', 'storyId: Long, userId: Long', 'return remoteDataSource.upvoteStory(storyId, userId)', 67, NULL, '2019-02-28 10:19:04', '2019-02-28 10:19:04'),
(120, 'upvoteComment', 'commentId: Long, userId: Long', 'return remoteDataSource.upvoteComment(commentId, userId)', 67, NULL, '2019-02-28 10:19:18', '2019-02-28 10:19:18'),
(121, 'getComments', 'commentIds: String', NULL, 68, NULL, '2019-02-28 10:27:24', '2019-02-28 10:27:24'),
(122, 'getComments', 'ids: List<Long>', 'return remoteDataSource.getComments(ids)', 69, NULL, '2019-02-28 10:31:39', '2019-02-28 10:31:39'),
(123, 'GetStoryUseCase', 'private val storiesRepository: StoriesRepository', NULL, 70, NULL, '2019-02-28 10:37:03', '2019-02-28 10:37:03'),
(124, 'PostReplyUseCase', 'private val commentsRepository: CommentsRepository,     private val loginRepository: LoginRepository', NULL, 71, NULL, '2019-02-28 10:38:29', '2019-02-28 10:38:29'),
(125, 'PostStoryCommentUseCase', 'private val commentsRepository: CommentsRepository,     private val loginRepository: LoginRepository', NULL, 72, NULL, '2019-02-28 10:40:22', '2019-02-28 10:40:22'),
(126, 'UpvoteCommentUseCase', 'private val loginRepository: LoginRepository,     private val votesRepository: VotesRepository', NULL, 73, NULL, '2019-02-28 10:43:47', '2019-02-28 10:43:47'),
(127, 'UpvoteStoryUseCase', 'private val loginRepository: LoginRepository,     private val votesRepository: VotesRepository', NULL, 74, NULL, '2019-02-28 10:45:58', '2019-02-28 10:45:58'),
(128, 'login', 'username: String, password: String', 'val result = remoteDataSource.login(username, password)\r\n\r\n        if (result is Result.Success) {\r\n            setLoggedInUser(result.data)\r\n        }\r\n        return result', 75, NULL, '2019-02-28 10:48:41', '2019-02-28 10:48:41'),
(129, 'signup', NULL, '_openUrl.value = Event(signupUrl)', 75, NULL, '2019-02-28 10:48:57', '2019-02-28 10:48:57'),
(130, 'uiState', NULL, NULL, 75, NULL, '2019-02-28 10:50:49', '2019-02-28 10:50:49'),
(131, 'loginDataChanged', 'username: String, password: String', 'enableLogin(isLoginValid(username, password))', 75, NULL, '2019-02-28 10:52:02', '2019-02-28 10:52:02'),
(132, 'StoryViewModel', 'storyId: Long,     getStoryUseCase: GetStoryUseCase,     private var postStoryComment: PostStoryCommentUseCase,     private var postReply: PostReplyUseCase,     private val getCommentsWithRepliesAndUsers: GetCommentsWithRepliesAndUsersUseCase,     private val upvoteStory: UpvoteStoryUseCase,     private val upvoteComment: UpvoteCommentUseCase,     private val dispatcherProvider: CoroutinesDispatcherProvider', NULL, 76, NULL, '2019-02-28 10:55:08', '2019-02-28 10:55:08'),
(133, 'storyUpvoteRequested', 'storyId: Long, onResult: (result: Result<Unit>', 'viewModelScope.launch(dispatcherProvider.computation) {\r\n                val result = upvoteStory(storyId)\r\n                withContext(dispatcherProvider.main) { onResult(result) }\r\n            }', 76, NULL, '2019-02-28 10:58:23', '2019-02-28 10:58:23'),
(134, 'commentUpvoteRequested', 'commentId: Long, onResult: (result: Result<Unit>) -> Unit', 'viewModelScope.launch(dispatcherProvider.computation) {\r\n\r\n                val result = upvoteComment(commentId)\r\n                withContext(dispatcherProvider.main) { onResult(result) }\r\n            }', 76, NULL, '2019-02-28 10:58:57', '2019-02-28 10:58:57'),
(135, 'commentReplyRequested', 'text: CharSequence,         commentId: Long,         onResult: (result: Result<Comment>) -> Unit', 'viewModelScope.launch(dispatcherProvider.computation) {\r\n        val result = postReply(text.toString(), commentId)\r\n        withContext(dispatcherProvider.main) { onResult(result) }\r\n    }', 76, NULL, '2019-02-28 10:59:17', '2019-02-28 10:59:17'),
(136, 'storyReplyRequested', 'text: CharSequence,         onResult: (result: Result<Comment>) -> Unit', 'viewModelScope.launch(dispatcherProvider.computation) {\r\n        val result = postStoryComment(text.toString(), story.id)\r\n        withContext(dispatcherProvider.main) { onResult(result) }\r\n    }', 76, NULL, '2019-02-28 10:59:46', '2019-02-28 10:59:46'),
(137, 'getShareShotInfoUseCase', 'private val imageUriProvider: ImageUriProvider', NULL, 77, NULL, '2019-02-28 11:09:58', '2019-02-28 11:09:58'),
(138, 'ShotViewModel', 'shotId: Long,     shotsRepository: ShotsRepository,     private val getShareShotInfoUseCase: GetShareShotInfoUseCase,     private val dispatcherProvider: CoroutinesDispatcherProvider', NULL, 78, NULL, '2019-02-28 11:35:30', '2019-02-28 11:35:30'),
(139, 'viewShotRequested', NULL, '_openLink.value = Event(shot.htmlUrl)', 78, NULL, '2019-02-28 12:25:28', '2019-02-28 12:25:28'),
(140, 'shareShotRequested', NULL, 'shareShotJob.cancel()\r\n        shareShotJob = launchShare()', 78, NULL, '2019-02-28 12:25:46', '2019-02-28 12:25:46'),
(141, 'searchFor', 'query: String', 'dataManager.searchFor(query)', 79, NULL, '2019-02-28 12:28:54', '2019-02-28 12:28:54'),
(142, 'loadMore', NULL, 'dataManager.loadMore()', 79, NULL, '2019-02-28 12:29:24', '2019-02-28 12:29:24'),
(143, 'clearResults', NULL, 'dataManager.clear()', 79, NULL, '2019-02-28 12:29:34', '2019-02-28 12:29:34'),
(144, 'getLength', NULL, 'return data.length;', 80, NULL, '2019-02-28 12:44:11', '2019-02-28 12:44:11'),
(145, 'read', 'UploadDataSink uploadDataSink, ByteBuffer byteBuffer', 'int readLength = Math.min(byteBuffer.remaining(), data.length - position);\r\n    byteBuffer.put(data, position, readLength);\r\n    position += readLength;\r\n    uploadDataSink.onReadSucceeded(false);', 80, NULL, '2019-02-28 12:45:11', '2019-02-28 12:45:11'),
(146, 'rewind', 'UploadDataSink uploadDataSink', 'position = 0;\r\n    uploadDataSink.onRewindSucceeded();', 80, NULL, '2019-02-28 12:46:18', '2019-02-28 12:46:18'),
(147, 'getCastTimeline', 'MediaStatus status', 'MediaInfo mediaInfo = status.getMediaInfo();\r\n    List<MediaQueueItem> items = status.getQueueItems();\r\n    removeUnusedDurationEntries(items);\r\n\r\n    if (mediaInfo != null) {\r\n      String contentId = mediaInfo.getContentId();\r\n      long durationUs = CastUtils.getStreamDurationUs(mediaInfo);\r\n      contentIdToDurationUsMap.put(contentId, durationUs);\r\n    }\r\n    return new CastTimeline(items, contentIdToDurationUsMap);', 81, NULL, '2019-02-28 12:49:54', '2019-02-28 12:49:54');
INSERT INTO `source_codes` (`id`, `method_name`, `method_params`, `method_body`, `source_code_class_id`, `deleted_at`, `created_at`, `updated_at`) VALUES
(148, 'open', 'DataSpec dataSpec', 'Assertions.checkNotNull(dataSpec);\r\n    Assertions.checkState(!opened);\r\n\r\n    operation.close();\r\n    resetConnectTimeout();\r\n    currentDataSpec = dataSpec;\r\n    try {\r\n      currentUrlRequest = buildRequestBuilder(dataSpec).build();\r\n    } catch (IOException e) {\r\n      throw new OpenException(e, currentDataSpec, Status.IDLE);\r\n    }\r\n    currentUrlRequest.start();\r\n\r\n    transferInitializing(dataSpec);\r\n    try {\r\n      boolean connectionOpened = blockUntilConnectTimeout();\r\n      if (exception != null) {\r\n        throw new OpenException(exception, currentDataSpec, getStatus(currentUrlRequest));\r\n      } else if (!connectionOpened) {\r\n        // The timeout was reached before the connection was opened.\r\n        throw new OpenException(\r\n            new SocketTimeoutException(), dataSpec, getStatus(currentUrlRequest));\r\n      }\r\n    } catch (InterruptedException e) {\r\n      Thread.currentThread().interrupt();\r\n      throw new OpenException(new InterruptedIOException(e), dataSpec, Status.INVALID);\r\n    }\r\n\r\n    // Check for a valid response code.\r\n    int responseCode = responseInfo.getHttpStatusCode();\r\n    if (responseCode < 200 || responseCode > 299) {\r\n      InvalidResponseCodeException exception =\r\n          new InvalidResponseCodeException(\r\n              responseCode,\r\n              responseInfo.getHttpStatusText(),\r\n              responseInfo.getAllHeaders(),\r\n              currentDataSpec);\r\n      if (responseCode == 416) {\r\n        exception.initCause(new DataSourceException(DataSourceException.POSITION_OUT_OF_RANGE));\r\n      }\r\n      throw exception;\r\n    }\r\n\r\n    // Check for a valid content type.\r\n    if (contentTypePredicate != null) {\r\n      List<String> contentTypeHeaders = responseInfo.getAllHeaders().get(CONTENT_TYPE);\r\n      String contentType = isEmpty(contentTypeHeaders) ? null : contentTypeHeaders.get(0);\r\n      if (!contentTypePredicate.evaluate(contentType)) {\r\n        throw new InvalidContentTypeException(contentType, currentDataSpec);\r\n      }\r\n    }\r\n\r\n    // If we requested a range starting from a non-zero position and received a 200 rather than a\r\n    // 206, then the server does not support partial requests. We\'ll need to manually skip to the\r\n    // requested position.\r\n    bytesToSkip = responseCode == 200 && dataSpec.position != 0 ? dataSpec.position : 0;\r\n\r\n    // Calculate the content length.\r\n    if (!getIsCompressed(responseInfo)) {\r\n      if (dataSpec.length != C.LENGTH_UNSET) {\r\n        bytesRemaining = dataSpec.length;\r\n      } else {\r\n        bytesRemaining = getContentLength(responseInfo);\r\n      }\r\n    } else {\r\n      // If the response is compressed then the content length will be that of the compressed data\r\n      // which isn\'t what we want. Always use the dataSpec length in this case.\r\n      bytesRemaining = currentDataSpec.length;\r\n    }\r\n\r\n    opened = true;\r\n    transferStarted(dataSpec);\r\n\r\n    return bytesRemaining;', 82, NULL, '2019-02-28 12:51:42', '2019-02-28 12:51:42'),
(149, 'setRequestProperty', 'String name, String value', 'requestProperties.set(name, value);', 82, NULL, '2019-02-28 12:55:53', '2019-02-28 12:55:53'),
(150, 'read', 'byte[] buffer, int offset, int readLength', 'Assertions.checkState(opened);\r\n\r\n    if (readLength == 0) {\r\n      return 0;\r\n    } else if (bytesRemaining == 0) {\r\n      return C.RESULT_END_OF_INPUT;\r\n    }\r\n\r\n    if (readBuffer == null) {\r\n      readBuffer = ByteBuffer.allocateDirect(READ_BUFFER_SIZE_BYTES);\r\n      readBuffer.limit(0);\r\n    }\r\n    while (!readBuffer.hasRemaining()) {\r\n      // Fill readBuffer with more data from Cronet.\r\n      operation.close();\r\n      readBuffer.clear();\r\n      currentUrlRequest.read(readBuffer);\r\n      try {\r\n        if (!operation.block(readTimeoutMs)) {\r\n          throw new SocketTimeoutException();\r\n        }\r\n      } catch (InterruptedException e) {\r\n        // The operation is ongoing so replace readBuffer to avoid it being written to by this\r\n        // operation during a subsequent request.\r\n        readBuffer = null;\r\n        Thread.currentThread().interrupt();\r\n        throw new HttpDataSourceException(\r\n            new InterruptedIOException(e), currentDataSpec, HttpDataSourceException.TYPE_READ);\r\n      } catch (SocketTimeoutException e) {\r\n        // The operation is ongoing so replace readBuffer to avoid it being written to by this\r\n        // operation during a subsequent request.\r\n        readBuffer = null;\r\n        throw new HttpDataSourceException(e, currentDataSpec, HttpDataSourceException.TYPE_READ);\r\n      }\r\n\r\n      if (exception != null) {\r\n        throw new HttpDataSourceException(exception, currentDataSpec,\r\n            HttpDataSourceException.TYPE_READ);\r\n      } else if (finished) {\r\n        bytesRemaining = 0;\r\n        return C.RESULT_END_OF_INPUT;\r\n      } else {\r\n        // The operation didn\'t time out, fail or finish, and therefore data must have been read.\r\n        readBuffer.flip();\r\n        Assertions.checkState(readBuffer.hasRemaining());\r\n        if (bytesToSkip > 0) {\r\n          int bytesSkipped = (int) Math.min(readBuffer.remaining(), bytesToSkip);\r\n          readBuffer.position(readBuffer.position() + bytesSkipped);\r\n          bytesToSkip -= bytesSkipped;\r\n        }\r\n      }\r\n    }\r\n\r\n    int bytesRead = Math.min(readBuffer.remaining(), readLength);\r\n    readBuffer.get(buffer, offset, bytesRead);\r\n\r\n    if (bytesRemaining != C.LENGTH_UNSET) {\r\n      bytesRemaining -= bytesRead;\r\n    }\r\n    bytesTransferred(bytesRead);\r\n    return bytesRead;', 82, NULL, '2019-02-28 13:01:26', '2019-02-28 13:01:26'),
(151, 'close', NULL, 'if (currentUrlRequest != null) {\r\n      currentUrlRequest.cancel();\r\n      currentUrlRequest = null;\r\n    }\r\n    if (readBuffer != null) {\r\n      readBuffer.limit(0);\r\n    }\r\n    currentDataSpec = null;\r\n    responseInfo = null;\r\n    exception = null;\r\n    finished = false;\r\n    if (opened) {\r\n      opened = false;\r\n      transferEnded();\r\n    }', 82, NULL, '2019-02-28 13:04:11', '2019-02-28 13:04:11'),
(152, 'start', 'EventListener eventListener, AdViewProvider adViewProvider', 'Assertions.checkNotNull(\r\n        nextPlayer, \"Set player using adsLoader.setPlayer before preparing the player.\");\r\n    player = nextPlayer;\r\n    this.eventListener = eventListener;\r\n    lastVolumePercentage = 0;\r\n    lastAdProgress = null;\r\n    lastContentProgress = null;\r\n    ViewGroup adViewGroup = adViewProvider.getAdViewGroup();\r\n    adDisplayContainer.setAdContainer(adViewGroup);\r\n    View[] adOverlayViews = adViewProvider.getAdOverlayViews();\r\n    for (View view : adOverlayViews) {\r\n      adDisplayContainer.registerVideoControlsOverlay(view);\r\n    }\r\n    player.addListener(this);\r\n    maybeNotifyPendingAdLoadError();\r\n    if (adPlaybackState != null) {\r\n      // Pass the ad playback state to the player, and resume ads if necessary.\r\n      eventListener.onAdPlaybackState(adPlaybackState);\r\n      if (imaPausedContent && player.getPlayWhenReady()) {\r\n        adsManager.resume();\r\n      }\r\n    } else if (adsManager != null) {\r\n      // Ads have loaded but the ads manager is not initialized.\r\n      startAdPlayback();\r\n    } else {\r\n      // Ads haven\'t loaded yet, so request them.\r\n      requestAds(adViewGroup);\r\n    }', 83, NULL, '2019-02-28 13:15:29', '2019-02-28 13:15:29'),
(153, 'Builder', 'Context context', 'this.context = Assertions.checkNotNull(context);\r\n      vastLoadTimeoutMs = TIMEOUT_UNSET;\r\n      mediaLoadTimeoutMs = TIMEOUT_UNSET;\r\n      mediaBitrate = BITRATE_UNSET;\r\n      focusSkipButtonWhenAvailable = true;\r\n      imaFactory = new DefaultImaFactory();', 84, NULL, '2019-02-28 13:35:32', '2019-02-28 13:35:32'),
(154, 'playAd', NULL, 'if (DEBUG) {\r\n      Log.d(TAG, \"playAd\");\r\n    }\r\n    if (adsManager == null) {\r\n      Log.w(TAG, \"Ignoring playAd after release\");\r\n      return;\r\n    }\r\n    switch (imaAdState) {\r\n      case IMA_AD_STATE_PLAYING:\r\n        // IMA does not always call stopAd before resuming content.\r\n        // See [Internal: b/38354028, b/63320878].\r\n        Log.w(TAG, \"Unexpected playAd without stopAd\");\r\n        break;\r\n      case IMA_AD_STATE_NONE:\r\n        // IMA is requesting to play the ad, so stop faking the content position.\r\n        fakeContentProgressElapsedRealtimeMs = C.TIME_UNSET;\r\n        fakeContentProgressOffsetMs = C.TIME_UNSET;\r\n        imaAdState = IMA_AD_STATE_PLAYING;\r\n        for (int i = 0; i < adCallbacks.size(); i++) {\r\n          adCallbacks.get(i).onPlay();\r\n        }\r\n        if (shouldNotifyAdPrepareError) {\r\n          shouldNotifyAdPrepareError = false;\r\n          for (int i = 0; i < adCallbacks.size(); i++) {\r\n            adCallbacks.get(i).onError();\r\n          }\r\n        }\r\n        break;\r\n      case IMA_AD_STATE_PAUSED:\r\n        imaAdState = IMA_AD_STATE_PLAYING;\r\n        for (int i = 0; i < adCallbacks.size(); i++) {\r\n          adCallbacks.get(i).onResume();\r\n        }\r\n        break;\r\n      default:\r\n        throw new IllegalStateException();\r\n    }\r\n    if (player == null) {\r\n      // Sometimes messages from IMA arrive after detaching the player. See [Internal: b/63801642].\r\n      Log.w(TAG, \"Unexpected playAd while detached\");\r\n    } else if (!player.getPlayWhenReady()) {\r\n      adsManager.pause();\r\n    }', 83, NULL, '2019-02-28 13:42:26', '2019-02-28 13:43:24'),
(155, 'stop', NULL, 'if (adsManager != null && imaPausedContent) {\r\n      adPlaybackState =\r\n          adPlaybackState.withAdResumePositionUs(\r\n              playingAd ? C.msToUs(player.getCurrentPosition()) : 0);\r\n      adsManager.pause();\r\n    }\r\n    lastVolumePercentage = getVolume();\r\n    lastAdProgress = getAdProgress();\r\n    lastContentProgress = getContentProgress();\r\n    adDisplayContainer.unregisterAllVideoControlsOverlays();\r\n    player.removeListener(this);\r\n    player = null;\r\n    eventListener = null;', 83, NULL, '2019-02-28 13:43:44', '2019-02-28 13:43:44'),
(156, 'setPlayWhenReady', 'boolean playWhenReady', NULL, 85, NULL, '2019-02-28 16:42:29', '2019-02-28 16:42:29'),
(157, 'AnalyticsCollector', 'Player player, Clock clock', 'if (player != null) {\r\n      this.player = player;\r\n    }\r\n    this.clock = Assertions.checkNotNull(clock);\r\n    listeners = new CopyOnWriteArraySet<>();\r\n    mediaPeriodQueueTracker = new MediaPeriodQueueTracker();\r\n    window = new Window();', 86, NULL, '2019-02-28 16:44:12', '2019-02-28 16:56:17'),
(158, 'parseTrueHdSyncframeAudioSampleCount', 'byte[] syncframe', '// The syncword ends 0xBA for TrueHD or 0xBB for MLP.\r\n    if (syncframe[4] != (byte) 0xF8\r\n        || syncframe[5] != (byte) 0x72\r\n        || syncframe[6] != (byte) 0x6F\r\n        || (syncframe[7] & 0xFE) != 0xBA) {\r\n      return 0;\r\n    }\r\n    boolean isMlp = (syncframe[7] & 0xFF) == 0xBB;\r\n    return 40 << ((syncframe[isMlp ? 9 : 8] >> 4) & 0x07);', 88, NULL, '2019-02-28 17:03:02', '2019-02-28 17:03:02'),
(159, 'setAudioAttributes', 'AudioAttributes audioAttributes, boolean playWhenReady, int playerState', 'if (this.audioAttributes == null && audioAttributes == null) {\r\n      return playWhenReady ? PLAYER_COMMAND_PLAY_WHEN_READY : PLAYER_COMMAND_DO_NOT_PLAY;\r\n    }\r\n\r\n    Assertions.checkNotNull(\r\n        audioManager, \"SimpleExoPlayer must be created with a context to handle audio focus.\");\r\n    if (!Util.areEqual(this.audioAttributes, audioAttributes)) {\r\n      this.audioAttributes = audioAttributes;\r\n      focusGain = convertAudioAttributesToFocusGain(audioAttributes);\r\n\r\n      Assertions.checkArgument(\r\n          focusGain == C.AUDIOFOCUS_GAIN || focusGain == C.AUDIOFOCUS_NONE,\r\n          \"Automatic handling of audio focus is only available for USAGE_MEDIA and USAGE_GAME.\");\r\n      if (playWhenReady\r\n          && (playerState == Player.STATE_BUFFERING || playerState == Player.STATE_READY)) {\r\n        return requestAudioFocus();\r\n      }\r\n    }\r\n\r\n    return playerState == Player.STATE_IDLE\r\n        ? handleIdle(playWhenReady)\r\n        : handlePrepare(playWhenReady);', 89, NULL, '2019-02-28 17:04:18', '2019-02-28 17:04:18'),
(160, 'handlePrepare', 'boolean playWhenReady', 'if (audioManager == null) {\r\n      return PLAYER_COMMAND_PLAY_WHEN_READY;\r\n    }\r\n\r\n    return playWhenReady ? requestAudioFocus() : PLAYER_COMMAND_DO_NOT_PLAY;', 89, NULL, '2019-02-28 17:15:54', '2019-02-28 17:15:54'),
(161, 'handleSetPlayWhenReady', 'boolean playWhenReady, int playerState', 'if (audioManager == null) {\r\n      return PLAYER_COMMAND_PLAY_WHEN_READY;\r\n    }\r\n\r\n    if (!playWhenReady) {\r\n      abandonAudioFocus();\r\n      return PLAYER_COMMAND_DO_NOT_PLAY;\r\n    }\r\n\r\n    return playerState == Player.STATE_IDLE ? handleIdle(playWhenReady) : requestAudioFocus();', 89, NULL, '2019-02-28 17:16:43', '2019-02-28 17:16:43'),
(162, 'handleStop', NULL, 'if (audioManager == null) {\r\n      return;\r\n    }\r\n\r\n    abandonAudioFocus(/* forceAbandon= */ true);', 89, NULL, '2019-02-28 17:27:31', '2019-02-28 17:27:31'),
(163, 'setEnabled', 'boolean enabled', 'this.enabled = enabled;\r\n    flush();', 91, NULL, '2019-02-28 17:36:11', '2019-02-28 17:36:11'),
(164, 'isActive', NULL, 'return sampleRateHz != Format.NO_VALUE && enabled;', 91, NULL, '2019-02-28 17:43:06', '2019-02-28 17:43:06'),
(165, 'configure', 'int sampleRateHz, int channelCount, int encoding', 'if (encoding != C.ENCODING_PCM_16BIT) {\r\n      throw new UnhandledFormatException(sampleRateHz, channelCount, encoding);\r\n    }\r\n    if (this.sampleRateHz == sampleRateHz && this.channelCount == channelCount) {\r\n      return false;\r\n    }\r\n    this.sampleRateHz = sampleRateHz;\r\n    this.channelCount = channelCount;\r\n    bytesPerFrame = channelCount * 2;\r\n    return true;', 91, NULL, '2019-02-28 17:45:43', '2019-02-28 17:45:43'),
(167, 'supportsFormat', 'Format format', 'if (!MimeTypes.isAudio(format.sampleMimeType)) {\r\n      return FORMAT_UNSUPPORTED_TYPE;\r\n    }\r\n    int formatSupport = supportsFormatInternal(drmSessionManager, format);\r\n    if (formatSupport <= FORMAT_UNSUPPORTED_DRM) {\r\n      return formatSupport;\r\n    }\r\n    int tunnelingSupport = Util.SDK_INT >= 21 ? TUNNELING_SUPPORTED : TUNNELING_NOT_SUPPORTED;\r\n    return ADAPTIVE_NOT_SEAMLESS | tunnelingSupport | formatSupport;', 92, NULL, '2019-02-28 17:52:12', '2019-02-28 17:52:12'),
(168, 'setCurrentStreamFinal', NULL, 'streamIsFinal = true;', 92, NULL, '2019-02-28 17:53:50', '2019-02-28 17:53:50'),
(169, 'configure', 'int sampleRateHz, int channelCount, @Encoding int encoding', 'if (encoding != C.ENCODING_PCM_16BIT) {\r\n      throw new UnhandledFormatException(sampleRateHz, channelCount, encoding);\r\n    }\r\n    int outputSampleRateHz = pendingOutputSampleRateHz == SAMPLE_RATE_NO_CHANGE\r\n        ? sampleRateHz : pendingOutputSampleRateHz;\r\n    if (this.sampleRateHz == sampleRateHz && this.channelCount == channelCount\r\n        && this.outputSampleRateHz == outputSampleRateHz) {\r\n      return false;\r\n    }\r\n    this.sampleRateHz = sampleRateHz;\r\n    this.channelCount = channelCount;\r\n    this.outputSampleRateHz = outputSampleRateHz;\r\n    sonic = null;\r\n    return true;', 93, NULL, '2019-02-28 17:54:50', '2019-02-28 17:54:50'),
(170, 'setOutputSampleRateHz', 'int sampleRateHz', 'pendingOutputSampleRateHz = sampleRateHz', 93, NULL, '2019-02-28 17:58:14', '2019-02-28 17:58:14'),
(171, 'setSpeed', 'float speed', 'speed = Util.constrainValue(speed, MINIMUM_SPEED, MAXIMUM_SPEED);\r\n    if (this.speed != speed) {\r\n      this.speed = speed;\r\n      sonic = null;\r\n    }\r\n    flush();\r\n    return speed;', 93, NULL, '2019-02-28 17:59:22', '2019-02-28 17:59:22'),
(172, 'setPitch', 'float pitch', 'pitch = Util.constrainValue(pitch, MINIMUM_PITCH, MAXIMUM_PITCH);\r\n    if (this.pitch != pitch) {\r\n      this.pitch = pitch;\r\n      sonic = null;\r\n    }\r\n    flush();\r\n    return pitch;', 93, NULL, '2019-02-28 18:04:52', '2019-02-28 18:04:52'),
(173, 'adjustResponseData', 'byte[] response', 'if (Util.SDK_INT >= 27) {\r\n      return response;\r\n    }\r\n    // Prior to O-MR1 the ClearKey CDM expected Base64 encoding rather than Base64Url encoding for\r\n    // the \"k\" and \"kid\" strings. See [Internal: b/64388098]. We know that the ClearKey CDM only\r\n    // looks at the k, kid and kty parameters in each key, so can ignore the rest of the response.\r\n    try {\r\n      JSONObject responseJson = new JSONObject(Util.fromUtf8Bytes(response));\r\n      StringBuilder adjustedResponseBuilder = new StringBuilder(\"{\\\"keys\\\":[\");\r\n      JSONArray keysArray = responseJson.getJSONArray(\"keys\");\r\n      for (int i = 0; i < keysArray.length(); i++) {\r\n        if (i != 0) {\r\n          adjustedResponseBuilder.append(\",\");\r\n        }\r\n        JSONObject key = keysArray.getJSONObject(i);\r\n        adjustedResponseBuilder.append(\"{\\\"k\\\":\\\"\");\r\n        adjustedResponseBuilder.append(base64UrlToBase64(key.getString(\"k\")));\r\n        adjustedResponseBuilder.append(\"\\\",\\\"kid\\\":\\\"\");\r\n        adjustedResponseBuilder.append(base64UrlToBase64(key.getString(\"kid\")));\r\n        adjustedResponseBuilder.append(\"\\\",\\\"kty\\\":\\\"\");\r\n        adjustedResponseBuilder.append(key.getString(\"kty\"));\r\n        adjustedResponseBuilder.append(\"\\\"}\");\r\n      }\r\n      adjustedResponseBuilder.append(\"]}\");\r\n      return Util.getUtf8Bytes(adjustedResponseBuilder.toString());\r\n    } catch (JSONException e) {\r\n      Log.e(TAG, \"Failed to adjust response data: \" + Util.fromUtf8Bytes(response), e);\r\n      return response;\r\n    }', 94, NULL, '2019-02-28 18:07:44', '2019-02-28 18:07:44'),
(174, 'writeToParcel', 'Parcel dest, int flags', 'dest.writeString(schemeType);\r\n    dest.writeTypedArray(schemeDatas, 0);', 95, NULL, '2019-02-28 18:12:35', '2019-02-28 18:12:35'),
(175, 'hashCode', NULL, 'if (hashCode == 0) {\r\n      int result = (schemeType == null ? 0 : schemeType.hashCode());\r\n      result = 31 * result + Arrays.hashCode(schemeDatas);\r\n      hashCode = result;\r\n    }\r\n    return hashCode;', 95, NULL, '2019-02-28 18:13:50', '2019-02-28 18:13:50'),
(176, 'get', 'UUID uuid', 'for (SchemeData schemeData : schemeDatas) {\r\n      if (schemeData.matches(uuid)) {\r\n        return schemeData;\r\n      }\r\n    }\r\n    return null;', 95, NULL, '2019-02-28 18:14:38', '2019-02-28 18:14:38'),
(177, 'DrmInitData', 'SchemeData... schemeDatas', 'this(null, schemeDatas);', 95, NULL, '2019-02-28 18:15:56', '2019-02-28 18:15:56'),
(178, 'matches', 'UUID schemeUuid', 'return C.UUID_NIL.equals(uuid) || schemeUuid.equals(uuid);', 95, NULL, '2019-02-28 18:17:13', '2019-02-28 18:17:13'),
(179, 'renewLicense', 'byte[] offlineLicenseKeySetId', 'Assertions.checkNotNull(offlineLicenseKeySetId);\r\n    return blockingKeyRequest(DefaultDrmSessionManager.MODE_DOWNLOAD, offlineLicenseKeySetId, null);', 96, NULL, '2019-02-28 18:19:25', '2019-02-28 18:19:25'),
(180, 'downloadLicense', 'DrmInitData drmInitData', 'Assertions.checkArgument(drmInitData != null);\r\n    return blockingKeyRequest(DefaultDrmSessionManager.MODE_DOWNLOAD, null, drmInitData);', 96, NULL, '2019-02-28 18:20:30', '2019-02-28 18:20:30'),
(181, 'getLicenseDurationRemainingSec', 'byte[] offlineLicenseKeySetId', 'Assertions.checkNotNull(offlineLicenseKeySetId);\r\n    DrmSession<T> drmSession = openBlockingKeyRequest(DefaultDrmSessionManager.MODE_QUERY,\r\n        offlineLicenseKeySetId, null);\r\n    DrmSessionException error = drmSession.getError();\r\n    Pair<Long, Long> licenseDurationRemainingSec =\r\n        WidevineUtil.getLicenseDurationRemainingSec(drmSession);\r\n    drmSessionManager.releaseSession(drmSession);\r\n    if (error != null) {\r\n      if (error.getCause() instanceof KeysExpiredException) {\r\n        return Pair.create(0L, 0L);\r\n      }\r\n      throw error;\r\n    }\r\n    return licenseDurationRemainingSec;', 96, NULL, '2019-02-28 18:22:56', '2019-02-28 18:22:56'),
(183, 'sniff', 'ExtractorInput input', 'return readAmrHeader(input);', 97, NULL, '2019-02-28 18:39:09', '2019-02-28 18:39:09'),
(184, 'AmrExtractor', 'int flags', 'this.flags = flags;\r\n    scratch = new byte[1];\r\n    firstSampleSize = C.LENGTH_UNSET;', 97, NULL, '2019-02-28 18:43:19', '2019-02-28 18:43:19'),
(185, 'FlvExtractor', NULL, 'scratch = new ParsableByteArray(4);\r\n    headerBuffer = new ParsableByteArray(FLV_HEADER_SIZE);\r\n    tagHeaderBuffer = new ParsableByteArray(FLV_TAG_HEADER_SIZE);\r\n    tagData = new ParsableByteArray();\r\n    metadataReader = new ScriptTagPayloadReader();\r\n    state = STATE_READING_FLV_HEADER;\r\n    mediaTagTimestampOffsetUs = C.TIME_UNSET;', 98, NULL, '2019-02-28 18:45:20', '2019-02-28 18:45:20'),
(186, 'read', 'ExtractorInput input', 'Assertions.checkState(output != null);\r\n    while (true) {\r\n      if (!masterElementsStack.isEmpty()\r\n          && input.getPosition() >= masterElementsStack.peek().elementEndPosition) {\r\n        output.endMasterElement(masterElementsStack.pop().elementId);\r\n        return true;\r\n      }\r\n\r\n      if (elementState == ELEMENT_STATE_READ_ID) {\r\n        long result = varintReader.readUnsignedVarint(input, true, false, MAX_ID_BYTES);\r\n        if (result == C.RESULT_MAX_LENGTH_EXCEEDED) {\r\n          result = maybeResyncToNextLevel1Element(input);\r\n        }\r\n        if (result == C.RESULT_END_OF_INPUT) {\r\n          return false;\r\n        }\r\n        // Element IDs are at most 4 bytes, so we can cast to integers.\r\n        elementId = (int) result;\r\n        elementState = ELEMENT_STATE_READ_CONTENT_SIZE;\r\n      }\r\n\r\n      if (elementState == ELEMENT_STATE_READ_CONTENT_SIZE) {\r\n        elementContentSize = varintReader.readUnsignedVarint(input, false, true, MAX_LENGTH_BYTES);\r\n        elementState = ELEMENT_STATE_READ_CONTENT;\r\n      }\r\n\r\n      @EbmlReaderOutput.ElementType int type = output.getElementType(elementId);\r\n      switch (type) {\r\n        case EbmlReaderOutput.TYPE_MASTER:\r\n          long elementContentPosition = input.getPosition();\r\n          long elementEndPosition = elementContentPosition + elementContentSize;\r\n          masterElementsStack.push(new MasterElement(elementId, elementEndPosition));\r\n          output.startMasterElement(elementId, elementContentPosition, elementContentSize);\r\n          elementState = ELEMENT_STATE_READ_ID;\r\n          return true;\r\n        case EbmlReaderOutput.TYPE_UNSIGNED_INT:\r\n          if (elementContentSize > MAX_INTEGER_ELEMENT_SIZE_BYTES) {\r\n            throw new ParserException(\"Invalid integer size: \" + elementContentSize);\r\n          }\r\n          output.integerElement(elementId, readInteger(input, (int) elementContentSize));\r\n          elementState = ELEMENT_STATE_READ_ID;\r\n          return true;\r\n        case EbmlReaderOutput.TYPE_FLOAT:\r\n          if (elementContentSize != VALID_FLOAT32_ELEMENT_SIZE_BYTES\r\n              && elementContentSize != VALID_FLOAT64_ELEMENT_SIZE_BYTES) {\r\n            throw new ParserException(\"Invalid float size: \" + elementContentSize);\r\n          }\r\n          output.floatElement(elementId, readFloat(input, (int) elementContentSize));\r\n          elementState = ELEMENT_STATE_READ_ID;\r\n          return true;\r\n        case EbmlReaderOutput.TYPE_STRING:\r\n          if (elementContentSize > Integer.MAX_VALUE) {\r\n            throw new ParserException(\"String element size: \" + elementContentSize);\r\n          }\r\n          output.stringElement(elementId, readString(input, (int) elementContentSize));\r\n          elementState = ELEMENT_STATE_READ_ID;\r\n          return true;\r\n        case EbmlReaderOutput.TYPE_BINARY:\r\n          output.binaryElement(elementId, (int) elementContentSize, input);\r\n          elementState = ELEMENT_STATE_READ_ID;\r\n          return true;\r\n        case EbmlReaderOutput.TYPE_UNKNOWN:\r\n          input.skipFully((int) elementContentSize);\r\n          elementState = ELEMENT_STATE_READ_ID;\r\n          break;\r\n        default:\r\n          throw new ParserException(\"Invalid element type \" + type);\r\n      }\r\n    }', 99, NULL, '2019-03-01 02:30:16', '2019-03-01 02:30:16'),
(187, 'MatroskaExtractor', 'EbmlReader reader, @Flags int flags', 'this.reader = reader;\r\n    this.reader.init(new InnerEbmlReaderOutput());\r\n    seekForCuesEnabled = (flags & FLAG_DISABLE_SEEK_FOR_CUES) == 0;\r\n    varintReader = new VarintReader();\r\n    tracks = new SparseArray<>();\r\n    scratch = new ParsableByteArray(4);\r\n    vorbisNumPageSamples = new ParsableByteArray(ByteBuffer.allocate(4).putInt(-1).array());\r\n    seekEntryIdBytes = new ParsableByteArray(4);\r\n    nalStartCode = new ParsableByteArray(NalUnitUtil.NAL_START_CODE);\r\n    nalLength = new ParsableByteArray(4);\r\n    sampleStrippedBytes = new ParsableByteArray();\r\n    subtitleSample = new ParsableByteArray();\r\n    encryptionInitializationVector = new ParsableByteArray(ENCRYPTION_IV_SIZE);\r\n    encryptionSubsampleData = new ParsableByteArray();', 100, NULL, '2019-03-01 02:50:21', '2019-03-01 02:50:21'),
(188, 'readUnsignedVarint', 'ExtractorInput input, boolean allowEndOfInput,       boolean removeLengthMask, int maximumAllowedLength', 'if (state == STATE_BEGIN_READING) {\r\n      // Read the first byte to establish the length.\r\n      if (!input.readFully(scratch, 0, 1, allowEndOfInput)) {\r\n        return C.RESULT_END_OF_INPUT;\r\n      }\r\n      int firstByte = scratch[0] & 0xFF;\r\n      length = parseUnsignedVarintLength(firstByte);\r\n      if (length == C.LENGTH_UNSET) {\r\n        throw new IllegalStateException(\"No valid varint length mask found\");\r\n      }\r\n      state = STATE_READ_CONTENTS;\r\n    }\r\n\r\n    if (length > maximumAllowedLength) {\r\n      state = STATE_BEGIN_READING;\r\n      return C.RESULT_MAX_LENGTH_EXCEEDED;\r\n    }\r\n\r\n    if (length != 1) {\r\n      // Read the remaining bytes.\r\n      input.readFully(scratch, 1, length - 1);\r\n    }\r\n\r\n    state = STATE_BEGIN_READING;\r\n    return assembleVarint(scratch, length, removeLengthMask);', 101, NULL, '2019-03-01 02:52:33', '2019-03-01 02:52:33'),
(189, 'Mp3Extractor', 'int flags, long forcedFirstSampleTimestampUs', 'this.flags = flags;\r\n    this.forcedFirstSampleTimestampUs = forcedFirstSampleTimestampUs;\r\n    scratch = new ParsableByteArray(SCRATCH_LENGTH);\r\n    synchronizedHeader = new MpegAudioHeader();\r\n    gaplessInfoHolder = new GaplessInfoHolder();\r\n    basisTimeUs = C.TIME_UNSET;\r\n    id3Peeker = new Id3Peeker();', 102, NULL, '2019-03-01 02:55:28', '2019-03-01 02:55:28'),
(190, 'getTimeUs', 'long position', 'long positionOffset = position - dataStartPosition;\r\n    if (!isSeekable() || positionOffset <= xingFrameSize) {\r\n      return 0L;\r\n    }\r\n    long[] tableOfContents = Assertions.checkNotNull(this.tableOfContents);\r\n    double scaledPosition = (positionOffset * 256d) / dataSize;\r\n    int prevTableIndex = Util.binarySearchFloor(tableOfContents, (long) scaledPosition, true, true);\r\n    long prevTimeUs = getTimeUsForTableIndex(prevTableIndex);\r\n    long prevScaledPosition = tableOfContents[prevTableIndex];\r\n    long nextTimeUs = getTimeUsForTableIndex(prevTableIndex + 1);\r\n    long nextScaledPosition = prevTableIndex == 99 ? 256 : tableOfContents[prevTableIndex + 1];\r\n    // Linearly interpolate between the two table entries.\r\n    double interpolateFraction = prevScaledPosition == nextScaledPosition ? 0\r\n        : ((scaledPosition - prevScaledPosition) / (nextScaledPosition - prevScaledPosition));\r\n    return prevTimeUs + Math.round(interpolateFraction * (nextTimeUs - prevTimeUs));', 103, NULL, '2019-03-01 02:57:34', '2019-03-01 03:03:24'),
(191, 'getSeekPoints', 'long timeUs', 'if (!isSeekable()) {\r\n      return new SeekPoints(new SeekPoint(0, dataStartPosition + xingFrameSize));\r\n    }\r\n    timeUs = Util.constrainValue(timeUs, 0, durationUs);\r\n    double percent = (timeUs * 100d) / durationUs;\r\n    double scaledPosition;\r\n    if (percent <= 0) {\r\n      scaledPosition = 0;\r\n    } else if (percent >= 100) {\r\n      scaledPosition = 256;\r\n    } else {\r\n      int prevTableIndex = (int) percent;\r\n      long[] tableOfContents = Assertions.checkNotNull(this.tableOfContents);\r\n      double prevScaledPosition = tableOfContents[prevTableIndex];\r\n      double nextScaledPosition = prevTableIndex == 99 ? 256 : tableOfContents[prevTableIndex + 1];\r\n      // Linearly interpolate between the two scaled positions.\r\n      double interpolateFraction = percent - prevTableIndex;\r\n      scaledPosition = prevScaledPosition\r\n          + (interpolateFraction * (nextScaledPosition - prevScaledPosition));\r\n    }\r\n    long positionOffset = Math.round((scaledPosition / 256) * dataSize);\r\n    // Ensure returned positions skip the frame containing the XING header.\r\n    positionOffset = Util.constrainValue(positionOffset, xingFrameSize, dataSize - 1);\r\n    return new SeekPoints(new SeekPoint(timeUs, dataStartPosition + positionOffset));', 103, NULL, '2019-03-01 02:59:57', '2019-03-01 02:59:57'),
(192, 'parseCommonEncryptionSinfFromParent', 'ParsableByteArray parent, int position, int size', 'int childPosition = position + Atom.HEADER_SIZE;\r\n    int schemeInformationBoxPosition = C.POSITION_UNSET;\r\n    int schemeInformationBoxSize = 0;\r\n    String schemeType = null;\r\n    Integer dataFormat = null;\r\n    while (childPosition - position < size) {\r\n      parent.setPosition(childPosition);\r\n      int childAtomSize = parent.readInt();\r\n      int childAtomType = parent.readInt();\r\n      if (childAtomType == Atom.TYPE_frma) {\r\n        dataFormat = parent.readInt();\r\n      } else if (childAtomType == Atom.TYPE_schm) {\r\n        parent.skipBytes(4);\r\n        // Common encryption scheme_type values are defined in ISO/IEC 23001-7:2016, section 4.1.\r\n        schemeType = parent.readString(4);\r\n      } else if (childAtomType == Atom.TYPE_schi) {\r\n        schemeInformationBoxPosition = childPosition;\r\n        schemeInformationBoxSize = childAtomSize;\r\n      }\r\n      childPosition += childAtomSize;\r\n    }\r\n\r\n    if (C.CENC_TYPE_cenc.equals(schemeType) || C.CENC_TYPE_cbc1.equals(schemeType)\r\n        || C.CENC_TYPE_cens.equals(schemeType) || C.CENC_TYPE_cbcs.equals(schemeType)) {\r\n      Assertions.checkArgument(dataFormat != null, \"frma atom is mandatory\");\r\n      Assertions.checkArgument(schemeInformationBoxPosition != C.POSITION_UNSET,\r\n          \"schi atom is mandatory\");\r\n      TrackEncryptionBox encryptionBox = parseSchiFromParent(parent, schemeInformationBoxPosition,\r\n          schemeInformationBoxSize, schemeType);\r\n      Assertions.checkArgument(encryptionBox != null, \"tenc atom is mandatory\");\r\n      return Pair.create(dataFormat, encryptionBox);\r\n    } else {\r\n      return null;\r\n    }', 104, NULL, '2019-03-01 03:05:21', '2019-03-01 03:05:21'),
(193, 'Stz2SampleSizeBox', 'Atom.LeafAtom stz2Atom', 'data = stz2Atom.data;\r\n      data.setPosition(Atom.FULL_HEADER_SIZE);\r\n      fieldSize = data.readUnsignedIntToInt() & 0x000000FF;\r\n      sampleCount = data.readUnsignedIntToInt();', 104, NULL, '2019-03-01 03:07:55', '2019-03-01 03:07:55'),
(194, 'FragmentedMp4Extractor', '@Flags int flags,       @Nullable TimestampAdjuster timestampAdjuster,       @Nullable Track sideloadedTrack,       @Nullable DrmInitData sideloadedDrmInitData,       List<Format> closedCaptionFormats,       @Nullable TrackOutput additionalEmsgTrackOutput', 'this.flags = flags | (sideloadedTrack != null ? FLAG_SIDELOADED : 0);\r\n    this.timestampAdjuster = timestampAdjuster;\r\n    this.sideloadedTrack = sideloadedTrack;\r\n    this.sideloadedDrmInitData = sideloadedDrmInitData;\r\n    this.closedCaptionFormats = Collections.unmodifiableList(closedCaptionFormats);\r\n    this.additionalEmsgTrackOutput = additionalEmsgTrackOutput;\r\n    atomHeader = new ParsableByteArray(Atom.LONG_HEADER_SIZE);\r\n    nalStartCode = new ParsableByteArray(NalUnitUtil.NAL_START_CODE);\r\n    nalPrefix = new ParsableByteArray(5);\r\n    nalBuffer = new ParsableByteArray();\r\n    extendedTypeScratch = new byte[16];\r\n    containerAtoms = new ArrayDeque<>();\r\n    pendingMetadataSampleInfos = new ArrayDeque<>();\r\n    trackBundles = new SparseArray<>();\r\n    durationUs = C.TIME_UNSET;\r\n    pendingSeekTimeUs = C.TIME_UNSET;\r\n    segmentIndexEarliestPresentationTimeUs = C.TIME_UNSET;\r\n    enterReadingAtomHeaderState();', 105, NULL, '2019-03-01 03:11:46', '2019-03-01 03:11:46'),
(195, 'writeToParcel', 'Parcel dest, int flags', 'dest.writeString(key);\r\n    dest.writeInt(value.length);\r\n    dest.writeByteArray(value);\r\n    dest.writeInt(localeIndicator);\r\n    dest.writeInt(typeIndicator);', 106, NULL, '2019-03-01 03:14:13', '2019-03-01 03:14:13'),
(196, 'Mp4Extractor', 'int flags', 'this.flags = flags;\r\n    atomHeader = new ParsableByteArray(Atom.LONG_HEADER_SIZE);\r\n    containerAtoms = new ArrayDeque<>();\r\n    nalStartCode = new ParsableByteArray(NalUnitUtil.NAL_START_CODE);\r\n    nalLength = new ParsableByteArray(4);\r\n    sampleTrackIndex = C.INDEX_UNSET;', 107, NULL, '2019-03-01 03:15:09', '2019-03-01 03:15:09'),
(197, 'buildPsshAtom', 'UUID systemId, @Nullable byte[] data', 'return buildPsshAtom(systemId, null, data);', 108, NULL, '2019-03-01 03:16:09', '2019-03-01 03:16:09'),
(198, 'DefaultOggSeeker', 'long startPosition,       long endPosition,       StreamReader streamReader,       long firstPayloadPageSize,       long firstPayloadPageGranulePosition,       boolean firstPayloadPageIsLastPage', 'Assertions.checkArgument(startPosition >= 0 && endPosition > startPosition);\r\n    this.streamReader = streamReader;\r\n    this.startPosition = startPosition;\r\n    this.endPosition = endPosition;\r\n    if (firstPayloadPageSize == endPosition - startPosition || firstPayloadPageIsLastPage) {\r\n      totalGranules = firstPayloadPageGranulePosition;\r\n      state = STATE_IDLE;\r\n    } else {\r\n      state = STATE_SEEK_TO_END;\r\n    }', 109, NULL, '2019-03-01 03:18:07', '2019-03-01 03:18:07'),
(199, 'skipToNextPage', 'ExtractorInput input', 'if (!skipToNextPage(input, endPosition)) {\r\n      // Not found until eof.\r\n      throw new EOFException();\r\n    }', 109, NULL, '2019-03-01 03:20:16', '2019-03-01 03:20:16'),
(200, 'OggExtractor', NULL, NULL, 110, NULL, '2019-03-01 03:23:20', '2019-03-01 03:23:20'),
(201, 'populate', 'ExtractorInput input', 'Assertions.checkState(input != null);\r\n\r\n    if (populated) {\r\n      populated = false;\r\n      packetArray.reset();\r\n    }\r\n\r\n    while (!populated) {\r\n      if (currentSegmentIndex < 0) {\r\n        // We\'re at the start of a page.\r\n        if (!pageHeader.populate(input, true)) {\r\n          return false;\r\n        }\r\n        int segmentIndex = 0;\r\n        int bytesToSkip = pageHeader.headerSize;\r\n        if ((pageHeader.type & 0x01) == 0x01 && packetArray.limit() == 0) {\r\n          // After seeking, the first packet may be the remainder\r\n          // part of a continued packet which has to be discarded.\r\n          bytesToSkip += calculatePacketSize(segmentIndex);\r\n          segmentIndex += segmentCount;\r\n        }\r\n        input.skipFully(bytesToSkip);\r\n        currentSegmentIndex = segmentIndex;\r\n      }\r\n\r\n      int size = calculatePacketSize(currentSegmentIndex);\r\n      int segmentIndex = currentSegmentIndex + segmentCount;\r\n      if (size > 0) {\r\n        if (packetArray.capacity() < packetArray.limit() + size) {\r\n          packetArray.data = Arrays.copyOf(packetArray.data, packetArray.limit() + size);\r\n        }\r\n        input.readFully(packetArray.data, packetArray.limit(), size);\r\n        packetArray.setLimit(packetArray.limit() + size);\r\n        populated = pageHeader.laces[segmentIndex - 1] != 255;\r\n      }\r\n      // Advance now since we are sure reading didn\'t throw an exception.\r\n      currentSegmentIndex = segmentIndex == pageHeader.pageSegmentCount ? C.INDEX_UNSET\r\n          : segmentIndex;\r\n    }\r\n    return true;', 111, NULL, '2019-03-01 03:29:42', '2019-03-01 03:29:42'),
(202, 'populate', 'ExtractorInput input, boolean quiet', 'scratch.reset();\r\n    reset();\r\n    boolean hasEnoughBytes = input.getLength() == C.LENGTH_UNSET\r\n        || input.getLength() - input.getPeekPosition() >= EMPTY_PAGE_HEADER_SIZE;\r\n    if (!hasEnoughBytes || !input.peekFully(scratch.data, 0, EMPTY_PAGE_HEADER_SIZE, true)) {\r\n      if (quiet) {\r\n        return false;\r\n      } else {\r\n        throw new EOFException();\r\n      }\r\n    }\r\n    if (scratch.readUnsignedInt() != TYPE_OGGS) {\r\n      if (quiet) {\r\n        return false;\r\n      } else {\r\n        throw new ParserException(\"expected OggS capture pattern at begin of page\");\r\n      }\r\n    }\r\n\r\n    revision = scratch.readUnsignedByte();\r\n    if (revision != 0x00) {\r\n      if (quiet) {\r\n        return false;\r\n      } else {\r\n        throw new ParserException(\"unsupported bit stream revision\");\r\n      }\r\n    }\r\n    type = scratch.readUnsignedByte();\r\n\r\n    granulePosition = scratch.readLittleEndianLong();\r\n    streamSerialNumber = scratch.readLittleEndianUnsignedInt();\r\n    pageSequenceNumber = scratch.readLittleEndianUnsignedInt();\r\n    pageChecksum = scratch.readLittleEndianUnsignedInt();\r\n    pageSegmentCount = scratch.readUnsignedByte();\r\n    headerSize = EMPTY_PAGE_HEADER_SIZE + pageSegmentCount;\r\n\r\n    // calculate total size of header including laces\r\n    scratch.reset();\r\n    input.peekFully(scratch.data, 0, pageSegmentCount);\r\n    for (int i = 0; i < pageSegmentCount; i++) {\r\n      laces[i] = scratch.readUnsignedByte();\r\n      bodySize += laces[i];\r\n    }\r\n\r\n    return true;', 112, NULL, '2019-03-01 03:35:07', '2019-03-01 03:35:07'),
(203, 'readBit', NULL, 'boolean returnValue = (((data[byteOffset] & 0xFF) >> bitOffset) & 0x01) == 1;\r\n    skipBits(1);\r\n    return returnValue;', 113, NULL, '2019-03-01 03:37:29', '2019-03-01 03:37:29'),
(204, 'skipBits', 'int numBits', 'int numBytes = numBits / 8;\r\n    byteOffset += numBytes;\r\n    bitOffset += numBits - (numBytes * 8);\r\n    if (bitOffset > 7) {\r\n      byteOffset++;\r\n      bitOffset -= 8;\r\n    }\r\n    assertValidOffset();', 113, NULL, '2019-03-01 03:37:49', '2019-03-01 03:37:49'),
(205, 'getPosition', NULL, 'return byteOffset * 8 + bitOffset;', 113, NULL, '2019-03-01 03:38:07', '2019-03-01 03:38:07'),
(206, 'setPosition', 'int position', 'byteOffset = position / 8;\r\n    bitOffset = position - (byteOffset * 8);\r\n    assertValidOffset();', 113, NULL, '2019-03-01 03:38:30', '2019-03-01 03:38:30'),
(207, 'readBits', 'int numBits', 'int tempByteOffset = byteOffset;\r\n    int bitsRead = Math.min(numBits, 8 - bitOffset);\r\n    int returnValue = ((data[tempByteOffset++] & 0xFF) >> bitOffset) & (0xFF >> (8 - bitsRead));\r\n    while (bitsRead < numBits) {\r\n      returnValue |= (data[tempByteOffset++] & 0xFF) << bitsRead;\r\n      bitsRead += 8;\r\n    }\r\n    returnValue &= 0xFFFFFFFF >>> (32 - numBits);\r\n    skipBits(numBits);\r\n    return returnValue;', 113, NULL, '2019-03-01 03:39:15', '2019-03-01 03:39:15'),
(208, 'readBits', 'byte src, int length, int leastSignificantBitIndex', 'return (src >> leastSignificantBitIndex) & (255 >>> (8 - length));', 114, NULL, '2019-03-01 03:43:41', '2019-03-01 03:43:41'),
(209, 'appendNumberOfSamples', 'ParsableByteArray buffer,       long packetSampleCount', 'buffer.setLimit(buffer.limit() + 4);\r\n    // The vorbis decoder expects the number of samples in the packet\r\n    // to be appended to the audio data as an int32\r\n    buffer.data[buffer.limit() - 4] = (byte) (packetSampleCount & 0xFF);\r\n    buffer.data[buffer.limit() - 3] = (byte) ((packetSampleCount >>> 8) & 0xFF);\r\n    buffer.data[buffer.limit() - 2] = (byte) ((packetSampleCount >>> 16) & 0xFF);\r\n    buffer.data[buffer.limit() - 1] = (byte) ((packetSampleCount >>> 24) & 0xFF);', 114, NULL, '2019-03-01 03:43:58', '2019-03-01 03:43:58'),
(210, 'readSetupHeaders', 'ParsableByteArray scratch', 'if (vorbisIdHeader == null) {\r\n      vorbisIdHeader = VorbisUtil.readVorbisIdentificationHeader(scratch);\r\n      return null;\r\n    }\r\n\r\n    if (commentHeader == null) {\r\n      commentHeader = VorbisUtil.readVorbisCommentHeader(scratch);\r\n      return null;\r\n    }\r\n\r\n    // the third packet contains the setup header\r\n    byte[] setupHeaderData = new byte[scratch.limit()];\r\n    // raw data of vorbis setup header has to be passed to decoder as CSD buffer #2\r\n    System.arraycopy(scratch.data, 0, setupHeaderData, 0, scratch.limit());\r\n    // partially decode setup header to get the modes\r\n    Mode[] modes = VorbisUtil.readVorbisModes(scratch, vorbisIdHeader.channels);\r\n    // we need the ilog of modes all the time when extracting, so we compute it once\r\n    int iLogModes = VorbisUtil.iLog(modes.length - 1);\r\n\r\n    return new VorbisSetup(vorbisIdHeader, commentHeader, setupHeaderData, modes, iLogModes);', 114, NULL, '2019-03-01 03:45:08', '2019-03-01 03:45:08'),
(211, 'iLog', 'int x', 'int val = 0;\r\n    while (x > 0) {\r\n      val++;\r\n      x >>>= 1;\r\n    }\r\n    return val;', 115, NULL, '2019-03-01 03:49:50', '2019-03-01 03:49:50'),
(212, 'readVorbisIdentificationHeader', 'ParsableByteArray headerData', 'verifyVorbisHeaderCapturePattern(0x01, headerData, false);\r\n\r\n    long version = headerData.readLittleEndianUnsignedInt();\r\n    int channels = headerData.readUnsignedByte();\r\n    long sampleRate = headerData.readLittleEndianUnsignedInt();\r\n    int bitrateMax = headerData.readLittleEndianInt();\r\n    int bitrateNominal = headerData.readLittleEndianInt();\r\n    int bitrateMin = headerData.readLittleEndianInt();\r\n\r\n    int blockSize = headerData.readUnsignedByte();\r\n    int blockSize0 = (int) Math.pow(2, blockSize & 0x0F);\r\n    int blockSize1 = (int) Math.pow(2, (blockSize & 0xF0) >> 4);\r\n\r\n    boolean framingFlag = (headerData.readUnsignedByte() & 0x01) > 0;\r\n    // raw data of vorbis setup header has to be passed to decoder as CSD buffer #1\r\n    byte[] data = Arrays.copyOf(headerData.data, headerData.limit());\r\n\r\n    return new VorbisIdHeader(version, channels, sampleRate, bitrateMax, bitrateNominal, bitrateMin,\r\n        blockSize0, blockSize1, framingFlag, data);', 115, NULL, '2019-03-01 03:50:44', '2019-03-01 03:50:44'),
(213, 'readVorbisCommentHeader', 'ParsableByteArray headerData', 'verifyVorbisHeaderCapturePattern(0x03, headerData, false);\r\n    int length = 7;\r\n\r\n    int len = (int) headerData.readLittleEndianUnsignedInt();\r\n    length += 4;\r\n    String vendor = headerData.readString(len);\r\n    length += vendor.length();\r\n\r\n    long commentListLen = headerData.readLittleEndianUnsignedInt();\r\n    String[] comments = new String[(int) commentListLen];\r\n    length += 4;\r\n    for (int i = 0; i < commentListLen; i++) {\r\n      len = (int) headerData.readLittleEndianUnsignedInt();\r\n      length += 4;\r\n      comments[i] = headerData.readString(len);\r\n      length += comments[i].length();\r\n    }\r\n    if ((headerData.readUnsignedByte() & 0x01) == 0) {\r\n      throw new ParserException(\"framing bit expected to be set\");\r\n    }\r\n    length += 1;\r\n    return new CommentHeader(vendor, comments, length);', 115, NULL, '2019-03-01 03:51:08', '2019-03-01 03:51:08'),
(214, 'readVorbisModes', 'ParsableByteArray headerData, int channels', 'verifyVorbisHeaderCapturePattern(0x05, headerData, false);\r\n\r\n    int numberOfBooks = headerData.readUnsignedByte() + 1;\r\n\r\n    VorbisBitArray bitArray  = new VorbisBitArray(headerData.data);\r\n    bitArray.skipBits(headerData.getPosition() * 8);\r\n\r\n    for (int i = 0; i < numberOfBooks; i++) {\r\n      readBook(bitArray);\r\n    }\r\n\r\n    int timeCount = bitArray.readBits(6) + 1;\r\n    for (int i = 0; i < timeCount; i++) {\r\n      if (bitArray.readBits(16) != 0x00) {\r\n        throw new ParserException(\"placeholder of time domain transforms not zeroed out\");\r\n      }\r\n    }\r\n    readFloors(bitArray);\r\n    readResidues(bitArray);\r\n    readMappings(channels, bitArray);\r\n\r\n    Mode[] modes = readModes(bitArray);\r\n    if (!bitArray.readBit()) {\r\n      throw new ParserException(\"framing bit after modes not set as expected\");\r\n    }\r\n    return modes;', 115, NULL, '2019-03-01 03:51:25', '2019-03-01 03:51:25'),
(215, 'verifyVorbisHeaderCapturePattern', 'int headerType, ParsableByteArray header,       boolean quiet', 'if (header.bytesLeft() < 7) {\r\n      if (quiet) {\r\n        return false;\r\n      } else {\r\n        throw new ParserException(\"too short header: \" + header.bytesLeft());\r\n      }\r\n    }\r\n\r\n    if (header.readUnsignedByte() != headerType) {\r\n      if (quiet) {\r\n        return false;\r\n      } else {\r\n        throw new ParserException(\"expected header type \" + Integer.toHexString(headerType));\r\n      }\r\n    }\r\n\r\n    if (!(header.readUnsignedByte() == \'v\'\r\n        && header.readUnsignedByte() == \'o\'\r\n        && header.readUnsignedByte() == \'r\'\r\n        && header.readUnsignedByte() == \'b\'\r\n        && header.readUnsignedByte() == \'i\'\r\n        && header.readUnsignedByte() == \'s\')) {\r\n      if (quiet) {\r\n        return false;\r\n      } else {\r\n        throw new ParserException(\"expected characters \'vorbis\'\");\r\n      }\r\n    }\r\n    return true;', 115, NULL, '2019-03-01 03:51:48', '2019-03-01 03:51:48'),
(216, 'RawCcExtractor', 'Format format', 'this.format = format;\r\n    dataScratch = new ParsableByteArray(SCRATCH_SIZE);\r\n    parserState = STATE_READING_HEADER;', 116, NULL, '2019-03-01 04:10:46', '2019-03-01 04:10:46'),
(217, 'Ac3Extractor', 'long firstSampleTimestampUs', 'this.firstSampleTimestampUs = firstSampleTimestampUs;\r\n    reader = new Ac3Reader();\r\n    sampleData = new ParsableByteArray(MAX_SYNC_FRAME_SIZE);', 117, NULL, '2019-03-01 04:11:45', '2019-03-01 04:11:45'),
(218, 'AdtsExtractor', 'long firstStreamSampleTimestampUs, @Flags int flags', 'is.firstStreamSampleTimestampUs = firstStreamSampleTimestampUs;\r\n    this.firstSampleTimestampUs = firstStreamSampleTimestampUs;\r\n    this.flags = flags;\r\n    reader = new AdtsReader(true);\r\n    packetBuffer = new ParsableByteArray(MAX_PACKET_SIZE);\r\n    averageFrameSize = C.LENGTH_UNSET;\r\n    firstFramePosition = C.POSITION_UNSET;\r\n    scratch = new ParsableByteArray(10);\r\n    scratchBits = new ParsableBitArray(scratch.data);', 118, NULL, '2019-03-01 03:25:49', '2019-03-01 03:26:12'),
(219, 'consume', 'ParsableByteArray data', 'while (data.bytesLeft() > 0) {\r\n      switch (state) {\r\n        case STATE_FINDING_SAMPLE:\r\n          findNextSample(data);\r\n          break;\r\n        case STATE_READING_ID3_HEADER:\r\n          if (continueRead(data, id3HeaderBuffer.data, ID3_HEADER_SIZE)) {\r\n            parseId3Header();\r\n          }\r\n          break;\r\n        case STATE_CHECKING_ADTS_HEADER:\r\n          checkAdtsHeader(data);\r\n          break;\r\n        case STATE_READING_ADTS_HEADER:\r\n          int targetLength = hasCrc ? HEADER_SIZE + CRC_SIZE : HEADER_SIZE;\r\n          if (continueRead(data, adtsScratch.data, targetLength)) {\r\n            parseAdtsHeader();\r\n          }\r\n          break;\r\n        case STATE_READING_SAMPLE:\r\n          readSample(data);\r\n          break;\r\n        default:\r\n          throw new IllegalStateException();\r\n      }\r\n    }', 119, NULL, '2019-03-01 03:37:52', '2019-03-01 03:37:52'),
(220, 'isDurationReadFinished', NULL, 'return isDurationRead;', 120, NULL, '2019-03-01 05:28:37', '2019-03-01 05:28:37'),
(221, 'readDuration', 'ExtractorInput input, PositionHolder seekPositionHolder', 'if (!isLastScrValueRead) {\r\n      return readLastScrValue(input, seekPositionHolder);\r\n    }\r\n    if (lastScrValue == C.TIME_UNSET) {\r\n      return finishReadDuration(input);\r\n    }\r\n    if (!isFirstScrValueRead) {\r\n      return readFirstScrValue(input, seekPositionHolder);\r\n    }\r\n    if (firstScrValue == C.TIME_UNSET) {\r\n      return finishReadDuration(input);\r\n    }\r\n\r\n    long minScrPositionUs = scrTimestampAdjuster.adjustTsTimestamp(firstScrValue);\r\n    long maxScrPositionUs = scrTimestampAdjuster.adjustTsTimestamp(lastScrValue);\r\n    durationUs = maxScrPositionUs - minScrPositionUs;\r\n    return finishReadDuration(input);', 120, NULL, '2019-03-01 05:29:38', '2019-03-01 05:29:38');
INSERT INTO `source_codes` (`id`, `method_name`, `method_params`, `method_body`, `source_code_class_id`, `deleted_at`, `created_at`, `updated_at`) VALUES
(222, 'read', 'ExtractorInput input, PositionHolder seekPosition', 'long inputLength = input.getLength();\r\n    boolean canReadDuration = inputLength != C.LENGTH_UNSET;\r\n    if (canReadDuration && !durationReader.isDurationReadFinished()) {\r\n      return durationReader.readDuration(input, seekPosition);\r\n    }\r\n    maybeOutputSeekMap(inputLength);\r\n    if (psBinarySearchSeeker != null && psBinarySearchSeeker.isSeeking()) {\r\n      return psBinarySearchSeeker.handlePendingSeek(\r\n          input, seekPosition, /* outputFrameHolder= */ null);\r\n    }\r\n\r\n    input.resetPeekPosition();\r\n    long peekBytesLeft =\r\n        inputLength != C.LENGTH_UNSET ? inputLength - input.getPeekPosition() : C.LENGTH_UNSET;\r\n    if (peekBytesLeft != C.LENGTH_UNSET && peekBytesLeft < 4) {\r\n      return RESULT_END_OF_INPUT;\r\n    }\r\n    // First peek and check what type of start code is next.\r\n    if (!input.peekFully(psPacketBuffer.data, 0, 4, true)) {\r\n      return RESULT_END_OF_INPUT;\r\n    }\r\n\r\n    psPacketBuffer.setPosition(0);\r\n    int nextStartCode = psPacketBuffer.readInt();\r\n    if (nextStartCode == MPEG_PROGRAM_END_CODE) {\r\n      return RESULT_END_OF_INPUT;\r\n    } else if (nextStartCode == PACK_START_CODE) {\r\n      // Now peek the rest of the pack_header.\r\n      input.peekFully(psPacketBuffer.data, 0, 10);\r\n\r\n      // We only care about the pack_stuffing_length in here, skip the first 77 bits.\r\n      psPacketBuffer.setPosition(9);\r\n\r\n      // Last 3 bits is the length.\r\n      int packStuffingLength = psPacketBuffer.readUnsignedByte() & 0x07;\r\n\r\n      // Now skip the stuffing and the pack header.\r\n      input.skipFully(packStuffingLength + 14);\r\n      return RESULT_CONTINUE;\r\n    } else if (nextStartCode == SYSTEM_HEADER_START_CODE) {\r\n      // We just skip all this, but we need to get the length first.\r\n      input.peekFully(psPacketBuffer.data, 0, 2);\r\n\r\n      // Length is the next 2 bytes.\r\n      psPacketBuffer.setPosition(0);\r\n      int systemHeaderLength = psPacketBuffer.readUnsignedShort();\r\n      input.skipFully(systemHeaderLength + 6);\r\n      return RESULT_CONTINUE;\r\n    } else if (((nextStartCode & 0xFFFFFF00) >> 8) != PACKET_START_CODE_PREFIX) {\r\n      input.skipFully(1);  // Skip bytes until we see a valid start code again.\r\n      return RESULT_CONTINUE;\r\n    }\r\n\r\n    // We\'re at the start of a regular PES packet now.\r\n    // Get the stream ID off the last byte of the start code.\r\n    int streamId = nextStartCode & 0xFF;\r\n\r\n    // Check to see if we have this one in our map yet, and if not, then add it.\r\n    PesReader payloadReader = psPayloadReaders.get(streamId);\r\n    if (!foundAllTracks) {\r\n      if (payloadReader == null) {\r\n        ElementaryStreamReader elementaryStreamReader = null;\r\n        if (streamId == PRIVATE_STREAM_1) {\r\n          // Private stream, used for AC3 audio.\r\n          // NOTE: This may need further parsing to determine if its DTS, but that\'s likely only\r\n          // valid for DVDs.\r\n          elementaryStreamReader = new Ac3Reader();\r\n          foundAudioTrack = true;\r\n          lastTrackPosition = input.getPosition();\r\n        } else if ((streamId & AUDIO_STREAM_MASK) == AUDIO_STREAM) {\r\n          elementaryStreamReader = new MpegAudioReader();\r\n          foundAudioTrack = true;\r\n          lastTrackPosition = input.getPosition();\r\n        } else if ((streamId & VIDEO_STREAM_MASK) == VIDEO_STREAM) {\r\n          elementaryStreamReader = new H262Reader();\r\n          foundVideoTrack = true;\r\n          lastTrackPosition = input.getPosition();\r\n        }\r\n        if (elementaryStreamReader != null) {\r\n          TrackIdGenerator idGenerator = new TrackIdGenerator(streamId, MAX_STREAM_ID_PLUS_ONE);\r\n          elementaryStreamReader.createTracks(output, idGenerator);\r\n          payloadReader = new PesReader(elementaryStreamReader, timestampAdjuster);\r\n          psPayloadReaders.put(streamId, payloadReader);\r\n        }\r\n      }\r\n      long maxSearchPosition =\r\n          foundAudioTrack && foundVideoTrack\r\n              ? lastTrackPosition + MAX_SEARCH_LENGTH_AFTER_AUDIO_AND_VIDEO_FOUND\r\n              : MAX_SEARCH_LENGTH;\r\n      if (input.getPosition() > maxSearchPosition) {\r\n        foundAllTracks = true;\r\n        output.endTracks();\r\n      }\r\n    }\r\n\r\n    // The next 2 bytes are the length. Once we have that we can consume the complete packet.\r\n    input.peekFully(psPacketBuffer.data, 0, 2);\r\n    psPacketBuffer.setPosition(0);\r\n    int payloadLength = psPacketBuffer.readUnsignedShort();\r\n    int pesLength = payloadLength + 6;\r\n\r\n    if (payloadReader == null) {\r\n      // Just skip this data.\r\n      input.skipFully(pesLength);\r\n    } else {\r\n      psPacketBuffer.reset(pesLength);\r\n      // Read the whole packet and the header for consumption.\r\n      input.readFully(psPacketBuffer.data, 0, pesLength);\r\n      psPacketBuffer.setPosition(6);\r\n      payloadReader.consume(psPacketBuffer);\r\n      psPacketBuffer.setLimit(psPacketBuffer.capacity());\r\n    }\r\n\r\n    return RESULT_CONTINUE;', 121, NULL, '2019-03-01 05:32:32', '2019-03-01 05:32:32'),
(223, 'PsExtractor', 'TimestampAdjuster timestampAdjuster', 'this.timestampAdjuster = timestampAdjuster;\r\n    psPacketBuffer = new ParsableByteArray(4096);\r\n    psPayloadReaders = new SparseArray<>();\r\n    durationReader = new PsDurationReader();', 121, NULL, '2019-03-01 07:22:40', '2019-03-01 07:22:40'),
(224, 'consume', 'ParsableByteArray data, @Flags int flags', 'boolean payloadUnitStartIndicator = (flags & FLAG_PAYLOAD_UNIT_START_INDICATOR) != 0;\r\n    int payloadStartPosition = C.POSITION_UNSET;\r\n    if (payloadUnitStartIndicator) {\r\n      int payloadStartOffset = data.readUnsignedByte();\r\n      payloadStartPosition = data.getPosition() + payloadStartOffset;\r\n    }\r\n\r\n    if (waitingForPayloadStart) {\r\n      if (!payloadUnitStartIndicator) {\r\n        return;\r\n      }\r\n      waitingForPayloadStart = false;\r\n      data.setPosition(payloadStartPosition);\r\n      bytesRead = 0;\r\n    }\r\n\r\n    while (data.bytesLeft() > 0) {\r\n      if (bytesRead < SECTION_HEADER_LENGTH) {\r\n        // Note: see ISO/IEC 13818-1, section 2.4.4.3 for detailed information on the format of\r\n        // the header.\r\n        if (bytesRead == 0) {\r\n          int tableId = data.readUnsignedByte();\r\n          data.setPosition(data.getPosition() - 1);\r\n          if (tableId == 0xFF /* forbidden value */) {\r\n            // No more sections in this ts packet.\r\n            waitingForPayloadStart = true;\r\n            return;\r\n          }\r\n        }\r\n        int headerBytesToRead = Math.min(data.bytesLeft(), SECTION_HEADER_LENGTH - bytesRead);\r\n        data.readBytes(sectionData.data, bytesRead, headerBytesToRead);\r\n        bytesRead += headerBytesToRead;\r\n        if (bytesRead == SECTION_HEADER_LENGTH) {\r\n          sectionData.reset(SECTION_HEADER_LENGTH);\r\n          sectionData.skipBytes(1); // Skip table id (8).\r\n          int secondHeaderByte = sectionData.readUnsignedByte();\r\n          int thirdHeaderByte = sectionData.readUnsignedByte();\r\n          sectionSyntaxIndicator = (secondHeaderByte & 0x80) != 0;\r\n          totalSectionLength =\r\n              (((secondHeaderByte & 0x0F) << 8) | thirdHeaderByte) + SECTION_HEADER_LENGTH;\r\n          if (sectionData.capacity() < totalSectionLength) {\r\n            // Ensure there is enough space to keep the whole section.\r\n            byte[] bytes = sectionData.data;\r\n            sectionData.reset(\r\n                Math.min(MAX_SECTION_LENGTH, Math.max(totalSectionLength, bytes.length * 2)));\r\n            System.arraycopy(bytes, 0, sectionData.data, 0, SECTION_HEADER_LENGTH);\r\n          }\r\n        }\r\n      } else {\r\n        // Reading the body.\r\n        int bodyBytesToRead = Math.min(data.bytesLeft(), totalSectionLength - bytesRead);\r\n        data.readBytes(sectionData.data, bytesRead, bodyBytesToRead);\r\n        bytesRead += bodyBytesToRead;\r\n        if (bytesRead == totalSectionLength) {\r\n          if (sectionSyntaxIndicator) {\r\n            // This section has common syntax as defined in ISO/IEC 13818-1, section 2.4.4.11.\r\n            if (Util.crc(sectionData.data, 0, totalSectionLength, 0xFFFFFFFF) != 0) {\r\n              // The CRC is invalid so discard the section.\r\n              waitingForPayloadStart = true;\r\n              return;\r\n            }\r\n            sectionData.reset(totalSectionLength - 4); // Exclude the CRC_32 field.\r\n          } else {\r\n            // This is a private section with private defined syntax.\r\n            sectionData.reset(totalSectionLength);\r\n          }\r\n          reader.consume(sectionData);\r\n          bytesRead = 0;\r\n        }\r\n      }\r\n    }', 123, NULL, '2019-03-01 07:23:46', '2019-03-01 07:23:46'),
(225, 'seek', NULL, 'waitingForPayloadStart = true;', 123, NULL, '2019-03-01 07:27:04', '2019-03-01 07:27:04'),
(226, 'isDurationReadFinished', NULL, 'return isDurationRead;', 124, NULL, '2019-03-01 07:29:03', '2019-03-01 07:29:23'),
(227, 'getDurationUs', NULL, 'return durationUs;', 124, NULL, '2019-03-01 07:30:13', '2019-03-01 07:30:13'),
(228, 'read', 'ExtractorInput input, PositionHolder seekPosition', 'long inputLength = input.getLength();\r\n    if (tracksEnded) {\r\n      boolean canReadDuration = inputLength != C.LENGTH_UNSET && mode != MODE_HLS;\r\n      if (canReadDuration && !durationReader.isDurationReadFinished()) {\r\n        return durationReader.readDuration(input, seekPosition, pcrPid);\r\n      }\r\n      maybeOutputSeekMap(inputLength);\r\n\r\n      if (pendingSeekToStart) {\r\n        pendingSeekToStart = false;\r\n        seek(/* position= */ 0, /* timeUs= */ 0);\r\n        if (input.getPosition() != 0) {\r\n          seekPosition.position = 0;\r\n          return RESULT_SEEK;\r\n        }\r\n      }\r\n\r\n      if (tsBinarySearchSeeker != null && tsBinarySearchSeeker.isSeeking()) {\r\n        return tsBinarySearchSeeker.handlePendingSeek(\r\n            input, seekPosition, /* outputFrameHolder= */ null);\r\n      }\r\n    }\r\n\r\n    if (!fillBufferWithAtLeastOnePacket(input)) {\r\n      return RESULT_END_OF_INPUT;\r\n    }\r\n\r\n    int endOfPacket = findEndOfFirstTsPacketInBuffer();\r\n    int limit = tsPacketBuffer.limit();\r\n    if (endOfPacket > limit) {\r\n      return RESULT_CONTINUE;\r\n    }\r\n\r\n    @TsPayloadReader.Flags int packetHeaderFlags = 0;\r\n\r\n    // Note: See ISO/IEC 13818-1, section 2.4.3.2 for details of the header format.\r\n    int tsPacketHeader = tsPacketBuffer.readInt();\r\n    if ((tsPacketHeader & 0x800000) != 0) { // transport_error_indicator\r\n      // There are uncorrectable errors in this packet.\r\n      tsPacketBuffer.setPosition(endOfPacket);\r\n      return RESULT_CONTINUE;\r\n    }\r\n    packetHeaderFlags |= (tsPacketHeader & 0x400000) != 0 ? FLAG_PAYLOAD_UNIT_START_INDICATOR : 0;\r\n    // Ignoring transport_priority (tsPacketHeader & 0x200000)\r\n    int pid = (tsPacketHeader & 0x1FFF00) >> 8;\r\n    // Ignoring transport_scrambling_control (tsPacketHeader & 0xC0)\r\n    boolean adaptationFieldExists = (tsPacketHeader & 0x20) != 0;\r\n    boolean payloadExists = (tsPacketHeader & 0x10) != 0;\r\n\r\n    TsPayloadReader payloadReader = payloadExists ? tsPayloadReaders.get(pid) : null;\r\n    if (payloadReader == null) {\r\n      tsPacketBuffer.setPosition(endOfPacket);\r\n      return RESULT_CONTINUE;\r\n    }\r\n\r\n    // Discontinuity check.\r\n    if (mode != MODE_HLS) {\r\n      int continuityCounter = tsPacketHeader & 0xF;\r\n      int previousCounter = continuityCounters.get(pid, continuityCounter - 1);\r\n      continuityCounters.put(pid, continuityCounter);\r\n      if (previousCounter == continuityCounter) {\r\n        // Duplicate packet found.\r\n        tsPacketBuffer.setPosition(endOfPacket);\r\n        return RESULT_CONTINUE;\r\n      } else if (continuityCounter != ((previousCounter + 1) & 0xF)) {\r\n        // Discontinuity found.\r\n        payloadReader.seek();\r\n      }\r\n    }\r\n\r\n    // Skip the adaptation field.\r\n    if (adaptationFieldExists) {\r\n      int adaptationFieldLength = tsPacketBuffer.readUnsignedByte();\r\n      int adaptationFieldFlags = tsPacketBuffer.readUnsignedByte();\r\n\r\n      packetHeaderFlags |=\r\n          (adaptationFieldFlags & 0x40) != 0 // random_access_indicator.\r\n              ? TsPayloadReader.FLAG_RANDOM_ACCESS_INDICATOR\r\n              : 0;\r\n      tsPacketBuffer.skipBytes(adaptationFieldLength - 1 /* flags */);\r\n    }\r\n\r\n    // Read the payload.\r\n    boolean wereTracksEnded = tracksEnded;\r\n    if (shouldConsumePacketPayload(pid)) {\r\n      tsPacketBuffer.setLimit(endOfPacket);\r\n      payloadReader.consume(tsPacketBuffer, packetHeaderFlags);\r\n      tsPacketBuffer.setLimit(limit);\r\n    }\r\n    if (mode != MODE_HLS && !wereTracksEnded && tracksEnded && inputLength != C.LENGTH_UNSET) {\r\n      // We have read all tracks from all PMTs in this non-live stream. Now seek to the beginning\r\n      // and read again to make sure we output all media, including any contained in packets prior\r\n      // to those containing the track information.\r\n      pendingSeekToStart = true;\r\n    }\r\n\r\n    tsPacketBuffer.setPosition(endOfPacket);\r\n    return RESULT_CONTINUE;', 124, NULL, '2019-03-01 07:38:22', '2019-03-01 07:38:22'),
(229, 'TsExtractor', '@Mode int mode,       TimestampAdjuster timestampAdjuster,       TsPayloadReader.Factory payloadReaderFactory', 'this.payloadReaderFactory = Assertions.checkNotNull(payloadReaderFactory);\r\n    this.mode = mode;\r\n    if (mode == MODE_SINGLE_PMT || mode == MODE_HLS) {\r\n      timestampAdjusters = Collections.singletonList(timestampAdjuster);\r\n    } else {\r\n      timestampAdjusters = new ArrayList<>();\r\n      timestampAdjusters.add(timestampAdjuster);\r\n    }\r\n    tsPacketBuffer = new ParsableByteArray(new byte[BUFFER_SIZE], 0);\r\n    trackIds = new SparseBooleanArray();\r\n    trackPids = new SparseBooleanArray();\r\n    tsPayloadReaders = new SparseArray<>();\r\n    continuityCounters = new SparseIntArray();\r\n    durationReader = new TsDurationReader();\r\n    pcrPid = -1;\r\n    resetPayloadReaders();', 125, NULL, '2019-03-01 07:41:44', '2019-03-01 07:41:44'),
(230, 'WavExtractor', NULL, NULL, 126, NULL, '2019-03-01 08:27:17', '2019-03-01 08:27:17'),
(231, 'isSeekable', NULL, 'return dataSize != C.LENGTH_UNSET;', 127, NULL, '2019-03-01 08:28:15', '2019-03-01 08:28:15'),
(232, 'getSeekPoints', 'long timeUs', 'if (dataSize == C.LENGTH_UNSET) {\r\n      return new SeekPoints(new SeekPoint(0, firstFrameBytePosition));\r\n    }\r\n    long seekFramePosition = getFramePositionForTimeUs(timeUs);\r\n    long seekTimeUs = getTimeUsAtPosition(seekFramePosition);\r\n    SeekPoint seekPoint = new SeekPoint(seekTimeUs, seekFramePosition);\r\n    if (seekTimeUs >= timeUs || seekFramePosition + frameSize >= inputLength) {\r\n      return new SeekPoints(seekPoint);\r\n    } else {\r\n      long secondSeekPosition = seekFramePosition + frameSize;\r\n      long secondSeekTimeUs = getTimeUsAtPosition(secondSeekPosition);\r\n      SeekPoint secondSeekPoint = new SeekPoint(secondSeekTimeUs, secondSeekPosition);\r\n      return new SeekPoints(seekPoint, secondSeekPoint);\r\n    }', 127, NULL, '2019-03-01 08:32:00', '2019-03-01 08:32:00'),
(233, 'getDurationUs', NULL, 'return durationUs;', 127, NULL, '2019-03-01 08:32:41', '2019-03-01 08:32:41'),
(234, 'getTimeUsAtPosition', 'long position', 'return getTimeUsAtPosition(position, firstFrameBytePosition, bitrate);', 127, NULL, '2019-03-01 08:34:54', '2019-03-01 08:34:54'),
(235, 'read', 'byte[] target, int offset, int length', 'int bytesRead = readFromPeekBuffer(target, offset, length);\r\n    if (bytesRead == 0) {\r\n      bytesRead = readFromDataSource(target, offset, length, 0, true);\r\n    }\r\n    commitBytesRead(bytesRead);\r\n    return bytesRead;', 128, NULL, '2019-03-01 12:29:55', '2019-03-01 12:29:55'),
(236, 'getPosition', NULL, 'return position;', 128, NULL, '2019-03-01 12:30:39', '2019-03-01 12:30:39'),
(237, 'readFully', 'byte[] target, int offset, int length, boolean allowEndOfInput', 'int bytesRead = readFromPeekBuffer(target, offset, length);\r\n    while (bytesRead < length && bytesRead != C.RESULT_END_OF_INPUT) {\r\n      bytesRead = readFromDataSource(target, offset, length, bytesRead, allowEndOfInput);\r\n    }\r\n    commitBytesRead(bytesRead);\r\n    return bytesRead != C.RESULT_END_OF_INPUT;', 128, NULL, '2019-03-01 12:34:08', '2019-03-01 12:34:08'),
(238, 'skip', 'int length', 'int bytesSkipped = skipFromPeekBuffer(length);\r\n    if (bytesSkipped == 0) {\r\n      bytesSkipped =\r\n          readFromDataSource(scratchSpace, 0, Math.min(length, scratchSpace.length), 0, true);\r\n    }\r\n    commitBytesRead(bytesSkipped);\r\n    return bytesSkipped;', 128, NULL, '2019-03-01 12:36:30', '2019-03-01 12:36:30'),
(239, 'skipFully', 'int length, boolean allowEndOfInput', 'int bytesSkipped = skipFromPeekBuffer(length);\r\n    while (bytesSkipped < length && bytesSkipped != C.RESULT_END_OF_INPUT) {\r\n      int minLength = Math.min(length, bytesSkipped + scratchSpace.length);\r\n      bytesSkipped =\r\n          readFromDataSource(scratchSpace, -bytesSkipped, minLength, bytesSkipped, allowEndOfInput);\r\n    }\r\n    commitBytesRead(bytesSkipped);\r\n    return bytesSkipped != C.RESULT_END_OF_INPUT;', 128, NULL, '2019-03-01 12:37:50', '2019-03-01 12:37:50'),
(240, 'peekFully', 'byte[] target, int offset, int length, boolean allowEndOfInput', 'if (!advancePeekPosition(length, allowEndOfInput)) {\r\n      return false;\r\n    }\r\n    System.arraycopy(peekBuffer, peekBufferPosition - length, target, offset, length);\r\n    return true;', 128, NULL, '2019-03-01 12:41:25', '2019-03-01 12:41:25'),
(241, 'resetPeekPosition', NULL, 'peekBufferPosition = 0;', 128, NULL, '2019-03-01 12:43:10', '2019-03-01 12:43:10'),
(242, 'createExtractors', NULL, 'Extractor[] extractors = new Extractor[FLAC_EXTRACTOR_CONSTRUCTOR == null ? 12 : 13];\r\n    extractors[0] = new MatroskaExtractor(matroskaFlags);\r\n    extractors[1] = new FragmentedMp4Extractor(fragmentedMp4Flags);\r\n    extractors[2] = new Mp4Extractor(mp4Flags);\r\n    extractors[3] =\r\n        new Mp3Extractor(\r\n            mp3Flags\r\n                | (constantBitrateSeekingEnabled\r\n                    ? Mp3Extractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING\r\n                    : 0));\r\n    extractors[4] =\r\n        new AdtsExtractor(\r\n            /* firstStreamSampleTimestampUs= */ 0,\r\n            adtsFlags\r\n                | (constantBitrateSeekingEnabled\r\n                    ? AdtsExtractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING\r\n                    : 0));\r\n    extractors[5] = new Ac3Extractor();\r\n    extractors[6] = new TsExtractor(tsMode, tsFlags);\r\n    extractors[7] = new FlvExtractor();\r\n    extractors[8] = new OggExtractor();\r\n    extractors[9] = new PsExtractor();\r\n    extractors[10] = new WavExtractor();\r\n    extractors[11] =\r\n        new AmrExtractor(\r\n            amrFlags\r\n                | (constantBitrateSeekingEnabled\r\n                    ? AmrExtractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING\r\n                    : 0));\r\n    if (FLAC_EXTRACTOR_CONSTRUCTOR != null) {\r\n      try {\r\n        extractors[12] = FLAC_EXTRACTOR_CONSTRUCTOR.newInstance();\r\n      } catch (Exception e) {\r\n        // Should never happen.\r\n        throw new IllegalStateException(\"Unexpected error creating FLAC extractor\", e);\r\n      }\r\n    }\r\n    return extractors;', 129, NULL, '2019-03-04 04:03:00', '2019-03-04 04:03:00'),
(243, 'peekId3Data', 'ExtractorInput input, @Nullable Id3Decoder.FramePredicate id3FramePredicate', 'int peekedId3Bytes = 0;\r\n    Metadata metadata = null;\r\n    while (true) {\r\n      try {\r\n        input.peekFully(scratch.data, 0, Id3Decoder.ID3_HEADER_LENGTH);\r\n      } catch (EOFException e) {\r\n        // If input has less than ID3_HEADER_LENGTH, ignore the rest.\r\n        break;\r\n      }\r\n      scratch.setPosition(0);\r\n      if (scratch.readUnsignedInt24() != Id3Decoder.ID3_TAG) {\r\n        // Not an ID3 tag.\r\n        break;\r\n      }\r\n      scratch.skipBytes(3); // Skip major version, minor version and flags.\r\n      int framesLength = scratch.readSynchSafeInt();\r\n      int tagLength = Id3Decoder.ID3_HEADER_LENGTH + framesLength;\r\n\r\n      if (metadata == null) {\r\n        byte[] id3Data = new byte[tagLength];\r\n        System.arraycopy(scratch.data, 0, id3Data, 0, Id3Decoder.ID3_HEADER_LENGTH);\r\n        input.peekFully(id3Data, Id3Decoder.ID3_HEADER_LENGTH, framesLength);\r\n\r\n        metadata = new Id3Decoder(id3FramePredicate).decode(id3Data, tagLength);\r\n      } else {\r\n        input.advancePeekPosition(framesLength);\r\n      }\r\n\r\n      peekedId3Bytes += tagLength;\r\n    }\r\n\r\n    input.resetPeekPosition();\r\n    input.advancePeekPosition(peekedId3Bytes);\r\n    return metadata;', 130, NULL, '2019-03-04 04:10:01', '2019-03-04 04:10:01');

-- --------------------------------------------------------

--
-- Table structure for table `source_code_classes`
--

CREATE TABLE `source_code_classes` (
  `id` int(10) UNSIGNED NOT NULL,
  `name` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL,
  `project_id` int(10) UNSIGNED NOT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `source_code_classes`
--

INSERT INTO `source_code_classes` (`id`, `name`, `project_id`, `deleted_at`, `created_at`, `updated_at`) VALUES
(1, 'Acl', 33, NULL, '2019-02-26 18:26:29', '2019-02-26 18:26:29'),
(2, 'MigrationTestHelper', 33, NULL, '2019-02-26 18:48:12', '2019-02-26 18:48:12'),
(3, 'Profile', 33, NULL, '2019-02-26 21:01:41', '2019-02-26 21:01:41'),
(4, 'Subnet', 33, NULL, '2019-02-26 21:07:47', '2019-02-26 21:08:52'),
(6, 'KeyValuePair', 33, NULL, '2019-02-26 21:20:13', '2019-02-26 21:20:13'),
(7, 'PluginOptions', 33, NULL, '2019-02-26 21:22:42', '2019-02-26 21:22:42'),
(8, 'DefaultIntervalMapper', 35, NULL, '2019-02-27 08:27:06', '2019-02-27 08:27:06'),
(9, 'String', 35, NULL, '2019-02-27 08:55:11', '2019-02-27 08:55:11'),
(10, 'FirebaseAuthErrorCodeConverter', 35, NULL, '2019-02-27 08:59:12', '2019-02-27 08:59:12'),
(11, 'RemoveReservationViewModel', 35, NULL, '2019-02-27 09:53:24', '2019-02-27 09:53:24'),
(12, 'MapViewModel', 35, NULL, '2019-02-27 09:55:14', '2019-02-27 09:55:14'),
(13, 'SnackbarMessageManager', 35, NULL, '2019-02-27 09:56:54', '2019-02-27 09:56:54'),
(14, 'OnboardingViewModel', 35, NULL, '2019-02-27 10:16:54', '2019-02-27 10:16:54'),
(15, 'indexAgendaHeaders', 35, NULL, '2019-02-27 10:20:21', '2019-02-27 10:20:21'),
(16, 'indexSessionHeaders', 35, NULL, '2019-02-27 10:22:40', '2019-02-27 10:22:40'),
(17, 'LoadEventFiltersUseCase', 35, NULL, '2019-02-27 10:26:23', '2019-02-27 10:26:23'),
(18, 'ScheduleViewModel', 35, NULL, '2019-02-27 10:49:51', '2019-02-27 10:49:51'),
(19, 'SessionDetailViewModel', 35, NULL, '2019-02-27 11:32:59', '2019-02-27 11:32:59'),
(20, 'FirebaseSignInViewModelDelegate', 35, NULL, '2019-02-27 12:13:39', '2019-02-27 12:13:39'),
(21, 'SignInViewModel', 35, NULL, '2019-02-27 12:18:08', '2019-02-27 12:29:48'),
(22, 'SpeakerViewModel', 35, NULL, '2019-02-27 12:37:29', '2019-02-27 12:37:29'),
(23, 'LaunchViewModel', 35, NULL, '2019-02-27 12:40:02', '2019-02-27 12:40:02'),
(24, 'Serializer', 30, NULL, '2019-02-27 14:07:44', '2019-02-27 14:08:22'),
(25, 'FileManager', 30, NULL, '2019-02-27 14:11:23', '2019-02-27 14:11:23'),
(26, 'UserEntityDataMapper', 30, NULL, '2019-02-27 14:13:49', '2019-02-27 14:13:49'),
(27, 'RepositoryErrorBundle', 30, NULL, '2019-02-27 14:18:31', '2019-02-27 14:18:31'),
(28, 'CloudUserDataStore', 30, NULL, '2019-02-27 14:26:21', '2019-02-27 14:26:21'),
(29, 'DiskUserDataStore', 30, NULL, '2019-02-27 14:28:48', '2019-02-27 14:28:48'),
(30, 'UserDataStoreFactory', 30, NULL, '2019-02-27 14:35:15', '2019-02-27 14:35:15'),
(31, 'UserDataRepository', 30, NULL, '2019-02-27 14:38:07', '2019-02-27 14:38:07'),
(32, 'DefaultErrorBundle', 30, NULL, '2019-02-28 03:20:47', '2019-02-28 03:20:47'),
(33, 'GetUserDetails', 30, NULL, '2019-02-28 03:23:28', '2019-02-28 03:23:28'),
(34, 'GetUserList', 30, NULL, '2019-02-28 03:25:15', '2019-02-28 03:25:15'),
(35, 'UseCaseTestClass', 30, NULL, '2019-02-28 03:27:21', '2019-02-28 03:27:21'),
(36, 'User', 30, NULL, '2019-02-28 03:34:31', '2019-02-28 03:34:31'),
(37, 'ErrorMessageFactory', 30, NULL, '2019-02-28 03:38:04', '2019-02-28 03:38:04'),
(38, 'UserModelDataMapper', 30, NULL, '2019-02-28 03:40:58', '2019-02-28 03:40:58'),
(39, 'UserDetailsPresenter', 30, NULL, '2019-02-28 03:44:03', '2019-02-28 03:44:03'),
(40, 'UserListPresenter', 30, NULL, '2019-02-28 03:45:28', '2019-02-28 03:45:28'),
(41, 'AboutViewModel', 4, NULL, '2019-02-28 04:02:39', '2019-02-28 04:02:39'),
(42, 'SourcesLocalDataSource', 4, NULL, '2019-02-28 04:06:17', '2019-02-28 04:06:17'),
(43, 'LoggedInUserDao', 4, NULL, '2019-02-28 04:17:32', '2019-02-28 04:17:32'),
(44, 'AuthTokenLocalDataSource', 4, NULL, '2019-02-28 04:22:35', '2019-02-28 04:22:35'),
(46, 'LoginLocalDataSource', 4, NULL, '2019-02-28 04:24:37', '2019-02-28 04:24:37'),
(47, 'TextView', 4, NULL, '2019-02-28 04:28:36', '2019-02-28 04:28:36'),
(48, 'SourcesRepository', 4, NULL, '2019-02-28 05:22:02', '2019-02-28 05:22:02'),
(49, 'Converters', 4, NULL, '2019-02-28 07:42:14', '2019-02-28 07:42:14'),
(50, 'DesignerNewsSearchConverter', 4, NULL, '2019-02-28 07:45:14', '2019-02-28 07:45:14'),
(51, 'CommentsRemoteDataSource', 4, NULL, '2019-02-28 07:53:39', '2019-02-28 07:53:39'),
(52, 'CommentsRepository', 4, NULL, '2019-02-28 07:59:11', '2019-02-28 07:59:11'),
(53, 'LoginRemoteDataSource', 4, NULL, '2019-02-28 08:01:43', '2019-02-28 08:01:43'),
(54, 'LoginRepository', 4, NULL, '2019-02-28 08:05:43', '2019-02-28 08:05:43'),
(55, 'StoryResponse', 4, NULL, '2019-02-28 08:13:19', '2019-02-28 08:13:19'),
(56, 'StoriesRemoteDataSource', 4, NULL, '2019-02-28 08:14:55', '2019-02-28 08:14:55'),
(57, 'StoriesRepository', 4, NULL, '2019-02-28 08:18:33', '2019-02-28 08:18:33'),
(59, 'ShotWeigher', 4, NULL, '2019-02-28 08:45:50', '2019-02-28 08:45:50'),
(60, 'DribbbleSearchConverter', 4, NULL, '2019-02-28 08:48:17', '2019-02-28 08:48:17'),
(61, 'SearchRemoteDataSource', 4, NULL, '2019-02-28 08:55:16', '2019-02-28 08:55:16'),
(62, 'ShotsRepository', 4, NULL, '2019-02-28 08:58:01', '2019-02-28 08:58:01'),
(63, 'ProductHuntRemoteDataSource', 4, NULL, '2019-02-28 09:00:32', '2019-02-28 09:00:32'),
(64, 'UserRemoteDataSource', 4, NULL, '2019-02-28 10:08:34', '2019-02-28 10:08:34'),
(65, 'UserRepository', 4, NULL, '2019-02-28 10:11:31', '2019-02-28 10:11:31'),
(66, 'VotesRemoteDataSource', 4, NULL, '2019-02-28 10:15:27', '2019-02-28 10:15:27'),
(67, 'VotesRepository', 4, NULL, '2019-02-28 10:18:38', '2019-02-28 10:18:38'),
(68, 'GetCommentsWithRepliesAndUsersUseCase', 4, NULL, '2019-02-28 10:26:58', '2019-02-28 10:26:58'),
(69, 'GetCommentsWithRepliesUseCase', 4, NULL, '2019-02-28 10:31:19', '2019-02-28 10:31:19'),
(70, 'GetStoryUseCase', 4, NULL, '2019-02-28 10:34:17', '2019-02-28 10:34:17'),
(71, 'PostReplyUseCase', 4, NULL, '2019-02-28 10:37:53', '2019-02-28 10:37:53'),
(72, 'PostStoryCommentUseCase', 4, NULL, '2019-02-28 10:39:51', '2019-02-28 10:39:51'),
(73, 'UpvoteCommentUseCase', 4, NULL, '2019-02-28 10:43:31', '2019-02-28 10:43:31'),
(74, 'UpvoteStoryUseCase', 4, NULL, '2019-02-28 10:45:45', '2019-02-28 10:45:45'),
(75, 'LoginViewModel', 4, NULL, '2019-02-28 10:47:57', '2019-02-28 10:47:57'),
(76, 'StoryViewModel', 4, NULL, '2019-02-28 10:54:53', '2019-02-28 10:54:53'),
(77, 'GetShareShotInfoUseCase', 4, NULL, '2019-02-28 11:09:17', '2019-02-28 11:09:17'),
(78, 'ShotViewModel', 4, NULL, '2019-02-28 11:35:11', '2019-02-28 11:35:11'),
(79, 'SearchViewModel', 4, NULL, '2019-02-28 12:28:31', '2019-02-28 12:28:31'),
(80, 'ByteArrayUploadDataProvider', 22, NULL, '2019-02-28 12:43:51', '2019-02-28 12:43:51'),
(81, 'CastTimelineTracker', 22, NULL, '2019-02-28 12:49:19', '2019-02-28 12:49:19'),
(82, 'CronetDataSource', 22, NULL, '2019-02-28 12:51:17', '2019-02-28 12:51:17'),
(83, 'ImaAdsLoader', 22, NULL, '2019-02-28 13:15:11', '2019-02-28 13:15:11'),
(84, 'Builder', 22, NULL, '2019-02-28 13:35:02', '2019-02-28 13:35:02'),
(85, 'ExoPlayerFactory', 22, NULL, '2019-02-28 16:41:19', '2019-02-28 16:41:19'),
(86, 'DefaultDataSource', 22, NULL, '2019-02-28 16:43:39', '2019-02-28 16:43:39'),
(87, 'AnalyticsCollector', 22, NULL, '2019-02-28 16:45:57', '2019-02-28 16:55:41'),
(88, 'Ac3Util', 22, NULL, '2019-02-28 17:02:44', '2019-02-28 17:02:44'),
(89, 'AudioFocusManager', 22, NULL, '2019-02-28 17:03:49', '2019-02-28 17:03:49'),
(91, 'SilenceSkippingAudioProcessor', 22, NULL, '2019-02-28 17:35:39', '2019-02-28 17:35:39'),
(92, 'SimpleDecoderAudioRenderer', 22, NULL, '2019-02-28 17:51:51', '2019-02-28 17:51:51'),
(93, 'SonicAudioProcessor', 22, NULL, '2019-02-28 17:54:19', '2019-02-28 17:54:19'),
(94, 'ClearKeyUtil', 22, NULL, '2019-02-28 18:07:23', '2019-02-28 18:07:23'),
(95, 'DrmInitData', 22, NULL, '2019-02-28 18:11:39', '2019-02-28 18:11:39'),
(96, 'OfflineLicenseHelper', 22, NULL, '2019-02-28 18:18:24', '2019-02-28 18:18:24'),
(97, 'AmrExtractor', 22, NULL, '2019-02-28 18:26:41', '2019-02-28 18:26:41'),
(98, 'FlvExtractor', 22, NULL, '2019-02-28 18:45:06', '2019-02-28 18:45:06'),
(99, 'DefaultEbmlReader', 22, NULL, '2019-03-01 02:29:46', '2019-03-01 02:29:46'),
(100, 'MatroskaExtractor', 22, NULL, '2019-03-01 02:49:39', '2019-03-01 02:49:39'),
(101, 'VarintReader', 22, NULL, '2019-03-01 02:51:32', '2019-03-01 02:51:32'),
(102, 'Mp3Extractor', 22, NULL, '2019-03-01 02:55:00', '2019-03-01 02:55:00'),
(103, 'XingSeeker', 22, NULL, '2019-03-01 02:57:04', '2019-03-01 02:57:04'),
(104, 'AtomParsers', 22, NULL, '2019-03-01 03:04:54', '2019-03-01 03:04:54'),
(105, 'FragmentedMp4Extractor', 22, NULL, '2019-03-01 03:11:15', '2019-03-01 03:11:15'),
(106, 'MdtaMetadataEntry', 22, NULL, '2019-03-01 03:13:51', '2019-03-01 03:13:51'),
(107, 'Mp4Extractor', 22, NULL, '2019-03-01 03:14:48', '2019-03-01 03:14:48'),
(108, 'PsshAtomUtil', 22, NULL, '2019-03-01 03:15:54', '2019-03-01 03:15:54'),
(109, 'DefaultOggSeeker', 22, NULL, '2019-03-01 03:17:42', '2019-03-01 03:17:42'),
(110, 'OggExtractor', 22, NULL, '2019-03-01 03:22:51', '2019-03-01 03:22:51'),
(111, 'OggPacket', 22, NULL, '2019-03-01 03:28:40', '2019-03-01 03:28:40'),
(112, 'OggPageHeader', 22, NULL, '2019-03-01 03:34:04', '2019-03-01 03:34:04'),
(113, 'VorbisBitArray', 22, NULL, '2019-03-01 03:37:11', '2019-03-01 03:37:11'),
(114, 'VorbisReader', 22, NULL, '2019-03-01 03:43:22', '2019-03-01 03:43:22'),
(115, 'VorbisUtil', 22, NULL, '2019-03-01 03:49:30', '2019-03-01 03:49:30'),
(116, 'RawCcExtractor', 22, NULL, '2019-03-01 04:10:28', '2019-03-01 04:10:28'),
(117, 'Ac3Extractor', 22, NULL, '2019-03-01 04:11:27', '2019-03-01 04:11:27'),
(118, 'AdtsExtractor', 22, NULL, '2019-03-01 03:25:34', '2019-03-01 03:25:34'),
(119, 'AdtsReader', 22, NULL, '2019-03-01 03:30:14', '2019-03-01 03:30:14'),
(120, 'PsDurationReader', 22, NULL, '2019-03-01 05:28:21', '2019-03-01 05:28:21'),
(121, 'PsExtractor', 22, NULL, '2019-03-01 05:32:11', '2019-03-01 05:32:11'),
(123, 'SectionReader', 22, NULL, '2019-03-01 07:23:21', '2019-03-01 07:23:21'),
(124, 'TsDurationReader', 22, NULL, '2019-03-01 07:28:50', '2019-03-01 07:28:50'),
(125, 'TsExtractor', 22, NULL, '2019-03-01 07:41:18', '2019-03-01 07:41:18'),
(126, 'WavExtractor', 22, NULL, '2019-03-01 07:48:52', '2019-03-01 07:48:52'),
(127, 'ConstantBitrateSeekMap', 22, NULL, '2019-03-01 08:28:03', '2019-03-01 08:28:03'),
(128, 'DefaultExtractorInput', 22, NULL, '2019-03-01 12:21:05', '2019-03-01 12:21:05'),
(129, 'DefaultExtractorsFactory', 22, NULL, '2019-03-04 04:02:40', '2019-03-04 04:02:40'),
(130, 'Id3Peeker', 22, NULL, '2019-03-04 04:07:48', '2019-03-04 04:07:48');

-- --------------------------------------------------------

--
-- Table structure for table `source_code_test_code`
--

CREATE TABLE `source_code_test_code` (
  `source_code_id` int(10) UNSIGNED NOT NULL,
  `test_code_id` int(10) UNSIGNED NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `source_code_test_code`
--

INSERT INTO `source_code_test_code` (`source_code_id`, `test_code_id`) VALUES
(1, 1),
(3, 2),
(4, 3),
(5, 4),
(5, 5),
(6, 6),
(7, 7),
(8, 8),
(9, 9),
(9, 10),
(9, 11),
(9, 12),
(9, 13),
(9, 14),
(10, 15),
(10, 16),
(10, 17),
(10, 18),
(10, 19),
(11, 20),
(11, 21),
(11, 22),
(11, 23),
(11, 24),
(12, 25),
(12, 26),
(13, 27),
(14, 28),
(15, 29),
(16, 30),
(16, 31),
(16, 32),
(16, 33),
(16, 34),
(16, 35),
(16, 54),
(16, 55),
(17, 36),
(18, 37),
(18, 38),
(19, 39),
(19, 40),
(19, 41),
(20, 42),
(21, 43),
(22, 44),
(22, 61),
(23, 45),
(24, 46),
(25, 47),
(26, 48),
(26, 49),
(27, 50),
(28, 51),
(28, 52),
(28, 53),
(29, 56),
(29, 57),
(29, 58),
(30, 59),
(31, 60),
(32, 62),
(32, 63),
(33, 64),
(34, 65),
(34, 66),
(34, 67),
(34, 68),
(35, 69),
(35, 70),
(35, 71),
(36, 72),
(37, 73),
(37, 74),
(37, 75),
(38, 73),
(38, 74),
(38, 75),
(39, 73),
(39, 74),
(39, 75),
(40, 74),
(40, 75),
(41, 76),
(41, 77),
(42, 76),
(42, 77),
(43, 78),
(44, 79),
(45, 80),
(46, 81),
(47, 82),
(47, 83),
(48, 84),
(48, 85),
(49, 86),
(50, 87),
(51, 88),
(52, 89),
(53, 90),
(53, 91),
(54, 92),
(55, 93),
(56, 94),
(56, 96),
(57, 95),
(58, 97),
(58, 98),
(59, 99),
(60, 100),
(61, 101),
(62, 102),
(62, 103),
(63, 104),
(64, 105),
(64, 107),
(65, 106),
(66, 108),
(67, 109),
(67, 110),
(68, 111),
(68, 112),
(69, 113),
(70, 114),
(71, 115),
(72, 116),
(72, 117),
(72, 118),
(72, 120),
(72, 121),
(73, 117),
(73, 118),
(73, 119),
(73, 120),
(73, 121),
(75, 122),
(75, 123),
(75, 124),
(76, 125),
(77, 126),
(77, 127),
(78, 128),
(79, 129),
(79, 130),
(80, 131),
(81, 132),
(82, 133),
(83, 134),
(84, 135),
(84, 136),
(84, 137),
(85, 138),
(85, 141),
(86, 139),
(86, 142),
(87, 140),
(87, 143),
(88, 144),
(88, 145),
(88, 146),
(89, 147),
(90, 148),
(90, 149),
(90, 150),
(91, 151),
(91, 152),
(91, 153),
(92, 154),
(93, 155),
(93, 156),
(93, 157),
(93, 158),
(93, 159),
(94, 160),
(94, 161),
(94, 162),
(94, 163),
(94, 164),
(95, 165),
(95, 166),
(96, 167),
(96, 168),
(96, 169),
(96, 170),
(97, 172),
(97, 173),
(97, 174),
(97, 175),
(97, 176),
(98, 171),
(99, 177),
(99, 178),
(99, 181),
(99, 182),
(100, 178),
(100, 179),
(100, 180),
(100, 181),
(100, 182),
(101, 178),
(101, 180),
(101, 182),
(102, 180),
(102, 181),
(103, 183),
(104, 184),
(104, 185),
(104, 186),
(105, 187),
(105, 188),
(105, 189),
(105, 190),
(105, 191),
(105, 194),
(106, 192),
(106, 193),
(106, 200),
(106, 201),
(107, 195),
(107, 202),
(107, 203),
(108, 196),
(108, 197),
(108, 198),
(108, 199),
(110, 204),
(110, 205),
(110, 206),
(111, 207),
(112, 208),
(112, 209),
(112, 210),
(112, 211),
(112, 212),
(112, 213),
(113, 214),
(113, 215),
(113, 216),
(113, 217),
(114, 218),
(114, 219),
(115, 220),
(115, 221),
(115, 222),
(116, 223),
(116, 224),
(116, 225),
(117, 226),
(117, 227),
(117, 228),
(118, 229),
(118, 230),
(118, 231),
(119, 232),
(119, 233),
(120, 234),
(120, 235),
(121, 236),
(121, 237),
(121, 238),
(121, 239),
(121, 240),
(121, 241),
(121, 242),
(121, 243),
(121, 244),
(121, 245),
(122, 246),
(122, 247),
(122, 248),
(122, 249),
(123, 250),
(123, 251),
(124, 252),
(124, 253),
(124, 254),
(125, 255),
(125, 256),
(125, 257),
(126, 258),
(126, 259),
(126, 260),
(127, 261),
(127, 262),
(127, 263),
(128, 264),
(128, 265),
(128, 270),
(128, 271),
(129, 272),
(130, 266),
(131, 267),
(131, 268),
(131, 269),
(132, 273),
(132, 274),
(133, 275),
(133, 276),
(134, 277),
(134, 278),
(135, 279),
(135, 280),
(136, 281),
(136, 282),
(137, 283),
(137, 284),
(137, 285),
(138, 286),
(138, 287),
(138, 288),
(138, 289),
(139, 290),
(140, 291),
(141, 292),
(142, 293),
(143, 294),
(144, 295),
(145, 296),
(145, 297),
(146, 298),
(147, 299),
(148, 300),
(148, 301),
(148, 302),
(148, 304),
(148, 305),
(148, 306),
(148, 307),
(148, 308),
(148, 309),
(148, 310),
(148, 311),
(148, 312),
(148, 313),
(148, 323),
(148, 324),
(148, 325),
(148, 326),
(148, 327),
(148, 328),
(148, 329),
(148, 330),
(148, 331),
(148, 332),
(148, 335),
(149, 303),
(150, 314),
(150, 315),
(150, 316),
(150, 317),
(150, 318),
(150, 319),
(150, 320),
(150, 322),
(150, 333),
(150, 334),
(151, 321),
(152, 337),
(152, 338),
(152, 339),
(152, 340),
(153, 336),
(154, 341),
(155, 342),
(156, 343),
(156, 345),
(156, 346),
(156, 347),
(156, 348),
(157, 344),
(157, 349),
(157, 350),
(157, 351),
(157, 352),
(157, 353),
(157, 354),
(157, 355),
(157, 356),
(157, 357),
(157, 358),
(158, 359),
(158, 360),
(159, 361),
(159, 362),
(159, 363),
(159, 364),
(159, 365),
(159, 368),
(159, 369),
(159, 370),
(159, 371),
(160, 366),
(161, 367),
(162, 372),
(162, 373),
(162, 374),
(163, 375),
(163, 376),
(164, 377),
(165, 378),
(165, 379),
(165, 380),
(165, 381),
(165, 382),
(165, 383),
(165, 384),
(165, 385),
(167, 386),
(167, 387),
(168, 388),
(169, 389),
(169, 390),
(169, 395),
(169, 396),
(170, 391),
(170, 392),
(171, 393),
(172, 394),
(173, 397),
(173, 398),
(173, 399),
(173, 400),
(173, 401),
(174, 402),
(175, 403),
(176, 404),
(176, 406),
(177, 405),
(178, 407),
(179, 408),
(180, 409),
(180, 410),
(180, 411),
(181, 412),
(181, 413),
(183, 426),
(184, 414),
(184, 415),
(184, 416),
(184, 417),
(184, 418),
(184, 419),
(184, 420),
(184, 421),
(184, 422),
(184, 423),
(184, 424),
(184, 425),
(184, 427),
(184, 428),
(184, 429),
(184, 430),
(184, 431),
(184, 432),
(184, 433),
(184, 434),
(184, 435),
(184, 436),
(184, 437),
(185, 438),
(186, 439),
(186, 440),
(186, 441),
(186, 442),
(186, 443),
(186, 444),
(186, 445),
(186, 446),
(186, 447),
(186, 448),
(186, 449),
(187, 450),
(187, 451),
(187, 452),
(188, 453),
(188, 454),
(188, 455),
(188, 456),
(189, 457),
(189, 458),
(190, 459),
(190, 460),
(190, 461),
(191, 462),
(191, 463),
(191, 464),
(192, 465),
(193, 466),
(193, 467),
(193, 468),
(194, 469),
(194, 470),
(194, 471),
(195, 472),
(196, 473),
(197, 474),
(198, 475),
(198, 476),
(199, 477),
(199, 478),
(199, 479),
(199, 480),
(200, 481),
(200, 482),
(200, 483),
(200, 484),
(200, 485),
(200, 486),
(200, 487),
(200, 488),
(200, 489),
(200, 490),
(201, 491),
(201, 492),
(201, 493),
(201, 494),
(201, 495),
(201, 496),
(201, 497),
(202, 498),
(202, 499),
(202, 500),
(202, 501),
(203, 502),
(204, 503),
(205, 504),
(206, 505),
(207, 506),
(207, 507),
(207, 508),
(207, 509),
(207, 510),
(208, 511),
(209, 512),
(210, 513),
(211, 514),
(212, 515),
(213, 516),
(214, 517),
(215, 518),
(215, 519),
(215, 520),
(215, 521),
(215, 522),
(216, 523),
(217, 524),
(217, 525),
(218, 526),
(218, 527),
(218, 528),
(218, 529),
(218, 530),
(218, 531),
(218, 532),
(218, 533),
(219, 534),
(219, 535),
(219, 536),
(219, 537),
(219, 538),
(219, 539),
(219, 540),
(219, 541),
(219, 542),
(219, 543),
(220, 544),
(221, 545),
(221, 546),
(222, 547),
(222, 548),
(222, 549),
(222, 550),
(222, 551),
(222, 552),
(222, 553),
(223, 554),
(224, 555),
(224, 556),
(224, 557),
(224, 558),
(224, 559),
(224, 560),
(225, 559),
(226, 561),
(227, 562),
(227, 563),
(228, 564),
(228, 565),
(228, 566),
(228, 567),
(228, 568),
(228, 569),
(228, 570),
(229, 571),
(229, 572),
(229, 573),
(229, 574),
(230, 575),
(231, 576),
(231, 577),
(232, 578),
(232, 581),
(232, 582),
(232, 583),
(232, 584),
(232, 585),
(233, 579),
(233, 580),
(234, 586),
(234, 587),
(234, 588),
(235, 590),
(235, 591),
(235, 592),
(236, 589),
(237, 593),
(237, 594),
(237, 595),
(237, 596),
(237, 597),
(238, 598),
(238, 599),
(239, 600),
(239, 601),
(239, 602),
(239, 603),
(239, 604),
(239, 605),
(239, 606),
(240, 607),
(240, 608),
(240, 610),
(240, 611),
(240, 612),
(240, 613),
(241, 609),
(242, 614),
(243, 615),
(243, 616),
(243, 617);

-- --------------------------------------------------------

--
-- Table structure for table `technologies`
--

CREATE TABLE `technologies` (
  `id` int(10) UNSIGNED NOT NULL,
  `tag` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL,
  `language_parent` varchar(191) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `language` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL,
  `type` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `technologies`
--

INSERT INTO `technologies` (`id`, `tag`, `language_parent`, `language`, `type`, `deleted_at`, `created_at`, `updated_at`) VALUES
(1, 'android_kotlin', 'Java', 'Kotlin', 'android', NULL, '2019-02-26 11:31:16', '2019-02-26 11:31:16'),
(2, 'android_java', NULL, 'Java', 'android', NULL, '2019-02-26 11:31:16', '2019-02-26 11:31:16');

-- --------------------------------------------------------

--
-- Table structure for table `test_codes`
--

CREATE TABLE `test_codes` (
  `id` int(10) UNSIGNED NOT NULL,
  `method_name` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL,
  `method_body` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `test_code_class_id` int(10) UNSIGNED NOT NULL,
  `assert_count` int(10) UNSIGNED NOT NULL DEFAULT '0',
  `deleted_at` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `source_codes` text COLLATE utf8mb4_unicode_ci
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `test_codes`
--

INSERT INTO `test_codes` (`id`, `method_name`, `method_body`, `test_code_class_id`, `assert_count`, `deleted_at`, `created_at`, `updated_at`, `source_codes`) VALUES
(1, 'parse', 'Assert.assertEquals(INPUT1, Acl().fromReader(INPUT1.reader()).toString())', 1, 1, NULL, '2019-02-26 18:34:42', '2019-02-26 21:01:10', NULL),
(2, 'migrate27', 'val db = privateDatabase.createDatabase(TEST_DB, 26)\r\n        db.close()\r\n        privateDatabase.runMigrationsAndValidate(TEST_DB, 27, true, PrivateDatabase.Migration27)', 2, 0, NULL, '2019-02-26 18:46:14', '2019-02-26 18:46:14', NULL),
(3, 'parsing', 'val results = Profile.findAllUrls(\"garble ss://YmYtY2ZiOnRlc3RAMTkyLjE2OC4xMDAuMTo4ODg4#example-server garble\")\r\n                .toList()\r\n        Assert.assertEquals(1, results.size)\r\n        Assert.assertEquals(\"ss://YmYtY2ZiOnRlc3Q@192.168.100.1:8888#example-server\".toUri(),\r\n                results.single().toUri())', 3, 2, NULL, '2019-02-26 21:04:04', '2019-02-26 21:04:04', NULL),
(4, 'parsingAndEquals', 'Assert.assertEquals(Subnet(InetAddress.getByName(\"1.10.11.12\"), 25), Subnet.fromString(\"1.10.11.12/25\"))\r\n        Assert.assertEquals(Subnet(InetAddress.getByName(\"12.118.130.86\"), 32), Subnet.fromString(\"12.118.130.86\"))\r\n        Assert.assertEquals(Subnet(InetAddress.getByName(\"caec:cec6:c4ef:bb7b:1a78:d055:216d:3a78\"), 96),\r\n                Subnet.fromString(\"caec:cec6:c4ef:bb7b:1a78:d055:216d:3a78/96\"))\r\n        Assert.assertEquals(Subnet(InetAddress.getByName(\"be37:44bd:8630:7a0:2a3d:ff95:dd33:42f0\"), 128),\r\n                Subnet.fromString(\"be37:44bd:8630:7a0:2a3d:ff95:dd33:42f0\"))\r\n        Assert.assertNotEquals(Subnet.fromString(\"1.2.3.4/12\"), Subnet.fromString(\"1.2.3.5/12\"))', 4, 5, NULL, '2019-02-26 21:10:53', '2019-02-26 21:10:53', NULL),
(5, 'invalidParsings', 'Assert.assertEquals(null, Subnet.fromString(\"1.2.3.456\"))\r\n        Assert.assertEquals(null, Subnet.fromString(\"ffff::f0000\"))\r\n        Assert.assertEquals(null, Subnet.fromString(\"caec:cec6:c4ef:bb7b:1a78:d055:216d:3a78/129\"))\r\n        Assert.assertEquals(null, Subnet.fromString(\"caec:cec6:c4ef:bb7b:1a78:d055:216d:3a78/129\"))\r\n        Assert.assertEquals(null, Subnet.fromString(\"caec:cec6:c4ef:bb7b:1a78:d055:216d:3a78/-99\"))\r\n        Assert.assertEquals(null, Subnet.fromString(\"caec:cec6:c4ef:bb7b:1a78:d055:216d:3a78/1/0\"))', 4, 6, NULL, '2019-02-26 21:11:25', '2019-02-26 21:11:25', NULL),
(6, 'putAndGet', 'val kvp = KeyValuePair()\r\n        Assert.assertEquals(true, kvp.put(true).boolean)\r\n        Assert.assertEquals(3f, kvp.put(3f).float)\r\n        @Suppress(\"DEPRECATION\")\r\n        Assert.assertEquals(3L, kvp.put(3).long)\r\n        Assert.assertEquals(3L, kvp.put(3L).long)\r\n        Assert.assertEquals(\"3\", kvp.put(\"3\").string)\r\n        val set = (0 until 3).map(Int::toString).toSet()\r\n        Assert.assertEquals(set, kvp.put(set).stringSet)\r\n        Assert.assertEquals(null, kvp.boolean)', 5, 7, NULL, '2019-02-26 21:19:55', '2019-02-26 21:19:55', NULL),
(7, 'basic', 'val o1 = PluginOptions(\"obfs-local;obfs=http;obfs-host=localhost\")\r\n        val o2 = PluginOptions(\"obfs-local\", \"obfs-host=localhost;obfs=http\")\r\n        Assert.assertEquals(o1.hashCode(), o2.hashCode())\r\n        Assert.assertEquals(true, o1 == o2)\r\n        val o3 = PluginOptions(o1.toString(false))\r\n        Assert.assertEquals(true, o2 == o3)\r\n        val o4 = PluginOptions(o2.id, o2.toString())\r\n        Assert.assertEquals(true, o3 == o4)', 6, 4, NULL, '2019-02-26 21:31:39', '2019-02-26 21:31:39', NULL),
(8, 'escape', 'val options = PluginOptions(\"escapeTest\")\r\n        options[\"subject\"] = \"value;semicolon\"\r\n        Assert.assertEquals(true, options == PluginOptions(options.toString(false)))\r\n        options[\"key;semicolon\"] = \"object\"\r\n        Assert.assertEquals(true, options == PluginOptions(options.toString(false)))\r\n        options[\"subject\"] = \"value=equals\"\r\n        Assert.assertEquals(true, options == PluginOptions(options.toString(false)))\r\n        options[\"key=equals\"] = \"object\"\r\n        Assert.assertEquals(true, options == PluginOptions(options.toString(false)))\r\n        options[\"advanced\\\\=;test\"] = \"in;=\\\\progress\"\r\n        Assert.assertEquals(true, options == PluginOptions(options.toString(false)))', 6, 5, NULL, '2019-02-26 21:34:07', '2019-02-26 21:34:07', NULL),
(9, 'testBasicMapOperation', 'val source = MutableLiveData<Int>()\r\n        source.value = 5\r\n\r\n        val subject = DefaultIntervalMapper.mapAtInterval(source) { sourceValue ->\r\n            sourceValue?.run {\r\n                sourceValue + 5\r\n            }\r\n        }\r\n\r\n        assertEquals(10, LiveDataTestUtil.getValue(subject))', 7, 1, NULL, '2019-02-27 08:48:51', '2019-02-27 08:48:51', NULL),
(10, 'whenNoIntervalsTriggered_thenMapFn_isOnlyCalledOnce', 'val source = MutableLiveData<Int>()\r\n        source.value = 5\r\n\r\n        var calls = 0\r\n\r\n        val subject = DefaultIntervalMapper.mapAtInterval(source) {\r\n            ++calls\r\n        }\r\n\r\n        assertEquals(1, LiveDataTestUtil.getValue(subject))', 7, 1, NULL, '2019-02-27 08:49:28', '2019-02-27 08:49:28', NULL),
(11, 'whenNoIntervalsTriggered_thenMapFn_isCalledWhenNewValue', 'val source = MutableLiveData<Int>()\r\n        source.value = 5\r\n\r\n        var calls = 0\r\n\r\n        val subject = DefaultIntervalMapper.mapAtInterval(source) {\r\n            ++calls\r\n        }\r\n\r\n        LiveDataTestUtil.getValue(subject) // register observer so it processes setValue\r\n\r\n        source.value = 10\r\n\r\n        assertEquals(2, LiveDataTestUtil.getValue(subject))', 7, 1, NULL, '2019-02-27 08:50:51', '2019-02-27 08:50:51', NULL),
(12, 'whenSourceHasEmittedSeveral_thenMapFnIsCalledWithLastData', 'val source = MutableLiveData<Int>()\r\n        source.value = 5\r\n        source.value = 6\r\n        source.value = 7\r\n        source.value = 8\r\n\r\n        var calls = 0\r\n\r\n        val subject = DefaultIntervalMapper.mapAtInterval(source) { sourceValue ->\r\n            sourceValue?.run {\r\n                calls++\r\n                sourceValue + 5\r\n            }\r\n        }\r\n\r\n        assertEquals(13, LiveDataTestUtil.getValue(subject))\r\n        assertEquals(1, calls)', 7, 2, NULL, '2019-02-27 08:51:35', '2019-02-27 08:51:35', NULL),
(13, 'whenIntervalTriggered_mapRunsOnLastValue', 'val source = MutableLiveData<Int>()\r\n        source.value = 5\r\n\r\n        var timeModifier = 5\r\n\r\n        val subject = DefaultIntervalMapper.mapAtInterval(source) { sourceValue ->\r\n            sourceValue?.run {\r\n                sourceValue + timeModifier\r\n            }\r\n        }\r\n\r\n        val observer = Observer<Int>({})\r\n\r\n        // make the subject active so it runs intervals\r\n        subject.observeForever(observer)\r\n\r\n        timeModifier = 10\r\n        syncTaskExecutorRule.runAllScheduledPostDelayedTasks()\r\n\r\n        assertEquals(15, LiveDataTestUtil.getValue(subject))\r\n\r\n        subject.removeObserver(observer)', 7, 1, NULL, '2019-02-27 08:52:51', '2019-02-27 08:52:51', NULL),
(14, 'whenNotActive_mapDoesNotRunOnInterval', 'val source = MutableLiveData<Int>()\r\n        source.value = 5\r\n\r\n        var calls = 0\r\n\r\n        val subject = DefaultIntervalMapper.mapAtInterval(source) {\r\n            ++calls\r\n        }\r\n        assertEquals(1, LiveDataTestUtil.getValue(subject))\r\n\r\n        syncTaskExecutorRule.runAllScheduledPostDelayedTasks()\r\n\r\n        assertEquals(1, LiveDataTestUtil.getValue(subject))', 7, 2, NULL, '2019-02-27 08:53:15', '2019-02-27 08:53:15', NULL),
(15, 'testWrapQuotes_emptyString', 'val original = \"\"\r\n        val expected = \"\\\"\\\"\"\r\n        val quoted = original.wrapInQuotes()\r\n        assertEquals(expected, quoted)', 8, 1, NULL, '2019-02-27 08:56:03', '2019-02-27 08:56:03', NULL),
(16, 'testWrapQuotes_alreadyQuotes', 'val original = \"\\\"io2018\\\"\"\r\n        val expected = \"\\\"io2018\\\"\"\r\n        val quoted = original.wrapInQuotes()\r\n        assertEquals(expected, quoted)', 8, 1, NULL, '2019-02-27 08:56:17', '2019-02-27 08:56:17', NULL),
(17, 'testWrapQuotes_noQuotes', 'val original = \"io2018\"\r\n        val expected = \"\\\"io2018\\\"\"\r\n        val quoted = original.wrapInQuotes()\r\n        assertEquals(expected, quoted)', 8, 1, NULL, '2019-02-27 08:56:32', '2019-02-27 08:56:32', NULL),
(18, 'testWrapQuotes_oneStartingQuote', 'val original = \"\\\"io2018\"\r\n        val expected = \"\\\"io2018\\\"\"\r\n        val quoted = original.wrapInQuotes()\r\n        assertEquals(expected, quoted)', 8, 1, NULL, '2019-02-27 08:56:47', '2019-02-27 08:56:47', NULL),
(19, 'testWrapQuotes_oneEndingQuote', 'val original = \"io2018\\\"\"\r\n        val expected = \"\\\"io2018\\\"\"\r\n        val quoted = original.wrapInQuotes()\r\n        assertEquals(expected, quoted)', 8, 1, NULL, '2019-02-27 08:57:10', '2019-02-27 08:57:10', NULL),
(20, 'testUnwrapQuotes_emptyString', 'val original = \"\"\r\n        val expected = \"\"\r\n        val unquoted = original.unwrapQuotes()\r\n        assertEquals(expected, unquoted)', 8, 1, NULL, '2019-02-27 08:57:46', '2019-02-27 08:57:46', NULL),
(21, 'testUnwrapQuotes_alreadyQuotes', 'val original = \"\\\"io2018\\\"\"\r\n        val expected = \"io2018\"\r\n        val unquoted = original.unwrapQuotes()\r\n        assertEquals(expected, unquoted)', 8, 1, NULL, '2019-02-27 08:58:00', '2019-02-27 08:58:00', NULL),
(22, 'testUnwrapQuotes_noQuotes', 'val original = \"io2018\"\r\n        val expected = \"io2018\"\r\n        val unquoted = original.unwrapQuotes()\r\n        assertEquals(expected, unquoted)', 8, 1, NULL, '2019-02-27 08:58:20', '2019-02-27 08:58:20', NULL),
(23, 'testUnwrapQuotes_oneStartingQuote', 'val original = \"\\\"io2018\"\r\n        val expected = \"io2018\"\r\n        val quoted = original.unwrapQuotes()\r\n        assertEquals(expected, quoted)', 8, 1, NULL, '2019-02-27 08:58:33', '2019-02-27 08:58:33', NULL),
(24, 'testUnwrapQuotes_oneEndingQuote', 'val original = \"io2018\\\"\"\r\n        val expected = \"io2018\"\r\n        val quoted = original.unwrapQuotes()\r\n        assertEquals(expected, quoted)', 8, 1, NULL, '2019-02-27 08:58:52', '2019-02-27 08:58:52', NULL),
(25, 'convert_noInternet', 'val resource = FirebaseAuthErrorCodeConverter.convert(ErrorCodes.NO_NETWORK)\r\n\r\n        assertThat(resource, `is`(equalTo(R.string.firebase_auth_no_network_connection)))', 9, 1, NULL, '2019-02-27 09:00:38', '2019-02-27 09:00:38', NULL),
(26, 'convert_unknown', '// All error codes except for NO_NETWORK should convert to\r\n        // R.string.firebase_auth_unknown_error\r\n        val errorCodes = listOf(\r\n            ErrorCodes.DEVELOPER_ERROR,\r\n            ErrorCodes.PLAY_SERVICES_UPDATE_CANCELLED,\r\n            ErrorCodes.PROVIDER_ERROR,\r\n            ErrorCodes.UNKNOWN_ERROR\r\n        )\r\n\r\n        errorCodes.map { FirebaseAuthErrorCodeConverter.convert(it) }\r\n            .forEach { assertThat(it, `is`(equalTo(R.string.firebase_auth_unknown_error))) }', 9, 4, NULL, '2019-02-27 09:01:44', '2019-02-27 09:01:44', NULL),
(27, 'testRemoveReservation', 'val reservationActionUseCaseMock = mock<ReservationActionUseCase> {}\r\n        val viewModel = createRemoveReservationViewModel(reservationActionUseCaseMock)\r\n        val testUid = \"testUid\"\r\n        val parameters = ReservationRequestParameters(\r\n            testUid, TestData.session1.id, CancelAction()\r\n        )\r\n        viewModel.userId = testUid\r\n        viewModel.sessionId = TestData.session1.id\r\n\r\n        viewModel.onRemoveClicked()\r\n\r\n        verify(reservationActionUseCaseMock).execute(parameters)\r\n        val dismissDialogEvent: Event<Boolean>? =\r\n            LiveDataTestUtil.getValue(viewModel.dismissDialogAction)\r\n        assertThat(dismissDialogEvent?.getContentIfNotHandled(), `is`(true))', 10, 1, NULL, '2019-02-27 09:54:08', '2019-02-27 09:54:08', NULL),
(28, 'testKeepSeat', 'val viewModel = createRemoveReservationViewModel()\r\n\r\n        viewModel.onCancelClicked()\r\n\r\n        val dismissDialogEvent: Event<Boolean>? =\r\n            LiveDataTestUtil.getValue(viewModel.dismissDialogAction)\r\n        assertThat(dismissDialogEvent?.getContentIfNotHandled(), `is`(true))', 10, 1, NULL, '2019-02-27 09:54:55', '2019-02-27 09:54:55', NULL),
(29, 'testDataIsLoaded', '// Create ViewModel with the test data\r\n        val viewModel = MapViewModel(\r\n            LoadMapTileProviderUseCase(mock(Context::class.java)),\r\n            LoadGeoJsonFeaturesUseCase(mock(Context::class.java)),\r\n            FakeAnalyticsHelper()\r\n        )\r\n        assertTrue(\r\n            viewModel.conferenceLocationBounds.contains(\r\n                // conference center\r\n                LatLng(37.425842, -122.079933)\r\n            )\r\n        )', 11, 1, NULL, '2019-02-27 09:56:22', '2019-02-27 09:56:22', NULL),
(30, 'addOneMessage', 'snackbarMessageManager.addMessage(msg1)\r\n\r\n        val result = LiveDataTestUtil.getValue(snackbarMessageManager.observeNextMessage())\r\n\r\n        assertThat(result?.peekContent(), `is`(equalTo(msg1)))', 12, 1, NULL, '2019-02-27 10:11:10', '2019-02-27 10:11:10', NULL),
(31, 'addTwoMessages_OrderMaintained_NullWhenNoMore', 'snackbarMessageManager.addMessage(msg1)\r\n\r\n        snackbarMessageManager.addMessage(msg2)\r\n\r\n        // First message is consumed\r\n        var result = LiveDataTestUtil.getValue(snackbarMessageManager.observeNextMessage())\r\n        assertThat(result?.getContentIfNotHandled(), `is`(equalTo(msg1)))\r\n        snackbarMessageManager.loadNextMessage() // Snackbar dismissed\r\n\r\n        // Second message is consumed\r\n        result = LiveDataTestUtil.getValue(snackbarMessageManager.observeNextMessage())\r\n        assertThat(result?.getContentIfNotHandled(), `is`(equalTo(msg2)))\r\n        snackbarMessageManager.loadNextMessage() // Snackbar dismissed\r\n\r\n        // All messages have been consumed\r\n        result = LiveDataTestUtil.getValue(snackbarMessageManager.observeNextMessage())\r\n        assertThat(result?.getContentIfNotHandled(), `is`(nullValue()))', 12, 3, NULL, '2019-02-27 10:11:56', '2019-02-27 10:12:39', NULL),
(32, 'addTwoMessagesSameRequestId_OnlyOneShows', 'snackbarMessageManager.addMessage(msg1)\r\n\r\n        snackbarMessageManager.addMessage(msg1)\r\n\r\n        // First message is consumed\r\n        var result = LiveDataTestUtil.getValue(snackbarMessageManager.observeNextMessage())\r\n        assertThat(result?.getContentIfNotHandled(), `is`(equalTo(msg1)))\r\n        snackbarMessageManager.loadNextMessage() // Snackbar dismissed\r\n\r\n        // All messages have been consumed\r\n        result = LiveDataTestUtil.getValue(snackbarMessageManager.observeNextMessage())\r\n        assertThat(result?.getContentIfNotHandled(), `is`(nullValue()))', 12, 2, NULL, '2019-02-27 10:12:27', '2019-02-27 10:12:27', NULL),
(33, 'addMessagesToQueue_OldOnesRemoved', 'val addedMsgs = 15\r\n        (0..addedMsgs).forEach {\r\n            val newMsg = createMessage(it.toString())\r\n            snackbarMessageManager.addMessage(newMsg)\r\n        }\r\n\r\n        val result = LiveDataTestUtil.getValue(snackbarMessageManager.observeNextMessage())\r\n\r\n        // The oldest message request ID should be 5, because we added 15 and the maximum is 10.\r\n        val oldestId = (addedMsgs - SnackbarMessageManager.MAX_ITEMS).toString()\r\n        assertThat(result?.getContentIfNotHandled()?.requestChangeId, `is`(equalTo(oldestId)))', 12, 1, NULL, '2019-02-27 10:14:05', '2019-02-27 10:14:05', NULL),
(34, 'addOneMessage_snackbarIsStopped_actionDontShow', 'val mockSnackbarIsStopped = mock<LiveData<Boolean>> {\r\n            on { value }.doReturn(true)\r\n        }\r\n        val snackbarMessageManager = SnackbarMessageManager(\r\n            FakePreferenceStorage(observableSnackbarIsStopped = mockSnackbarIsStopped)\r\n        )\r\n        snackbarMessageManager.addMessage((msg1.copy(actionId = R.string.dont_show)))\r\n\r\n        val result = LiveDataTestUtil.getValue(snackbarMessageManager.observeNextMessage())\r\n        assertNull(result)', 12, 1, NULL, '2019-02-27 10:15:00', '2019-02-27 10:15:00', NULL),
(35, 'addOneMessage_snackbarAppears_actionNotDontShow', 'val mockSnackbarIsStopped = mock<LiveData<Boolean>> {\r\n            on { value }.doReturn(true)\r\n        }\r\n        val snackbarMessageManager = SnackbarMessageManager(\r\n            FakePreferenceStorage(observableSnackbarIsStopped = mockSnackbarIsStopped)\r\n        )\r\n        snackbarMessageManager.addMessage(msg1)\r\n\r\n        val result = LiveDataTestUtil.getValue(snackbarMessageManager.observeNextMessage())\r\n        assertThat(result?.peekContent(), `is`(equalTo(msg1)))', 12, 1, NULL, '2019-02-27 10:15:30', '2019-02-27 10:15:30', NULL),
(36, 'onGetStartedClicked_updatesPrefs', '// Given an onboarding view model\r\n        val prefs = mock<PreferenceStorage>()\r\n        val onboardingCompleteActionUseCase = OnboardingCompleteActionUseCase(prefs)\r\n        val viewModel = OnboardingViewModel(onboardingCompleteActionUseCase)\r\n\r\n        // When getStarted is called\r\n        viewModel.getStartedClick()\r\n\r\n        // Then verify that local storage was updated\r\n        verify(prefs).onboardingCompleted = true\r\n\r\n        // And that the navigation event was fired\r\n        val navigateEvent = LiveDataTestUtil.getValue(viewModel.navigateToMainActivity)\r\n        assertNotNull(navigateEvent?.getContentIfNotHandled())', 13, 1, NULL, '2019-02-27 10:17:38', '2019-02-27 10:17:38', NULL),
(37, 'indexAgenda_groupsCorrectly', '// Given a list of test blocks starting over 3 days\r\n        val block = TestData.block1\r\n        val start = ZonedDateTime.parse(\"2018-05-08T07:00:00-07:00\")\r\n        val sessions = listOf(\r\n            block.copy(startTime = start),\r\n            block.copy(startTime = start),\r\n            block.copy(startTime = start.plusDays(1)),\r\n            block.copy(startTime = start.plusDays(1)),\r\n            block.copy(startTime = start.plusDays(2)),\r\n            block.copy(startTime = start.plusDays(2))\r\n        )\r\n\r\n        // Process this list to group by start day, keyed on index\r\n        val grouped = indexAgendaHeaders(sessions).toMap()\r\n\r\n        // Then verify that the correct groupings are made and indexes used\r\n        assertEquals(3, grouped.size)\r\n        assertEquals(setOf(0, 2, 4), grouped.keys)\r\n        assertEquals(start, grouped[0])\r\n        assertEquals(start.plusDays(1), grouped[2])\r\n        assertEquals(start.plusDays(2), grouped[4])', 14, 5, NULL, '2019-02-27 10:21:15', '2019-02-27 10:21:15', NULL),
(38, 'indexAgenda_roundsDayDown', '// Given a list of test blocks where a block straddles two days\r\n        val block = TestData.block1\r\n        val dayOneSevenAM = ZonedDateTime.parse(\"2018-05-08T07:00:00-07:00\")\r\n        val dayOneEightAM = ZonedDateTime.parse(\"2018-05-08T08:00:00-07:00\")\r\n        val dayOneElevenPM = ZonedDateTime.parse(\"2018-05-08T23:00:00-07:00\")\r\n        val dayTwoOneAM = ZonedDateTime.parse(\"2018-05-09T01:00:00-07:00\")\r\n        val dayTwoSevenAM = ZonedDateTime.parse(\"2018-05-09T07:00:00-07:00\")\r\n        val dayTwoEightAM = ZonedDateTime.parse(\"2018-05-09T08:00:00-07:00\")\r\n\r\n        val sessions = listOf(\r\n            block.copy(startTime = dayOneSevenAM, endTime = dayOneEightAM),\r\n            block.copy(startTime = dayOneElevenPM, endTime = dayTwoOneAM), // straddling day\r\n            block.copy(startTime = dayTwoSevenAM, endTime = dayTwoEightAM)\r\n        )\r\n\r\n        // Process this list to group by start time, keyed on index\r\n        val grouped = indexAgendaHeaders(sessions).toMap()\r\n\r\n        // Then verify that the correct groupings are made; the straddling block should be grouped\r\n        // with the day it starts in.\r\n        assertEquals(2, grouped.size)\r\n        assertEquals(setOf(0, 2), grouped.keys)\r\n        assertEquals(dayOneSevenAM, grouped[0])\r\n        assertEquals(dayTwoSevenAM, grouped[2])', 14, 4, NULL, '2019-02-27 10:21:52', '2019-02-27 10:21:52', NULL),
(39, 'indexSessions_groupsCorrectly', '// Given a list of test sessions with a range of start times (on the hour)\r\n        val session = TestData.session1\r\n        val start = ZonedDateTime.parse(startTimeString)\r\n\r\n        val sessions = listOf(\r\n            session.copy(startTime = start),\r\n            session.copy(startTime = start),\r\n            session.copy(startTime = start.plusHours(1)),\r\n            session.copy(startTime = start.plusHours(1)),\r\n            session.copy(startTime = start.plusHours(2)),\r\n            session.copy(startTime = start.plusHours(2))\r\n        )\r\n\r\n        // Process this list to group by start time, keyed on index\r\n        val grouped = indexSessionHeaders(sessions, ZoneId.of(timeZone)).toMap()\r\n\r\n        // Then verify that the correct groupings are made and indexes used\r\n        assertEquals(3, grouped.size)\r\n        assertEquals(setOf(0, 2, 4), grouped.keys)\r\n        assertEquals(start, grouped[0])\r\n        assertEquals(start.plusHours(1), grouped[2])\r\n        assertEquals(start.plusHours(2), grouped[4])', 15, 5, NULL, '2019-02-27 10:23:32', '2019-02-27 10:23:32', NULL),
(40, 'indexSessions_doesNotRoundTimeDown', '// Given a list of test sessions with start times not on the hour\r\n        val session = TestData.session1\r\n        val start = ZonedDateTime.parse(startTimeString)\r\n        val sessions = listOf(\r\n            session.copy(startTime = start.minusMinutes(30)),\r\n            session.copy(startTime = start.minusMinutes(30)),\r\n            session.copy(startTime = start.minusMinutes(15)),\r\n            session.copy(startTime = start),\r\n            session.copy(startTime = start.plusMinutes(15)),\r\n            session.copy(startTime = start.plusMinutes(30)),\r\n            session.copy(startTime = start.plusMinutes(30))\r\n        )\r\n\r\n        // Process this list to group by start time, keyed on index\r\n        val grouped = indexSessionHeaders(sessions, ZoneId.of(timeZone)).toMap()\r\n\r\n        // Then verify that the correct groupings are made and no rounding occurs\r\n        assertEquals(5, grouped.size)\r\n        assertEquals(setOf(0, 2, 3, 4, 5), grouped.keys)', 15, 2, NULL, '2019-02-27 10:24:06', '2019-02-27 10:24:06', NULL),
(41, 'indexSessions_acrossDays', '// Given a list of test sessions which cross into a new day\r\n        val session = TestData.session1\r\n        val start = ZonedDateTime.parse(startTimeString)\r\n        val sessions = listOf(\r\n            session.copy(startTime = start),                // 10PM\r\n            session.copy(startTime = start.plusHours(1)),   // 11PM\r\n            session.copy(startTime = start.plusHours(2)),   // Midnight\r\n            session.copy(startTime = start.plusHours(3)),   // 1AM\r\n            session.copy(startTime = start.plusHours(4))    // 2AM\r\n        )\r\n\r\n        // Process this list to group by start time, keyed on index\r\n        val grouped = indexSessionHeaders(sessions, ZoneId.of(timeZone)).toMap()\r\n\r\n        // Then verify that the correct groupings are made and in the correct order\r\n        assertEquals(5, grouped.size)\r\n        assertEquals(setOf(0, 1, 2, 3, 4), grouped.keys)\r\n        assertEquals(start, grouped[0])\r\n        assertEquals(start.plusHours(1), grouped[1])\r\n        assertEquals(start.plusHours(2), grouped[2])\r\n        assertEquals(start.plusHours(3), grouped[3])\r\n        assertEquals(start.plusHours(4), grouped[4])', 15, 7, NULL, '2019-02-27 10:24:34', '2019-02-27 10:24:34', NULL),
(42, 'interleaveSort', '// Given unordered tags with same category\r\n        val testList = listOf(webTag, cloudTag, androidTag)\r\n        val expected = listOf(androidTag, webTag, cloudTag)\r\n\r\n        val useCase = LoadEventFiltersUseCase(TagRepository(TestDataRepository))\r\n\r\n        // Items are sorted and interleaved\r\n        assertEquals(expected, useCase.interleaveSort(testList))', 16, 1, NULL, '2019-02-27 10:27:34', '2019-02-27 10:27:34', NULL),
(43, 'loadsFilters', 'val useCase = LoadEventFiltersUseCase(TagRepository(TestDataRepository))\r\n        val result = useCase.executeNow(UserSessionMatcher()) as Success\r\n\r\n        assertTrue(result.data[0] is MyEventsFilter)\r\n        assertEquals(result.data.subList(1, result.data.size), MobileTestData.tagFiltersList)', 16, 2, NULL, '2019-02-27 10:31:02', '2019-02-27 10:31:02', NULL),
(44, 'testDataIsLoaded_ObservablesUpdated', '// Create test use cases with test data\r\n        val loadSessionsUseCase = LoadUserSessionsByDayUseCase(\r\n            DefaultSessionAndUserEventRepository(\r\n                TestUserEventDataSource(), DefaultSessionRepository(TestDataRepository)\r\n            )\r\n        )\r\n        val loadTagsUseCase = LoadEventFiltersUseCase(TagRepository(TestDataRepository))\r\n        val signInDelegate = FakeSignInViewModelDelegate()\r\n\r\n        // Create ViewModel with the use cases\r\n        val viewModel = createScheduleViewModel(\r\n            loadSessionsUseCase = loadSessionsUseCase,\r\n            loadTagsUseCase = loadTagsUseCase,\r\n            signInViewModelDelegate = signInDelegate\r\n        )\r\n\r\n        // Kick off the viewmodel by loading a user.\r\n        signInDelegate.loadUser(\"test\")\r\n\r\n        // Observe viewmodel to load sessions\r\n        viewModel.getSessionTimeDataForDay(0).observeForever {}\r\n\r\n        // Check that data were loaded correctly\r\n        // Sessions\r\n        TestData.TestConferenceDays.forEachIndexed { index, day ->\r\n\r\n            assertEquals(\r\n                TestData.userSessionMap[day],\r\n                LiveDataTestUtil.getValue(viewModel.getSessionTimeDataForDay(index))?.list\r\n            )\r\n        }\r\n        assertFalse(LiveDataTestUtil.getValue(viewModel.isLoading)!!)\r\n        // Tags\r\n        val loadedFilters = LiveDataTestUtil.getValue(viewModel.eventFilters)\r\n        assertTrue(loadedFilters?.containsAll(MobileTestData.tagFiltersList) ?: false)', 17, 5, NULL, '2019-02-27 11:03:28', '2019-02-27 11:03:28', NULL),
(45, 'profileClicked_whileLoggedIn_showsSignOutDialog', '// Given a ViewModel with a signed in user\r\n        val signInViewModelDelegate = createSignInViewModelDelegate().apply {\r\n            injectIsSignedIn = true\r\n        }\r\n        val viewModel = createScheduleViewModel(signInViewModelDelegate = signInViewModelDelegate)\r\n\r\n        // When profile is clicked\r\n        viewModel.onProfileClicked()\r\n\r\n        // Then the sign out dialog should be shown\r\n        val signOutEvent = LiveDataTestUtil.getValue(viewModel.navigateToSignOutDialogAction)\r\n        assertNotNull(signOutEvent?.getContentIfNotHandled())', 17, 1, NULL, '2019-02-27 11:06:40', '2019-02-27 11:06:40', NULL),
(46, 'profileClicked_whileLoggedOut_showsSignInDialog', '// Given a ViewModel with no signed in user\r\n        val signInViewModelDelegate = createSignInViewModelDelegate().apply {\r\n            injectIsSignedIn = false\r\n        }\r\n        val viewModel = createScheduleViewModel(signInViewModelDelegate = signInViewModelDelegate)\r\n\r\n        // When profile is clicked\r\n        viewModel.onProfileClicked()\r\n\r\n        // Then the sign in dialog should ne shown\r\n        val signInEvent = LiveDataTestUtil.getValue(viewModel.navigateToSignInDialogAction)\r\n        assertNotNull(signInEvent?.getContentIfNotHandled())', 17, 1, NULL, '2019-02-27 11:07:19', '2019-02-27 11:07:19', NULL),
(47, 'loggedInUser_setsProfileContentDescription', '// Given a mock firebase user\r\n        val mockUser = mock<AuthenticatedUserInfoBasic> {\r\n            on { getUid() }.doReturn(\"123\")\r\n            on { getPhotoUrl() }.doReturn(mock<Uri> {})\r\n            on { isSignedIn() }.doReturn(true)\r\n        }\r\n\r\n        // Create ViewModel\r\n        val observableFirebaseUserUseCase =\r\n            FakeObserveUserAuthStateUseCase(\r\n                user = Result.Success(mockUser),\r\n                isRegistered = Result.Success(false)\r\n            )\r\n        val signInViewModelComponent = FirebaseSignInViewModelDelegate(\r\n            observableFirebaseUserUseCase,\r\n            mock {})\r\n        val viewModel = createScheduleViewModel(signInViewModelDelegate = signInViewModelComponent)\r\n\r\n        // Check that the expected content description is set\r\n        assertEquals(\r\n            R.string.sign_out,\r\n            LiveDataTestUtil.getValue(viewModel.profileContentDesc)\r\n        )', 17, 1, NULL, '2019-02-27 11:08:10', '2019-02-27 11:08:10', NULL),
(48, 'noLoggedInUser_setsProfileContentDescription', '// Given no firebase user\r\n        val noFirebaseUser = null\r\n\r\n        // Create ViewModel\r\n        val observableFirebaseUserUseCase =\r\n            FakeObserveUserAuthStateUseCase(\r\n                user = Result.Success(noFirebaseUser),\r\n                isRegistered = Result.Success(false)\r\n            )\r\n        val signInViewModelComponent = FirebaseSignInViewModelDelegate(\r\n            observableFirebaseUserUseCase,\r\n            mock {})\r\n\r\n        val viewModel = createScheduleViewModel(signInViewModelDelegate = signInViewModelComponent)\r\n\r\n        // Check that the expected content description is set\r\n        assertEquals(R.string.sign_in, LiveDataTestUtil.getValue(viewModel.profileContentDesc))', 17, 1, NULL, '2019-02-27 11:08:50', '2019-02-27 11:08:50', NULL),
(49, 'errorLoggingIn_setsProfileContentDescription', '// Given no firebase user\r\n        val errorLoadingFirebaseUser = Result.Error(Exception())\r\n\r\n        // Create ViewModel\r\n        val observableFirebaseUserUseCase =\r\n            FakeObserveUserAuthStateUseCase(\r\n                user = errorLoadingFirebaseUser,\r\n                isRegistered = Result.Success(false)\r\n            )\r\n        val signInViewModelComponent = FirebaseSignInViewModelDelegate(\r\n            observableFirebaseUserUseCase,\r\n            mock {})\r\n        val viewModel = createScheduleViewModel(signInViewModelDelegate = signInViewModelComponent)\r\n\r\n        // Check that the expected content description is set\r\n        assertEquals(R.string.sign_in, LiveDataTestUtil.getValue(viewModel.profileContentDesc))', 17, 1, NULL, '2019-02-27 11:09:13', '2019-02-27 11:09:13', NULL),
(50, 'testDataIsLoaded_Fails', '// Create ViewModel\r\n        val viewModel = createScheduleViewModel()\r\n        val errorMsg = LiveDataTestUtil.getValue(viewModel.errorMessage)\r\n        assertTrue(errorMsg?.peekContent()?.isNotEmpty() ?: false)', 17, 1, NULL, '2019-02-27 11:10:10', '2019-02-27 11:10:10', NULL),
(51, 'testStarEvent', '// Create test use cases with test data\r\n        val snackbarMessageManager = SnackbarMessageManager(FakePreferenceStorage())\r\n        val viewModel = createScheduleViewModel(snackbarMessageManager = snackbarMessageManager)\r\n\r\n        viewModel.onStarClicked(TestData.userSession0)\r\n\r\n        val nextMessageEvent: Event<SnackbarMessage>? =\r\n            LiveDataTestUtil.getValue(snackbarMessageManager.observeNextMessage())\r\n        val message = nextMessageEvent?.getContentIfNotHandled()\r\n        assertThat(message?.messageId, `is`(equalTo(R.string.event_starred)))\r\n        assertThat(message?.actionId, `is`(equalTo(R.string.dont_show)))\r\n\r\n        // TODO: check changes in data source', 17, 2, NULL, '2019-02-27 11:15:42', '2019-02-27 11:15:42', NULL),
(52, 'testUnstarEvent', '// Create test use cases with test data\r\n        val snackbarMessageManager = SnackbarMessageManager(FakePreferenceStorage())\r\n        val viewModel = createScheduleViewModel(snackbarMessageManager = snackbarMessageManager)\r\n\r\n        viewModel.onStarClicked(TestData.userSession1)\r\n\r\n        val nextMessageEvent: Event<SnackbarMessage>? =\r\n            LiveDataTestUtil.getValue(snackbarMessageManager.observeNextMessage())\r\n        val message = nextMessageEvent?.getContentIfNotHandled()\r\n        assertThat(message?.messageId, `is`(equalTo(R.string.event_unstarred)))\r\n        assertThat(message?.actionId, `is`(equalTo(R.string.dont_show)))', 17, 2, NULL, '2019-02-27 11:15:58', '2019-02-27 11:15:58', NULL),
(53, 'testStar_notLoggedInUser', '// Create test use cases with test data\r\n        val signInDelegate = FakeSignInViewModelDelegate()\r\n        signInDelegate.injectIsSignedIn = false\r\n\r\n        val viewModel = createScheduleViewModel(signInViewModelDelegate = signInDelegate)\r\n\r\n        viewModel.onStarClicked(TestData.userSession1)\r\n\r\n        val starEvent: Event<SnackbarMessage>? =\r\n            LiveDataTestUtil.getValue(viewModel.snackBarMessage)\r\n        // TODO change with actual resource used\r\n        assertThat(\r\n            starEvent?.getContentIfNotHandled()?.messageId,\r\n            `is`(not(equalTo(R.string.reservation_request_succeeded)))\r\n        )\r\n\r\n        // Verify that the sign in dialog was triggered\r\n        val signInEvent = LiveDataTestUtil.getValue(viewModel.navigateToSignInDialogAction)\r\n        assertNotNull(signInEvent?.getContentIfNotHandled())', 17, 2, NULL, '2019-02-27 11:16:53', '2019-02-27 11:16:53', NULL),
(54, 'reservationReceived', '// Create test use cases with test data\r\n        val userEventsResult: MutableLiveData<UserEventsResult> = MutableLiveData()\r\n        val source = TestUserEventDataSource(userEventsResult)\r\n        val loadSessionsUseCase = createTestLoadUserSessionsByDayUseCase(source)\r\n        val signInDelegate = FakeSignInViewModelDelegate()\r\n        val snackbarMessageManager = SnackbarMessageManager(FakePreferenceStorage())\r\n        val viewModel = createScheduleViewModel(\r\n            loadSessionsUseCase = loadSessionsUseCase,\r\n            signInViewModelDelegate = signInDelegate,\r\n            snackbarMessageManager = snackbarMessageManager\r\n        )\r\n\r\n        // Kick off the viewmodel by loading a user.\r\n        signInDelegate.loadUser(\"test\")\r\n\r\n        // Observe viewmodel to load sessions\r\n        viewModel.getSessionTimeDataForDay(0).observeForever {}\r\n\r\n        // Observe snackbar so messages are received\r\n        viewModel.snackBarMessage.observeForever { }\r\n\r\n        // A session goes from not-reserved to reserved\r\n        val oldValue = LiveDataTestUtil.getValue(userEventsResult)\r\n        val newValue = oldValue!!.copy(\r\n            userEventsMessage = UserEventMessage(\r\n                UserEventMessageChangeType.CHANGES_IN_RESERVATIONS\r\n            )\r\n        )\r\n\r\n        userEventsResult.postValue(newValue)\r\n\r\n        val reservationMessage: Event<SnackbarMessage>? =\r\n            LiveDataTestUtil.getValue(snackbarMessageManager.observeNextMessage())\r\n        assertThat(\r\n            reservationMessage?.getContentIfNotHandled()?.messageId,\r\n            `is`(equalTo(R.string.reservation_new))\r\n        )', 17, 1, NULL, '2019-02-27 11:20:07', '2019-02-27 11:20:07', NULL),
(55, 'waitlistReceived', '// Create test use cases with test data\r\n        val userEventsResult = MutableLiveData<UserEventsResult>()\r\n        val source = TestUserEventDataSource(userEventsResult)\r\n        val loadSessionsUseCase = createTestLoadUserSessionsByDayUseCase(source)\r\n        val signInDelegate = FakeSignInViewModelDelegate()\r\n        val snackbarMessageManager = SnackbarMessageManager(FakePreferenceStorage())\r\n        val viewModel = createScheduleViewModel(\r\n            loadSessionsUseCase = loadSessionsUseCase,\r\n            signInViewModelDelegate = signInDelegate,\r\n            snackbarMessageManager = snackbarMessageManager\r\n        )\r\n\r\n        // Kick off the viewmodel by loading a user.\r\n        signInDelegate.loadUser(\"test\")\r\n\r\n        // Observe viewmodel to load sessions\r\n        viewModel.getSessionTimeDataForDay(0).observeForever {}\r\n\r\n        // Observe snackbar so messages are received\r\n        viewModel.snackBarMessage.observeForever { }\r\n\r\n        // A session goes from not-reserved to reserved\r\n        val oldValue = LiveDataTestUtil.getValue(userEventsResult)\r\n        val newValue = oldValue!!.copy(\r\n            userEventsMessage = UserEventMessage(UserEventMessageChangeType.CHANGES_IN_WAITLIST)\r\n        )\r\n\r\n        userEventsResult.postValue(newValue)\r\n\r\n        val waitlistMessage: Event<SnackbarMessage>? =\r\n            LiveDataTestUtil.getValue(snackbarMessageManager.observeNextMessage())\r\n\r\n        assertThat(\r\n            waitlistMessage?.getContentIfNotHandled()?.messageId,\r\n            `is`(equalTo(R.string.waitlist_new))\r\n        )', 17, 1, NULL, '2019-02-27 11:24:04', '2019-02-27 11:24:04', NULL),
(56, 'noLoggedInUser_showsReservationButton', '// Given no logged in user\r\n        val noFirebaseUser = null\r\n\r\n        // Create ViewModel\r\n        val observableFirebaseUserUseCase =\r\n            FakeObserveUserAuthStateUseCase(\r\n                user = Result.Success(noFirebaseUser),\r\n                isRegistered = Result.Success(false)\r\n            )\r\n        val signInViewModelComponent = FirebaseSignInViewModelDelegate(\r\n            observableFirebaseUserUseCase,\r\n            mock {})\r\n\r\n        val viewModel = createScheduleViewModel(signInViewModelDelegate = signInViewModelComponent)\r\n\r\n        // Check that reservation buttons are shown\r\n        assertEquals(true, LiveDataTestUtil.getValue(viewModel.showReservations))', 17, 1, NULL, '2019-02-27 11:27:34', '2019-02-27 11:27:34', NULL),
(57, 'loggedInUser_registered_showsReservationButton', '// Given a logged in user\r\n        val mockUser = mock<AuthenticatedUserInfoBasic> {\r\n            on { isSignedIn() }.doReturn(true)\r\n        }\r\n\r\n        // Who is registered\r\n        val observableFirebaseUserUseCase =\r\n            FakeObserveUserAuthStateUseCase(\r\n                user = Result.Success(mockUser),\r\n                isRegistered = Result.Success(true)\r\n            )\r\n        val signInViewModelComponent = FirebaseSignInViewModelDelegate(\r\n            observableFirebaseUserUseCase,\r\n            mock {})\r\n\r\n        // Create ViewModel\r\n        val viewModel = createScheduleViewModel(signInViewModelDelegate = signInViewModelComponent)\r\n\r\n        // Check that reservation buttons are shown\r\n        assertEquals(true, LiveDataTestUtil.getValue(viewModel.showReservations))', 17, 1, NULL, '2019-02-27 11:27:55', '2019-02-27 11:27:55', NULL),
(58, 'loggedInUser_notRegistered_hidesReservationButton', '// Given a logged in user\r\n        val mockUser = mock<AuthenticatedUserInfoBasic> {\r\n            on { isSignedIn() }.doReturn(true)\r\n        }\r\n\r\n        // Who isn\'t registered\r\n        val observableFirebaseUserUseCase =\r\n            FakeObserveUserAuthStateUseCase(\r\n                user = Result.Success(mockUser),\r\n                isRegistered = Result.Success(false)\r\n            )\r\n        val signInViewModelComponent = FirebaseSignInViewModelDelegate(\r\n            observableFirebaseUserUseCase,\r\n            mock {})\r\n\r\n        // Create ViewModel\r\n        val viewModel = createScheduleViewModel(signInViewModelDelegate = signInViewModelComponent)\r\n\r\n        // Check that *no* reservation buttons are shown\r\n        assertEquals(false, LiveDataTestUtil.getValue(viewModel.showReservations))', 17, 1, NULL, '2019-02-27 11:28:12', '2019-02-27 11:28:12', NULL),
(59, 'scheduleHints_notShown_on_launch', 'val viewModel = createScheduleViewModel()\r\n\r\n        val event = LiveDataTestUtil.getValue(viewModel.scheduleUiHintsShown)\r\n        assertEquals(event?.getContentIfNotHandled(), false)', 17, 1, NULL, '2019-02-27 11:29:01', '2019-02-27 11:29:01', NULL),
(60, 'swipeRefresh_refreshesRemoteConfData', '// Given a view model with a mocked remote data source\r\n        val remoteDataSource = mock<ConferenceDataSource> {}\r\n        val viewModel = createScheduleViewModel(\r\n            refreshConferenceDataUseCase = RefreshConferenceDataUseCase(\r\n                ConferenceDataRepository(\r\n                    remoteDataSource = remoteDataSource,\r\n                    boostrapDataSource = TestDataSource\r\n                )\r\n            )\r\n        )\r\n\r\n        // When swipe refresh is called\r\n        viewModel.onSwipeRefresh()\r\n\r\n        // Then the remote data source attempts to fetch new data\r\n        verify(remoteDataSource).getRemoteConferenceData()\r\n\r\n        // And the swipe refreshing status is set to false\r\n        assertEquals(false, LiveDataTestUtil.getValue(viewModel.swipeRefreshing))', 17, 1, NULL, '2019-02-27 11:29:46', '2019-02-27 11:29:46', NULL),
(61, 'newDataFromConfRepo_scheduleUpdated', 'val repo = ConferenceDataRepository(\r\n            remoteDataSource = TestConfDataSourceSession0(),\r\n            boostrapDataSource = BootstrapDataSourceSession3()\r\n        )\r\n\r\n        val loadUserSessionsByDayUseCase = createTestLoadUserSessionsByDayUseCase(\r\n            conferenceDataRepo = repo\r\n        )\r\n        val viewModel = createScheduleViewModel(\r\n            loadSessionsUseCase = loadUserSessionsByDayUseCase,\r\n            observeConferenceDataUseCase = ObserveConferenceDataUseCase(repo)\r\n        )\r\n\r\n        // Observe viewmodel to load sessions\r\n        viewModel.getSessionTimeDataForDay(0).observeForever {}\r\n\r\n        // Trigger a refresh on the repo\r\n        repo.refreshCacheWithRemoteConferenceData()\r\n\r\n        // The new value should be present\r\n        val newValue = LiveDataTestUtil.getValue(viewModel.getSessionTimeDataForDay(0))\r\n\r\n        assertThat(\r\n            newValue?.list?.first()?.session,\r\n            `is`(IsEqual.equalTo(TestData.session0))\r\n        )', 17, 1, NULL, '2019-02-27 11:31:23', '2019-02-27 11:31:23', NULL),
(62, 'testDataIsNotLoaded_authNotReady', '// Even with a session ID set, data is null if no user is available\r\n        assertEquals(null, LiveDataTestUtil.getValue(viewModel.session))', 18, 1, NULL, '2019-02-27 11:35:45', '2019-02-27 11:35:45', NULL),
(63, 'testDataIsLoaded_authReady', 'val vm = createSessionDetailViewModelWithAuthEnabled()\r\n        vm.setSessionId(testSession.id)\r\n\r\n        assertEquals(testSession, LiveDataTestUtil.getValue(vm.session))', 18, 1, NULL, '2019-02-27 11:36:02', '2019-02-27 11:36:02', NULL),
(64, 'testOnPlayVideo_createsEventForVideo', 'val vm = createSessionDetailViewModelWithAuthEnabled()\r\n\r\n        vm.setSessionId(TestData.sessionWithYoutubeUrl.id)\r\n\r\n        LiveDataTestUtil.getValue(vm.session)\r\n\r\n        vm.onPlayVideo()\r\n        assertEquals(\r\n            TestData.sessionWithYoutubeUrl.youTubeUrl,\r\n            LiveDataTestUtil.getValue(vm.navigateToYouTubeAction)?.peekContent()\r\n        )', 18, 1, NULL, '2019-02-27 11:37:03', '2019-02-27 11:37:03', NULL),
(65, 'testReserveEvent', 'val reservationActionUseCaseMock = mock<ReservationActionUseCase> {\r\n            on { observe() }.doReturn(MediatorLiveData())\r\n        }\r\n        val signInDelegate = FakeSignInViewModelDelegate()\r\n        // The session isn\'t reservable from one hour before the session.\r\n        // So making now as two hours before\r\n        val now = TestData.session0.startTime.minusHours(2).toInstant()\r\n        val mockTime = mock<TimeProvider> {\r\n            on { now() }.doReturn(now)\r\n        }\r\n        val viewModel = createSessionDetailViewModel(\r\n            reservationActionUseCase = reservationActionUseCaseMock,\r\n            signInViewModelPlugin = signInDelegate,\r\n            timeProvider = mockTime\r\n        )\r\n        val testUid = \"testUid\"\r\n        // Kick off the viewmodel by loading a user.\r\n        signInDelegate.loadUser(testUid)\r\n        viewModel.setSessionId(TestData.session3.id)\r\n        LiveDataTestUtil.getValue(viewModel.session)\r\n        LiveDataTestUtil.getValue(viewModel.userEvent)\r\n        LiveDataTestUtil.getValue(viewModel.isReservationDisabled)\r\n\r\n        viewModel.onReservationClicked()\r\n\r\n        verify(reservationActionUseCaseMock).execute(\r\n            ReservationRequestParameters(\r\n                testUid, TestData.session3.id, RequestAction()\r\n            )\r\n        )', 18, 0, NULL, '2019-02-27 12:04:26', '2019-02-27 12:04:26', NULL),
(66, 'testReserveEvent_notLoggedIn', '// Create test use cases with test data\r\n        val signInDelegate = FakeSignInViewModelDelegate()\r\n        signInDelegate.injectIsSignedIn = false\r\n\r\n        val viewModel = createSessionDetailViewModel(signInViewModelPlugin = signInDelegate)\r\n\r\n        viewModel.onReservationClicked()\r\n\r\n        val event: Event<SnackbarMessage>? = LiveDataTestUtil.getValue(viewModel.snackBarMessage)\r\n        // TODO change with actual resource used\r\n        Assert.assertThat(\r\n            event?.getContentIfNotHandled()?.messageId,\r\n            `is`(not(equalTo(R.string.reservation_request_succeeded)))\r\n        )\r\n\r\n        // Then the sign in dialog should ne shown\r\n        val signInEvent = LiveDataTestUtil.getValue(viewModel.navigateToSignInDialogAction)\r\n        Assert.assertNotNull(signInEvent?.getContentIfNotHandled())', 18, 2, NULL, '2019-02-27 12:04:58', '2019-02-27 12:04:58', NULL),
(67, 'testReserveEvent_noInternet', '// Create test use cases with test data\r\n        val signInDelegate = FakeSignInViewModelDelegate()\r\n        signInDelegate.injectIsSignedIn = false\r\n\r\n        val networkUtils: NetworkUtils = mock {\r\n            on { hasNetworkConnection() }.doReturn(false)\r\n        }\r\n\r\n        val viewModel = createSessionDetailViewModel(networkUtils = networkUtils)\r\n\r\n        viewModel.onReservationClicked()\r\n\r\n        val event: Event<SnackbarMessage>? = LiveDataTestUtil.getValue(viewModel.snackBarMessage)\r\n        Assert.assertThat(\r\n            event?.getContentIfNotHandled()?.messageId,\r\n            `is`(equalTo(R.string.no_network_connection))\r\n        )', 18, 1, NULL, '2019-02-27 12:05:27', '2019-02-27 12:05:27', NULL),
(68, 'testCancelEvent', 'val signInDelegate = FakeSignInViewModelDelegate()\r\n        // The session isn\'t reservable from one hour before the session.\r\n        // So making now as two hours before\r\n        val now = TestData.session0.startTime.minusHours(2).toInstant()\r\n        val mockTime = mock<TimeProvider> {\r\n            on { now() }.doReturn(now)\r\n        }\r\n        val viewModel = createSessionDetailViewModel(\r\n            signInViewModelPlugin = signInDelegate,\r\n            timeProvider = mockTime\r\n        )\r\n        viewModel.setSessionId(TestData.session1.id)\r\n        val testUid = \"testUid\"\r\n        // Kick off the viewmodel by loading a user.\r\n        signInDelegate.loadUser(testUid)\r\n        viewModel.setSessionId(TestData.session1.id)\r\n        LiveDataTestUtil.getValue(viewModel.session)\r\n        LiveDataTestUtil.getValue(viewModel.userEvent)\r\n        LiveDataTestUtil.getValue(viewModel.isReservationDisabled)\r\n\r\n        viewModel.onReservationClicked()\r\n\r\n        val parameters = LiveDataTestUtil.getValue(\r\n            viewModel.navigateToRemoveReservationDialogAction\r\n        )\r\n            ?.getContentIfNotHandled()\r\n        assertThat(\r\n            parameters, `is`(\r\n                RemoveReservationDialogParameters(\r\n                    testUid,\r\n                    TestData.session1.id,\r\n                    TestData.session1.title\r\n                )\r\n            )\r\n        )', 18, 1, NULL, '2019-02-27 12:08:28', '2019-02-27 12:08:28', NULL),
(69, 'testStartsInTenMinutes_thenHasNullTimeUntilStart', 'val vm = createSessionDetailViewModelWithAuthEnabled()\r\n        fixedTimeExecutorRule.time = testSession.startTime.minusMinutes(10).toInstant()\r\n        forceTimeUntilStartIntervalUpdate(vm)\r\n        assertEquals(null, LiveDataTestUtil.getValue(vm.timeUntilStart))', 18, 1, NULL, '2019-02-27 12:10:35', '2019-02-27 12:10:35', NULL),
(70, 'testStartsIn0Minutes_thenHasNullTimeUntilStart', 'val vm = createSessionDetailViewModelWithAuthEnabled()\r\n        fixedTimeExecutorRule.time = testSession.startTime.minusSeconds(30).toInstant()\r\n        forceTimeUntilStartIntervalUpdate(vm)\r\n        assertEquals(null, LiveDataTestUtil.getValue(vm.timeUntilStart))', 18, 1, NULL, '2019-02-27 12:10:52', '2019-02-27 12:10:52', NULL),
(71, 'testStarts10MinutesAgo_thenHasNullTimeUntilStart', 'val vm = createSessionDetailViewModelWithAuthEnabled()\r\n        fixedTimeExecutorRule.time = testSession.startTime.plusMinutes(10).toInstant()\r\n        forceTimeUntilStartIntervalUpdate(vm)\r\n        assertEquals(null, LiveDataTestUtil.getValue(vm.timeUntilStart))', 18, 1, NULL, '2019-02-27 12:11:14', '2019-02-27 12:11:14', NULL),
(72, 'testOnPlayVideo_doesNotCreateEventForVideo', 'val sessionWithoutYoutubeUrl = testSession\r\n        val vm = createSessionDetailViewModelWithAuthEnabled()\r\n\r\n        // This loads the session and forces vm.session to be set before calling onPlayVideo\r\n        vm.setSessionId(sessionWithoutYoutubeUrl.id)\r\n        LiveDataTestUtil.getValue(vm.session)\r\n\r\n        vm.onPlayVideo()\r\n        assertNull(LiveDataTestUtil.getValue(vm.navigateToYouTubeAction))', 18, 1, NULL, '2019-02-27 12:12:14', '2019-02-27 12:12:14', NULL);
INSERT INTO `test_codes` (`id`, `method_name`, `method_body`, `test_code_class_id`, `assert_count`, `deleted_at`, `created_at`, `updated_at`, `source_codes`) VALUES
(73, 'testSignedOut', 'val subject = FirebaseSignInViewModelDelegate(\r\n            FakeObserveUserAuthStateUseCase(\r\n                user = Result.Success(null),\r\n                isRegistered = Result.Success(false)\r\n            ),\r\n            createNotificationsPrefIsShownUseCase()\r\n        )\r\n\r\n        val currentFirebaseUser = LiveDataTestUtil.getValue(\r\n            subject.currentFirebaseUser\r\n        ) as Result.Success<AuthenticatedUserInfo>\r\n        assertEquals(\r\n            null,\r\n            currentFirebaseUser.data.getUid()\r\n        )\r\n        assertEquals(\r\n            null,\r\n            LiveDataTestUtil.getValue(subject.currentUserImageUri)\r\n        )\r\n        assertFalse(subject.isSignedIn())', 21, 3, NULL, '2019-02-27 12:15:19', '2019-02-27 12:15:19', NULL),
(74, 'testSignedInRegistered', 'val user = mock<AuthenticatedUserInfoBasic> {\r\n            on { getUid() }.doReturn(\"123\")\r\n            on { getPhotoUrl() }.doReturn(mock<Uri> {})\r\n            on { isSignedIn() }.doReturn(true)\r\n        }\r\n        val subject = FirebaseSignInViewModelDelegate(\r\n            FakeObserveUserAuthStateUseCase(\r\n                user = Result.Success(user),\r\n                isRegistered = Result.Success(true)\r\n            ),\r\n            createNotificationsPrefIsShownUseCase()\r\n        )\r\n\r\n        assertEquals(\r\n            user.getUid(),\r\n            (LiveDataTestUtil.getValue(subject.currentFirebaseUser) as Result.Success).data.getUid()\r\n        )\r\n        assertEquals(\r\n            user.getPhotoUrl(),\r\n            LiveDataTestUtil.getValue(subject.currentUserImageUri)\r\n        )\r\n        assertTrue(subject.isSignedIn())\r\n        assertTrue(subject.isRegistered())', 21, 4, NULL, '2019-02-27 12:16:19', '2019-02-27 12:16:19', NULL),
(75, 'testSignedInNotRegistered', 'val user = mock<AuthenticatedUserInfoBasic> {\r\n            on { getUid() }.doReturn(\"123\")\r\n            on { getPhotoUrl() }.doReturn(mock<Uri> {})\r\n            on { isSignedIn() }.doReturn(true)\r\n        }\r\n        val subject = FirebaseSignInViewModelDelegate(\r\n            FakeObserveUserAuthStateUseCase(\r\n                user = Result.Success(user),\r\n                isRegistered = Result.Success(false)\r\n            ),\r\n            createNotificationsPrefIsShownUseCase()\r\n        )\r\n\r\n        assertEquals(\r\n            user.getUid(),\r\n            (LiveDataTestUtil.getValue(subject.currentFirebaseUser) as Result.Success).data.getUid()\r\n        )\r\n        assertEquals(\r\n            user.getPhotoUrl(),\r\n            LiveDataTestUtil.getValue(subject.currentUserImageUri)\r\n        )\r\n        assertTrue(subject.isSignedIn())\r\n        assertFalse(subject.isRegistered())', 21, 4, NULL, '2019-02-27 12:16:51', '2019-02-27 12:16:51', NULL),
(76, 'testPostSignIn', 'val subject = FirebaseSignInViewModelDelegate(\r\n            FakeObserveUserAuthStateUseCase(\r\n                user = Result.Success(null),\r\n                isRegistered = Result.Success(false)\r\n            ),\r\n            createNotificationsPrefIsShownUseCase()\r\n        )\r\n\r\n        subject.emitSignInRequest()\r\n\r\n        // Check that the emitted event is a sign in request\r\n        assertEquals(\r\n            LiveDataTestUtil.getValue(subject.performSignInEvent)?.peekContent(),\r\n            SignInEvent.RequestSignIn\r\n        )', 21, 1, NULL, '2019-02-27 12:23:03', '2019-02-27 12:23:03', NULL),
(77, 'testPostSignOut', 'val subject = FirebaseSignInViewModelDelegate(\r\n            FakeObserveUserAuthStateUseCase(\r\n                user = Result.Success(null),\r\n                isRegistered = Result.Success(false)\r\n            ),\r\n            createNotificationsPrefIsShownUseCase()\r\n        )\r\n\r\n        subject.emitSignOutRequest()\r\n\r\n        assertEquals(\r\n            LiveDataTestUtil.getValue(subject.performSignInEvent)?.peekContent(),\r\n            SignInEvent.RequestSignOut\r\n        )', 21, 1, NULL, '2019-02-27 12:23:32', '2019-02-27 12:23:32', NULL),
(78, 'signedInUser_signsOut', '// Given a view model with a signed in user\r\n        val signInViewModelDelegate = FakeSignInViewModelDelegate().apply {\r\n            injectIsSignedIn = true\r\n        }\r\n        val viewModel = SignInViewModel(signInViewModelDelegate)\r\n\r\n        // When sign out is requested\r\n        viewModel.onSignOut()\r\n\r\n        // Then a sign out request is emitted\r\n        assertEquals(1, signInViewModelDelegate.signOutRequestsEmitted)\r\n\r\n        // And the dialog is dismissed\r\n        val dismissEvent = LiveDataTestUtil.getValue(viewModel.dismissDialogAction)\r\n        assertNotNull(dismissEvent?.getContentIfNotHandled())', 22, 2, NULL, '2019-02-27 12:30:38', '2019-02-27 12:30:38', NULL),
(79, 'noSignedInUser_signsIn', '// Given a view model with a signed out user\r\n        val signInViewModelDelegate = FakeSignInViewModelDelegate().apply {\r\n            injectIsSignedIn = false\r\n        }\r\n        val viewModel = SignInViewModel(signInViewModelDelegate)\r\n\r\n        // When sign out is requested\r\n        viewModel.onSignIn()\r\n\r\n        // Then a sign out request is emitted\r\n        assertEquals(1, signInViewModelDelegate.signInRequestsEmitted)\r\n\r\n        // And the dialog is dismissed\r\n        val dismissEvent = LiveDataTestUtil.getValue(viewModel.dismissDialogAction)\r\n        assertNotNull(dismissEvent?.getContentIfNotHandled())', 22, 2, NULL, '2019-02-27 12:32:09', '2019-02-27 12:32:09', NULL),
(80, 'onCancel_dialogDismiss', '// Given a view model with a signed in user\r\n        val viewModel = SignInViewModel(FakeSignInViewModelDelegate())\r\n\r\n        // When cancel is requested\r\n        viewModel.onCancel()\r\n\r\n        // Then the dialog is dismissed\r\n        val dismissEvent = LiveDataTestUtil.getValue(viewModel.dismissDialogAction)\r\n        assertNotNull(dismissEvent?.getContentIfNotHandled())', 22, 1, NULL, '2019-02-27 12:33:04', '2019-02-27 12:33:04', NULL),
(81, 'setSpeakerId_loadsSpeaker', '// Given a speaker view model\r\n        val viewModel = createViewModel()\r\n\r\n        // When the speaker ID is set\r\n        viewModel.setSpeakerId(TestData.speaker1.id)\r\n\r\n        // Then the speaker is loaded\r\n        assertEquals(TestData.speaker1, LiveDataTestUtil.getValue(viewModel.speaker))', 24, 1, NULL, '2019-02-27 12:38:33', '2019-02-27 12:38:33', NULL),
(82, 'setSpeakerId_loadsSpeakersEvents_singleEvent', '// Given a speaker view model\r\n        val viewModel = createViewModel()\r\n\r\n        // When the ID of a speaker with a single event is set\r\n        viewModel.setSpeakerId(TestData.speaker3.id)\r\n\r\n        // Then the speakers event is loaded\r\n        assertEquals(\r\n            listOf(TestData.userSession2),\r\n            LiveDataTestUtil.getValue(viewModel.speakerUserSessions)\r\n        )', 24, 1, NULL, '2019-02-27 12:39:13', '2019-02-27 12:39:13', NULL),
(83, 'setSpeakerId_loadsSpeakersEvents_multipleEvents', '// Given a speaker view model\r\n        val viewModel = createViewModel()\r\n\r\n        // When the ID of a speaker with multiple events is set\r\n        viewModel.setSpeakerId(TestData.speaker1.id)\r\n\r\n        // Then the speakers events are loaded\r\n        assertEquals(\r\n            listOf(TestData.userSession0, TestData.userSession3, TestData.userSession4),\r\n            LiveDataTestUtil.getValue(viewModel.speakerUserSessions)\r\n        )', 24, 1, NULL, '2019-02-27 12:39:40', '2019-02-27 12:39:40', NULL),
(84, 'notCompletedOnboarding_navigatesToOnboarding', '// Given that user has *not* completed onboarding\r\n        val prefs = mock<PreferenceStorage> {\r\n            on { onboardingCompleted }.doReturn(false)\r\n        }\r\n        val onboardingCompletedUseCase = OnboardingCompletedUseCase(prefs)\r\n        val viewModel = LaunchViewModel(onboardingCompletedUseCase)\r\n\r\n        // When launchDestination is observed\r\n        // Then verify user is navigated to the onboarding activity\r\n        val navigateEvent = LiveDataTestUtil.getValue(viewModel.launchDestination)\r\n        assertEquals(ONBOARDING, navigateEvent?.getContentIfNotHandled())', 25, 1, NULL, '2019-02-27 12:40:52', '2019-02-27 12:40:52', NULL),
(85, 'hasCompletedOnboarding_navigatesToMainActivity', '// Given that user *has* completed onboarding\r\n        val prefs = mock<PreferenceStorage> {\r\n            on { onboardingCompleted }.doReturn(true)\r\n        }\r\n        val onboardingCompletedUseCase = OnboardingCompletedUseCase(prefs)\r\n        val viewModel = LaunchViewModel(onboardingCompletedUseCase)\r\n\r\n        // When launchDestination is observed\r\n        // Then verify user is navigated to the main activity\r\n        val navigateEvent = LiveDataTestUtil.getValue(viewModel.launchDestination)\r\n        assertEquals(MAIN_ACTIVITY, navigateEvent?.getContentIfNotHandled())', 25, 1, NULL, '2019-02-27 12:41:13', '2019-02-27 12:41:13', NULL),
(86, 'testSerializeHappyCase', 'final UserEntity userEntityOne = serializer.deserialize(JSON_RESPONSE, UserEntity.class);\r\n    final String jsonString = serializer.serialize(userEntityOne, UserEntity.class);\r\n    final UserEntity userEntityTwo = serializer.deserialize(jsonString, UserEntity.class);\r\n\r\n    assertThat(userEntityOne.getUserId(), is(userEntityTwo.getUserId()));\r\n    assertThat(userEntityOne.getFullname(), is(equalTo(userEntityTwo.getFullname())));\r\n    assertThat(userEntityOne.getFollowers(), is(userEntityTwo.getFollowers()));', 26, 3, NULL, '2019-02-27 14:09:33', '2019-02-27 14:09:33', NULL),
(87, 'testDesearializeHappyCase', 'final UserEntity userEntity = serializer.deserialize(JSON_RESPONSE, UserEntity.class);\r\n\r\n    assertThat(userEntity.getUserId(), is(1));\r\n    assertThat(userEntity.getFullname(), is(\"Simon Hill\"));\r\n    assertThat(userEntity.getFollowers(), is(7484));', 26, 3, NULL, '2019-02-27 14:10:49', '2019-02-27 14:10:49', NULL),
(88, 'testWriteToFile', 'File fileToWrite = createDummyFile();\r\n    String fileContent = \"content\";\r\n\r\n    fileManager.writeToFile(fileToWrite, fileContent);\r\n\r\n    assertThat(fileToWrite.exists(), is(true));', 27, 1, NULL, '2019-02-27 14:12:24', '2019-02-27 14:12:24', NULL),
(89, 'testFileContent', 'File fileToWrite = createDummyFile();\r\n    String fileContent = \"content\\n\";\r\n\r\n    fileManager.writeToFile(fileToWrite, fileContent);\r\n    String expectedContent = fileManager.readFileContent(fileToWrite);\r\n\r\n    assertThat(expectedContent, is(equalTo(fileContent)));', 27, 1, NULL, '2019-02-27 14:13:15', '2019-02-27 14:13:15', NULL),
(90, 'testTransformUserEntity', 'UserEntity userEntity = createFakeUserEntity();\r\n    User user = userEntityDataMapper.transform(userEntity);\r\n\r\n    assertThat(user, is(instanceOf(User.class)));\r\n    assertThat(user.getUserId(), is(FAKE_USER_ID));\r\n    assertThat(user.getFullName(), is(FAKE_FULLNAME));', 28, 3, NULL, '2019-02-27 14:17:26', '2019-02-27 14:17:26', NULL),
(91, 'testTransformUserEntityCollection', 'UserEntity mockUserEntityOne = mock(UserEntity.class);\r\n    UserEntity mockUserEntityTwo = mock(UserEntity.class);\r\n\r\n    List<UserEntity> userEntityList = new ArrayList<UserEntity>(5);\r\n    userEntityList.add(mockUserEntityOne);\r\n    userEntityList.add(mockUserEntityTwo);\r\n\r\n    Collection<User> userCollection = userEntityDataMapper.transform(userEntityList);\r\n\r\n    assertThat(userCollection.toArray()[0], is(instanceOf(User.class)));\r\n    assertThat(userCollection.toArray()[1], is(instanceOf(User.class)));\r\n    assertThat(userCollection.size(), is(2));', 28, 3, NULL, '2019-02-27 14:17:49', '2019-02-27 14:17:49', NULL),
(92, 'testGetErrorMessageInteraction', 'repositoryErrorBundle.getErrorMessage();\r\n\r\n    verify(mockException).getMessage();', 29, 1, NULL, '2019-02-27 14:24:54', '2019-02-27 14:26:04', NULL),
(93, 'testGetUserEntityListFromApi', 'cloudUserDataStore.userEntityList();', 30, 1, NULL, '2019-02-27 14:27:26', '2019-02-27 14:27:26', NULL),
(94, 'testGetUserEntityDetailsFromApi', 'UserEntity fakeUserEntity = new UserEntity();\r\n    Observable<UserEntity> fakeObservable = Observable.just(fakeUserEntity);\r\n    given(mockRestApi.userEntityById(FAKE_USER_ID)).willReturn(fakeObservable);\r\n\r\n    cloudUserDataStore.userEntityDetails(FAKE_USER_ID);\r\n\r\n    verify(mockRestApi).userEntityById(FAKE_USER_ID);', 30, 0, NULL, '2019-02-27 14:28:32', '2019-02-27 14:34:09', NULL),
(95, 'testGetUserEntityListUnsupported', 'expectedException.expect(UnsupportedOperationException.class);\r\n    diskUserDataStore.userEntityList();', 31, 0, NULL, '2019-02-27 14:33:27', '2019-02-27 14:33:27', NULL),
(96, 'testGetUserEntityDetailesFromCache', 'diskUserDataStore.userEntityDetails(FAKE_USER_ID);\r\n    verify(mockUserCache).get(FAKE_USER_ID);', 31, 0, NULL, '2019-02-27 14:35:01', '2019-02-27 14:35:01', NULL),
(97, 'testCreateDiskDataStore', 'given(mockUserCache.isCached(FAKE_USER_ID)).willReturn(true);\r\n    given(mockUserCache.isExpired()).willReturn(false);\r\n\r\n    UserDataStore userDataStore = userDataStoreFactory.create(FAKE_USER_ID);\r\n\r\n    assertThat(userDataStore, is(notNullValue()));\r\n    assertThat(userDataStore, is(instanceOf(DiskUserDataStore.class)));\r\n\r\n    verify(mockUserCache).isCached(FAKE_USER_ID);\r\n    verify(mockUserCache).isExpired();', 32, 2, NULL, '2019-02-27 14:36:25', '2019-02-27 14:36:25', NULL),
(98, 'testCreateCloudDataStore', 'given(mockUserCache.isExpired()).willReturn(true);\r\n    given(mockUserCache.isCached(FAKE_USER_ID)).willReturn(false);\r\n\r\n    UserDataStore userDataStore = userDataStoreFactory.create(FAKE_USER_ID);\r\n\r\n    assertThat(userDataStore, is(notNullValue()));\r\n    assertThat(userDataStore, is(instanceOf(CloudUserDataStore.class)));\r\n\r\n    verify(mockUserCache).isExpired();', 32, 2, NULL, '2019-02-27 14:36:43', '2019-02-27 14:36:43', NULL),
(99, 'testGetUsersHappyCase', 'List<UserEntity> usersList = new ArrayList<>();\r\n    usersList.add(new UserEntity());\r\n    given(mockUserDataStore.userEntityList()).willReturn(Observable.just(usersList));\r\n\r\n    userDataRepository.users();\r\n\r\n    verify(mockUserDataStoreFactory).createCloudDataStore();\r\n    verify(mockUserDataStore).userEntityList();', 33, 0, NULL, '2019-02-27 14:46:41', '2019-02-27 14:46:41', NULL),
(100, 'testGetUserHappyCase', 'UserEntity userEntity = new UserEntity();\r\n    given(mockUserDataStore.userEntityDetails(FAKE_USER_ID)).willReturn(Observable.just(userEntity));\r\n    userDataRepository.user(FAKE_USER_ID);\r\n\r\n    verify(mockUserDataStoreFactory).create(FAKE_USER_ID);\r\n    verify(mockUserDataStore).userEntityDetails(FAKE_USER_ID);', 33, 0, NULL, '2019-02-27 14:46:59', '2019-02-27 14:46:59', NULL),
(101, 'testGetErrorMessageInteraction', 'defaultErrorBundle.getErrorMessage();\r\n\r\n    verify(mockException).getMessage();', 34, 0, NULL, '2019-02-28 03:21:52', '2019-02-28 03:21:52', NULL),
(102, 'testGetUserDetailsUseCaseObservableHappyCase', 'getUserDetails.buildUseCaseObservable(Params.forUser(USER_ID));\r\n\r\n    verify(mockUserRepository).user(USER_ID);\r\n    verifyNoMoreInteractions(mockUserRepository);\r\n    verifyZeroInteractions(mockPostExecutionThread);\r\n    verifyZeroInteractions(mockThreadExecutor);', 35, 0, NULL, '2019-02-28 03:24:34', '2019-02-28 03:24:34', NULL),
(103, 'testShouldFailWhenNoOrEmptyParameters', 'expectedException.expect(NullPointerException.class);\r\n    getUserDetails.buildUseCaseObservable(null);', 35, 0, NULL, '2019-02-28 03:24:56', '2019-02-28 03:24:56', NULL),
(104, 'testGetUserListUseCaseObservableHappyCase', 'getUserList.buildUseCaseObservable(null);\r\n\r\n    verify(mockUserRepository).users();\r\n    verifyNoMoreInteractions(mockUserRepository);\r\n    verifyZeroInteractions(mockThreadExecutor);\r\n    verifyZeroInteractions(mockPostExecutionThread);', 36, 0, NULL, '2019-02-28 03:26:36', '2019-02-28 03:26:36', NULL),
(105, 'testBuildUseCaseObservableReturnCorrectResult', 'useCase.execute(testObserver, Params.EMPTY);\r\n\r\n    assertThat(testObserver.valuesCount).isZero();', 37, 0, NULL, '2019-02-28 03:30:56', '2019-02-28 03:30:56', NULL),
(106, 'testSubscriptionWhenExecutingUseCase', 'useCase.execute(testObserver, Params.EMPTY);\r\n    useCase.dispose();\r\n\r\n    assertThat(testObserver.isDisposed()).isTrue();', 37, 1, NULL, '2019-02-28 03:32:54', '2019-02-28 03:32:54', NULL),
(107, 'testShouldFailWhenExecuteWithNullObserver', 'expectedException.expect(NullPointerException.class);\r\n    useCase.execute(null, Params.EMPTY);', 37, 0, NULL, '2019-02-28 03:33:42', '2019-02-28 03:33:42', NULL),
(108, 'testUserConstructorHappyCase', 'final int userId = user.getUserId();\r\n\r\n    assertThat(userId).isEqualTo(FAKE_USER_ID);', 38, 1, NULL, '2019-02-28 03:35:36', '2019-02-28 03:35:36', NULL),
(109, 'testNetworkConnectionErrorMessage', 'String expectedMessage = getContext().getString(R.string.exception_message_no_connection);\r\n    String actualMessage = ErrorMessageFactory.create(getContext(),\r\n        new NetworkConnectionException());\r\n\r\n    assertThat(actualMessage, is(equalTo(expectedMessage)));', 39, 1, NULL, '2019-02-28 03:39:19', '2019-02-28 03:39:19', NULL),
(110, 'testUserNotFoundErrorMessage', 'String expectedMessage = getContext().getString(R.string.exception_message_user_not_found);\r\n    String actualMessage = ErrorMessageFactory.create(getContext(), new UserNotFoundException());\r\n\r\n    assertThat(actualMessage, is(equalTo(expectedMessage)));', 39, 1, NULL, '2019-02-28 03:40:34', '2019-02-28 03:40:34', NULL),
(111, 'testTransformUser', 'User user = createFakeUser();\r\n    UserModel userModel = userModelDataMapper.transform(user);\r\n\r\n    assertThat(userModel, is(instanceOf(UserModel.class)));\r\n    assertThat(userModel.getUserId(), is(FAKE_USER_ID));\r\n    assertThat(userModel.getFullName(), is(FAKE_FULL_NAME));', 40, 3, NULL, '2019-02-28 03:42:16', '2019-02-28 03:42:16', NULL),
(112, 'testTransformUserCollection', 'User mockUserOne = mock(User.class);\r\n    User mockUserTwo = mock(User.class);\r\n\r\n    List<User> userList = new ArrayList<User>(5);\r\n    userList.add(mockUserOne);\r\n    userList.add(mockUserTwo);\r\n\r\n    Collection<UserModel> userModelList = userModelDataMapper.transform(userList);\r\n\r\n    assertThat(userModelList.toArray()[0], is(instanceOf(UserModel.class)));\r\n    assertThat(userModelList.toArray()[1], is(instanceOf(UserModel.class)));\r\n    assertThat(userModelList.size(), is(2));', 40, 3, NULL, '2019-02-28 03:42:42', '2019-02-28 03:42:42', NULL),
(113, 'testUserDetailsPresenterInitialize', 'given(mockUserDetailsView.context()).willReturn(mockContext);\r\n\r\n    userDetailsPresenter.initialize(USER_ID);\r\n\r\n    verify(mockUserDetailsView).hideRetry();\r\n    verify(mockUserDetailsView).showLoading();\r\n    verify(mockGetUserDetails).execute(any(DisposableObserver.class), any(Params.class));', 41, 0, NULL, '2019-02-28 03:45:04', '2019-02-28 03:45:04', NULL),
(114, 'testUserListPresenterInitialize', 'given(mockUserListView.context()).willReturn(mockContext);\r\n\r\n    userListPresenter.initialize();\r\n\r\n    verify(mockUserListView).hideRetry();\r\n    verify(mockUserListView).showLoading();\r\n    verify(mockGetUserList).execute(any(DisposableObserver.class), any(Void.class));', 42, 0, NULL, '2019-02-28 03:46:47', '2019-02-28 03:46:47', NULL),
(115, 'onLibraryClick', '// Click on all the libraries\r\n        aboutViewModel.libraries.forEach {\r\n            aboutViewModel.onLibraryClick(it)\r\n            val event = LiveDataTestUtil.getValue(aboutViewModel.navigationTarget)\r\n            assertThat(event?.peek(), `is`(equalTo(it.link)))\r\n        }', 43, 14, NULL, '2019-02-28 04:04:03', '2019-02-28 04:04:03', NULL),
(116, 'getKeys_returnsNullIfNothingWasAdded', '// Given that we haven\'t saved any source\r\n\r\n        // When getting the keys\r\n        val sources = dataSource.getKeys()\r\n\r\n        // The set of keys is null\r\n        assertNull(sources)', 44, 1, NULL, '2019-02-28 04:07:38', '2019-02-28 04:07:38', NULL),
(117, 'addedSource_canBeRetrieved', '// Given a source key\r\n        // When adding a source\r\n        dataSource.addSource(dnSource, false)\r\n\r\n        // The key can be retrieved\r\n        val key = dataSource.getKeys()\r\n        assertEquals(setOf(dnSource), key)\r\n        // And the active state is the correct one\r\n        val active = dataSource.getSourceActiveState(dnSource)\r\n        assertFalse(active)', 44, 2, NULL, '2019-02-28 04:08:24', '2019-02-28 04:08:24', NULL),
(118, 'addedSources_canBeRetrieved', '// Given a set of keys\r\n        val source1 = \"DN\"\r\n        val source2 = \"PH\"\r\n        val sources = setOf(source1, source2)\r\n\r\n        // When adding sources\r\n        dataSource.addSources(sources, false)\r\n\r\n        // Then the keys can be retrieved\r\n        val sourcesSaved = dataSource.getKeys()\r\n        assertEquals(sources, sourcesSaved)\r\n        // And the active state is the correct one\r\n        val activeSource1 = dataSource.getSourceActiveState(source1)\r\n        assertFalse(activeSource1)\r\n        val activeSource2 = dataSource.getSourceActiveState(source1)\r\n        assertFalse(activeSource2)', 44, 3, NULL, '2019-02-28 04:08:44', '2019-02-28 04:08:44', NULL),
(119, 'updateSource', '// Given a source saved\r\n        dataSource.addSource(dnSource, true)\r\n\r\n        // When updating the source\r\n        dataSource.updateSource(dnSource, false)\r\n\r\n        // Then the source active state was updated\r\n        val active = dataSource.getSourceActiveState(dnSource)\r\n        assertFalse(active)', 44, 1, NULL, '2019-02-28 04:10:11', '2019-02-28 04:10:11', NULL),
(120, 'removeSource', '// Given a source saved\r\n        dataSource.addSource(dnSource, false)\r\n\r\n        // When removing a source\r\n        dataSource.removeSource(dnSource)\r\n\r\n        // Then the key can\'t be retrieved\r\n        val sources = dataSource.getKeys()\r\n        assertNotNull(sources)\r\n        assertTrue(sources!!.isEmpty())\r\n        // Then the active state is false\r\n        val active = dataSource.getSourceActiveState(dnSource)\r\n        assertFalse(active)', 44, 3, NULL, '2019-02-28 04:15:05', '2019-02-28 04:15:05', NULL),
(121, 'removeSource', '// Given a source saved\r\n        dataSource.addSource(dnSource, false)\r\n\r\n        // When removing a source\r\n        dataSource.removeSource(dnSource)\r\n\r\n        // Then the key can\'t be retrieved\r\n        val sources = dataSource.getKeys()\r\n        assertNotNull(sources)\r\n        assertTrue(sources!!.isEmpty())\r\n        // Then the active state is false\r\n        val active = dataSource.getSourceActiveState(dnSource)\r\n        assertFalse(active)', 44, 3, NULL, '2019-02-28 04:15:05', '2019-02-28 04:15:05', NULL),
(122, 'insertAndGetLoggedInUser', '// Given a LoggedInUser that has been inserted into the DB\r\n        loggedInUserDao.setLoggedInUser(loggedInUser)\r\n\r\n        // When getting the LoggedInUser via the DAO\r\n        val userFromDb = LiveDataTestUtil.getValue(loggedInUserDao.getLoggedInUser())\r\n\r\n        // Then the retrieved LoggedInUser matches the original LoggedInUser object\r\n        assertEquals(loggedInUser, userFromDb)', 45, 1, NULL, '2019-02-28 04:19:19', '2019-02-28 04:19:19', NULL),
(123, 'replaceLoggedInUser', '// Given a LoggedInUser that has been inserted into the DB\r\n        loggedInUserDao.setLoggedInUser(loggedInUser)\r\n\r\n        // When the user\'s information changes and a subsequent insert is triggered\r\n        val updatedUser = LoggedInUser(\r\n            id = 1L,\r\n            displayName = \"LL Cool L\",\r\n            firstName = \"Loggy\",\r\n            lastName = \"Loggerson\",\r\n            portraitUrl = \"www\",\r\n            upvotes = listOf(1L, 2L, 3L)\r\n        )\r\n        loggedInUserDao.setLoggedInUser(updatedUser)\r\n\r\n        // Then a subsequent query for the LoggedInUser should show the updated information\r\n        val userFromDb = LiveDataTestUtil.getValue(loggedInUserDao.getLoggedInUser())\r\n        assertEquals(updatedUser, userFromDb)', 45, 1, NULL, '2019-02-28 04:20:19', '2019-02-28 04:20:19', NULL),
(124, 'uniqueLoggedInUser', '// Given a LoggedInUser that has been inserted into the DB\r\n        loggedInUserDao.setLoggedInUser(loggedInUser)\r\n\r\n        // When inserting another LoggedInUser without first deleting the previous user\r\n        val newUser = LoggedInUser(\r\n            id = 2L,\r\n            displayName = \"Moggy M\",\r\n            firstName = \"Moggy\",\r\n            lastName = \"Moggerson\",\r\n            portraitUrl = \"www\",\r\n            upvotes = listOf(4L, 5L, 6L)\r\n        )\r\n        loggedInUserDao.setLoggedInUser(newUser)\r\n\r\n        // Then a query for LoggedInUser should return the new user\r\n        val userFromDb = LiveDataTestUtil.getValue(loggedInUserDao.getLoggedInUser())\r\n        assertEquals(newUser, userFromDb)', 45, 1, NULL, '2019-02-28 04:20:39', '2019-02-28 04:20:39', NULL),
(125, 'deleteLoggedInUser', '// Given a LoggedInUser that has been inserted into the DB\r\n        loggedInUserDao.setLoggedInUser(loggedInUser)\r\n\r\n        // When the user is deleted from the database\r\n        loggedInUserDao.deleteLoggedInUser()\r\n\r\n        // Then a query for the LoggedInUser should be null\r\n        val userFromDb = LiveDataTestUtil.getValue(loggedInUserDao.getLoggedInUser())\r\n        assertNull(userFromDb)', 45, 1, NULL, '2019-02-28 04:21:39', '2019-02-28 04:21:39', NULL),
(126, 'authToken_default', 'assertNull(dataSource.authToken)', 46, 1, NULL, '2019-02-28 04:23:51', '2019-02-28 04:23:51', NULL),
(127, 'authToken_set', '// When setting an auth token\r\n        dataSource.authToken = \"my token\"\r\n\r\n        // Then the retrieved token is the correct one\r\n        assertEquals(\"my token\", dataSource.authToken)', 46, 1, NULL, '2019-02-28 04:24:08', '2019-02-28 04:24:08', NULL),
(128, 'clearData', '// Given that an auth token was set\r\n        dataSource.authToken = \"token\"\r\n\r\n        // When clearing data\r\n        dataSource.clearData()\r\n\r\n        // Then the auth token is also cleared\r\n        assertNull(dataSource.authToken)', 46, 1, NULL, '2019-02-28 04:24:23', '2019-02-28 04:24:23', NULL),
(129, 'user_default', '// When getting the default user from the data source\r\n        // Then it should be null\r\n        assertNull(dataSource.user)', 47, 1, NULL, '2019-02-28 04:25:46', '2019-02-28 04:25:46', NULL),
(130, 'user_set', '// Given a user\r\n        val user = LoggedInUser(\r\n            id = 3,\r\n            firstName = \"Pladinium\",\r\n            lastName = \"Plaidescu\",\r\n            displayName = \"Plaidinium Plaidescu\",\r\n            portraitUrl = \"www\",\r\n            upvotes = listOf(1L, 2L)\r\n        )\r\n\r\n        // When inserting it in the data source\r\n        dataSource.user = user\r\n\r\n        // Then it can then be retrieved\r\n        val expected = LoggedInUser(\r\n            id = 3,\r\n            firstName = \"\",\r\n            lastName = \"\",\r\n            displayName = \"Plaidinium Plaidescu\",\r\n            portraitUrl = \"www\",\r\n            upvotes = emptyList()\r\n        )\r\n        assertEquals(expected, dataSource.user)', 47, 1, NULL, '2019-02-28 04:26:00', '2019-02-28 04:26:00', NULL),
(131, 'logout', '// Given a user set\r\n        val user = LoggedInUser(\r\n            id = 3,\r\n            firstName = \"Plaidy\",\r\n            lastName = \"Plaidinkski\",\r\n            displayName = \"Plaidy Plaidinski\",\r\n            portraitUrl = \"www\",\r\n            upvotes = listOf(123L, 234L, 345L)\r\n        )\r\n        dataSource.user = user\r\n\r\n        // When logging out\r\n        dataSource.logout()\r\n\r\n        // Then the user is null\r\n        assertNull(dataSource.user)', 47, 1, NULL, '2019-02-28 04:26:20', '2019-02-28 04:26:20', NULL),
(132, 'doBeforeTextChanged', 'val called = AtomicBoolean()\r\n\r\n        view.doBeforeTextChanged { _, _, _, _ ->\r\n            called.set(true)\r\n        }\r\n\r\n        view.text = \"text\"\r\n        assertTrue(called.get())', 48, 1, NULL, '2019-02-28 04:30:22', '2019-02-28 04:30:22', NULL),
(133, 'doOnTextChanged', 'val called = AtomicBoolean()\r\n\r\n        view.doOnTextChanged { _, _, _, _ ->\r\n            called.set(true)\r\n        }\r\n\r\n        view.text = \"text\"\r\n        assertTrue(called.get())', 48, 1, NULL, '2019-02-28 04:30:34', '2019-02-28 04:30:34', NULL),
(134, 'doAfterTextChanged', 'val called = AtomicBoolean()\r\n\r\n        view.doAfterTextChanged { _ ->\r\n            called.set(true)\r\n        }\r\n\r\n        view.text = \"text\"\r\n        assertTrue(called.get())', 48, 1, NULL, '2019-02-28 04:30:48', '2019-02-28 04:30:48', NULL),
(135, 'getSources_whenNoOtherSourceWasAdded', '// Given that no other source was added\r\n        whenever(localDataSource.getKeys()).thenReturn(null)\r\n\r\n        // When getting the sources\r\n        val sources = repository.getSources()\r\n\r\n        // Then the default sources are returned\r\n        assertEquals(defaultSources, sources)', 49, 1, NULL, '2019-02-28 07:20:39', '2019-02-28 07:20:39', NULL),
(136, 'getSources_whenOtherSourcesWereAdded', '// Given that other sources were added\r\n        whenever(localDataSource.getKeys()).thenReturn(defaultSourcesKeys)\r\n        whenever(localDataSource.getSourceActiveState(eq(dribbbleSource.key)))\r\n                .thenReturn(dribbbleSource.active)\r\n\r\n        // When getting the sources\r\n        val sources = repository.getSources()\r\n\r\n        // Then the default sources are returned\r\n        assertEquals(defaultSources.size, sources.size)', 49, 1, NULL, '2019-02-28 07:21:16', '2019-02-28 07:21:16', NULL),
(137, 'getSources_whenDeprecatedSourcesWereAdded', '// Given that other deprecated sources were added\r\n        val oldSources = mutableSetOf(\r\n                \"SOURCE_DESIGNER_NEWS_RECENT\",\r\n                \"SOURCE_DRIBBBLE_query\"\r\n        ).toSet()\r\n        whenever(localDataSource.getKeys()).thenReturn(oldSources)\r\n\r\n        // When getting the sources\r\n        val sources = repository.getSources()\r\n\r\n        // Then the list of sources is empty\r\n        assertTrue(sources.isEmpty())', 49, 1, NULL, '2019-02-28 07:21:35', '2019-02-28 07:21:35', NULL),
(138, 'addSource_addsSourceToDataSource', '// When adding a source\r\n        repository.addSource(designerNewsSource)\r\n\r\n        // Then the source was added to the data source\r\n        verify(localDataSource).addSource(designerNewsSource.key, designerNewsSource.active)', 49, 0, NULL, '2019-02-28 07:22:36', '2019-02-28 07:22:36', NULL),
(139, 'updateSource', '// When updating a source\r\n        repository.updateSource(designerNewsSource)\r\n\r\n        // Then the source was updated in the data source\r\n        verify(localDataSource).updateSource(designerNewsSource.key, designerNewsSource.active)', 49, 0, NULL, '2019-02-28 07:23:00', '2019-02-28 07:23:00', NULL),
(140, 'removeSource', '// When removing a source\r\n        repository.removeSource(designerNewsSource)\r\n\r\n        // Then the source was removed from the data source\r\n        verify(localDataSource).removeSource(designerNewsSource.key)', 49, 0, NULL, '2019-02-28 07:24:05', '2019-02-28 07:24:05', NULL),
(141, 'addSource_addsSourceCache', '// When adding a source\r\n        repository.addSource(designerNewsSource)\r\n\r\n        // Then the source is returned\r\n        val sources = repository.getSources()\r\n        assertEquals(listOf(designerNewsSource), sources)', 49, 1, NULL, '2019-02-28 07:24:24', '2019-02-28 07:24:24', NULL),
(142, 'updateSource_updatesInCache', '// Given an added source\r\n        repository.addSource(designerNewsSource)\r\n\r\n        // When updating a source\r\n        val designerNewsInactive = Source.DesignerNewsSearchSource(\r\n                \"query\",\r\n                false\r\n        )\r\n        repository.updateSource(designerNewsInactive)\r\n\r\n        // Then the updated source is returned\r\n        val sources = repository.getSources()\r\n        assertEquals(1, sources.size)\r\n        val updatedSource = sources[0]\r\n        assertEquals(designerNewsInactive.key, updatedSource.key)\r\n        assertEquals(designerNewsInactive.active, updatedSource.active)', 49, 3, NULL, '2019-02-28 07:26:19', '2019-02-28 07:26:19', NULL),
(143, 'removeSource_removesFromCache', '// Given an added source\r\n        repository.addSource(designerNewsSource)\r\n\r\n        // When removing a source\r\n        repository.removeSource(designerNewsSource)\r\n\r\n        // Then the source was removed from cache\r\n        val sources = repository.getSources()\r\n        assertTrue(sources.isEmpty())', 49, 1, NULL, '2019-02-28 07:26:35', '2019-02-28 07:26:35', NULL),
(144, 'listenerNotified_whenSourceAdded', '// Given a callback registered\r\n        var sourceAdded: Source? = null\r\n        val callback = object : FiltersChangedCallback() {\r\n            override fun onFiltersChanged(changedFilter: Source) {\r\n                super.onFiltersChanged(changedFilter)\r\n                sourceAdded = changedFilter\r\n            }\r\n        }\r\n        repository.registerFilterChangedCallback(callback)\r\n\r\n        // When adding a source\r\n        repository.addSource(designerNewsSource)\r\n\r\n        // Then the callback was triggered\r\n        assertEquals(sourceAdded, designerNewsSource)', 49, 1, NULL, '2019-02-28 07:40:10', '2019-02-28 07:40:10', NULL),
(145, 'listenerNotified_whenSourceUpdated', '// Given a callback registered\r\n        var sourceUpdated: Source? = null\r\n        val callback = object : FiltersChangedCallback() {\r\n            override fun onFiltersChanged(changedFilter: Source) {\r\n                super.onFiltersChanged(changedFilter)\r\n                sourceUpdated = changedFilter\r\n            }\r\n        }\r\n        repository.registerFilterChangedCallback(callback)\r\n\r\n        // When updating a source\r\n        repository.updateSource(designerNewsSource)\r\n\r\n        // Then the callback was triggered\r\n        assertEquals(sourceUpdated, designerNewsSource)', 49, 1, NULL, '2019-02-28 07:40:26', '2019-02-28 07:40:26', NULL),
(146, 'listenerNotified_whenSourceRemoved', '// Given a callback registered\r\n        var sourceRemoved: Source? = null\r\n        val callback = object : FiltersChangedCallback() {\r\n            override fun onFilterRemoved(removed: Source) {\r\n                sourceRemoved = removed\r\n            }\r\n        }\r\n        repository.registerFilterChangedCallback(callback)\r\n\r\n        // When removing a source\r\n        repository.removeSource(designerNewsSource)\r\n\r\n        // Then the callback was triggered\r\n        assertEquals(sourceRemoved, designerNewsSource)', 49, 1, NULL, '2019-02-28 07:40:40', '2019-02-28 07:40:40', NULL),
(147, 'getActiveSourceCount', '// Given an active and an inactive source added\r\n        repository.addSource(designerNewsSource) // active source\r\n        repository.addSource(productHuntSource) // inactive source\r\n        val keys = setOf(dnSourceKey, phSourceKey)\r\n        whenever(localDataSource.getKeys()).thenReturn(keys)\r\n        whenever(localDataSource.getSourceActiveState(dnSourceKey)).thenReturn(true)\r\n\r\n        // When getting the number of active sources\r\n        val activeSources = repository.getActiveSourcesCount()\r\n\r\n        // Then the correct number is returned\r\n        assertEquals(1, activeSources)', 49, 1, NULL, '2019-02-28 07:41:16', '2019-02-28 07:41:16', NULL),
(148, 'csvToStringArray_oneValue', '// Given a non-empty CSV string with one value\r\n        val csv = \"1\"\r\n\r\n        // When the string is converted via the type converter\r\n        val actualLongList = Converters().csvToLongArray(csv)\r\n\r\n        // Then it should return a list with one element\r\n        assertEquals(listOf(1L), actualLongList)', 50, 1, NULL, '2019-02-28 07:43:19', '2019-02-28 07:43:19', NULL),
(149, 'csvToStringArray_multipleValues', '// Given a non-empty CSV string with multiple values\r\n        val csv = \"1,2,3\"\r\n\r\n        // When the string is converted via the type converter\r\n        val actualLongList = Converters().csvToLongArray(csv)\r\n\r\n        // Then it should return a list of the strings, split by the delimiter\r\n        assertEquals(listOf(1L, 2L, 3L), actualLongList)', 50, 1, NULL, '2019-02-28 07:43:35', '2019-02-28 07:43:35', NULL),
(150, 'csvToStringArray_emptyString', '// Given an empty string\r\n        val csv = \"\"\r\n\r\n        // When the string is converted via the type converter\r\n        val actualLongList = Converters().csvToLongArray(csv)\r\n\r\n        // Then it should return an empty list\r\n        assertEquals(emptyList<String>(), actualLongList)', 50, 1, NULL, '2019-02-28 07:43:51', '2019-02-28 07:43:51', NULL),
(151, 'stringListToCsv_oneValue', '// Given a list with one element\r\n        val list = listOf(1L)\r\n\r\n        // When the list is converted via the type converter\r\n        val actualCsv = Converters().longListToCsv(list)\r\n\r\n        // Then it should return a CSV string with one value\r\n        assertEquals(\"1\", actualCsv)', 50, 1, NULL, '2019-02-28 07:44:04', '2019-02-28 07:44:04', NULL),
(152, 'stringListToCsv_multipleValues', '// Given a list with multiple elements\r\n        val list = listOf(1L, 2L, 3L)\r\n\r\n        // When the list is converted via the type converter\r\n        val actualCsv = Converters().longListToCsv(list)\r\n\r\n        // Then it should return a CSV string with multiple values\r\n        assertEquals(\"1,2,3\", actualCsv)', 50, 1, NULL, '2019-02-28 07:44:18', '2019-02-28 07:44:18', NULL),
(153, 'stringListToCsv_emptyList', '// Given an empty list\r\n        val list = emptyList<Long>()\r\n\r\n        // When the list is converted via the type converter\r\n        val actualCsv = Converters().longListToCsv(list)\r\n\r\n        // Then it should return an empty string\r\n        assertEquals(\"\", actualCsv)', 50, 1, NULL, '2019-02-28 07:44:33', '2019-02-28 07:44:33', NULL),
(154, 'parsesHtml', '// Given a response from a Designer News search\r\n        val response = ResponseBody.create(null, loadData(\"/designernews_search.html\"))\r\n\r\n        // When we convert this\r\n        val searchResults = DesignerNewsSearchConverter.convert(response)\r\n\r\n        // Then the html is parsed into a list of search results\r\n        assertEquals(6, searchResults.size)\r\n\r\n        // Then the ID is extracted correctly\r\n        assertEquals(\"68181\", searchResults[0])', 51, 2, NULL, '2019-02-28 07:49:37', '2019-02-28 07:49:37', NULL),
(155, 'getComments_whenRequestSuccessful', '// Given that the service responds with success\r\n        val result = Response.success(repliesResponses)\r\n        whenever(service.getComments(\"1\")).thenReturn(CompletableDeferred(result))\r\n\r\n        // When getting the list of comments\r\n        val response = dataSource.getComments(listOf(1L))\r\n\r\n        // Then the response is the expected one\r\n        assertNotNull(response)\r\n        assertEquals(Result.Success(repliesResponses), response)', 52, 2, NULL, '2019-02-28 07:54:35', '2019-02-28 07:54:35', NULL),
(156, 'getComments_forMultipleComments', '// Given that the service responds with success for specific ids\r\n        val result = Response.success(repliesResponses)\r\n        whenever(service.getComments(\"11,12\")).thenReturn(CompletableDeferred(result))\r\n\r\n        // When getting the list of comments for specific list of ids\r\n        val response = dataSource.getComments(listOf(11L, 12L))\r\n\r\n        // Then the response is the expected one\r\n        assertNotNull(response)\r\n        assertEquals(Result.Success(repliesResponses), response)', 52, 2, NULL, '2019-02-28 07:54:49', '2019-02-28 07:54:49', NULL),
(157, 'getComments_whenRequestFailed', '// Given that the service responds with failure\r\n        val result = Response.error<List<CommentResponse>>(\r\n            400,\r\n            errorResponseBody\r\n        )\r\n        whenever(service.getComments(\"1\")).thenReturn(CompletableDeferred(result))\r\n\r\n        // When getting the list of comments\r\n        val response = dataSource.getComments(listOf(1L))\r\n\r\n        // Then the response is not successful\r\n        assertTrue(response is Result.Error)', 52, 1, NULL, '2019-02-28 07:55:05', '2019-02-28 07:55:05', NULL),
(158, 'getComments_whenResponseEmpty', '// Given that the service responds with success but with an empty response\r\n        val result = Response.success<List<CommentResponse>>(null)\r\n        whenever(service.getComments(\"1\")).thenReturn(CompletableDeferred(result))\r\n\r\n        // When getting the list of comments\r\n        val response = dataSource.getComments(listOf(1L))\r\n\r\n        // Then the response is not successful\r\n        assertTrue(response is Result.Error)', 52, 1, NULL, '2019-02-28 07:55:25', '2019-02-28 07:55:25', NULL),
(159, 'getComments_whenException', '// Given that the service throws an exception\r\n        doAnswer { throw UnknownHostException() }\r\n            .whenever(service).getComments(\"1\")\r\n\r\n        // When getting the list of comments\r\n        val response = dataSource.getComments(listOf(1L))\r\n\r\n        // Then the response is not successful\r\n        assertTrue(response is Result.Error)', 52, 1, NULL, '2019-02-28 07:55:41', '2019-02-28 07:55:41', NULL),
(160, 'comment_whenParentCommentIdAndStoryIdNull', '// When posting a comment with both the parent comment id and the story id are null\r\n        dataSource.comment(\"text\", null, null, 11L)\r\n        // Then an exception is thrown\r\n        Unit', 52, 0, NULL, '2019-02-28 07:56:53', '2019-02-28 07:56:53', NULL),
(161, 'comment_whenException', '// Given that the service throws an exception\r\n        val request = NewCommentRequest(body, \"11\", null, \"111\")\r\n        doAnswer { throw UnknownHostException() }\r\n            .whenever(service).comment(request)\r\n\r\n        // When adding a comment\r\n        val response = dataSource.comment(body, 11L, null, 111L)\r\n\r\n        // Then the response is not successful\r\n        assertTrue(response is Result.Error)', 52, 1, NULL, '2019-02-28 07:57:09', '2019-02-28 07:57:09', NULL),
(162, 'comment_withNoComments', '// Given a response returned for a request\r\n        val response = Response.success(PostCommentResponse(emptyList()))\r\n        val request = NewCommentRequest(body, \"11\", null, \"111\")\r\n        whenever(service.comment(request)).thenReturn(CompletableDeferred(response))\r\n\r\n        // When adding a comment\r\n        val result = dataSource.comment(body, 11L, null, 111L)\r\n\r\n        // Then the result is not successful\r\n        assertTrue(result is Result.Error)', 52, 1, NULL, '2019-02-28 07:57:25', '2019-02-28 07:57:25', NULL),
(163, 'comment_withComments', '// Given a response returned for a request\r\n        val response = Response.success(\r\n            PostCommentResponse(listOf(replyResponse1))\r\n        )\r\n        val request = NewCommentRequest(body, \"11\", null, \"111\")\r\n        whenever(service.comment(request)).thenReturn(CompletableDeferred(response))\r\n\r\n        // When adding a comment\r\n        val result = dataSource.comment(body, 11L, null, 111L)\r\n\r\n        // Then the result is successful\r\n        assertEquals(result, Result.Success(replyResponse1))', 52, 1, NULL, '2019-02-28 07:57:37', '2019-02-28 07:57:37', NULL),
(164, 'comment_withComments', '// Given a response returned for a request\r\n        val response = Response.success(\r\n            PostCommentResponse(listOf(replyResponse1))\r\n        )\r\n        val request = NewCommentRequest(body, \"11\", null, \"111\")\r\n        whenever(service.comment(request)).thenReturn(CompletableDeferred(response))\r\n\r\n        // When adding a comment\r\n        val result = dataSource.comment(body, 11L, null, 111L)\r\n\r\n        // Then the result is successful\r\n        assertEquals(result, Result.Success(replyResponse1))', 52, 1, NULL, '2019-02-28 07:57:38', '2019-02-28 07:57:38', NULL),
(165, 'getComments_withSuccess', '// Given a list of comment responses that are return for a specific list of ids\r\n        val ids = listOf(1L)\r\n        val result = Result.Success(repliesResponses)\r\n        whenever(dataSource.getComments(ids)).thenReturn(result)\r\n\r\n        // When requesting the comments\r\n        val data = repository.getComments(ids)\r\n\r\n        // The correct response is returned\r\n        assertEquals(result, data)', 53, 1, NULL, '2019-02-28 08:00:03', '2019-02-28 08:00:03', NULL),
(166, 'getComments_withError', '// Given a list of comment responses that are return for a specific list of ids\r\n        val ids = listOf(1L)\r\n        val result = Result.Error(IOException(\"error\"))\r\n        whenever(dataSource.getComments(ids)).thenReturn(result)\r\n\r\n        // When requesting the comments\r\n        val data = repository.getComments(ids)\r\n\r\n        // The correct response is returned\r\n        assertEquals(result, data)', 53, 1, NULL, '2019-02-28 08:00:16', '2019-02-28 08:00:16', NULL),
(167, 'postStoryComment_withSuccess', '// Given that a result is return when posting a story comment\r\n        val result = Result.Success(replyResponse1)\r\n        whenever(\r\n            dataSource.comment(\r\n                commentBody = body,\r\n                parentCommentId = null,\r\n                storyId = 11L,\r\n                userId = 111L\r\n            )\r\n        ).thenReturn(result)\r\n\r\n        // When posting a story comment\r\n        val data = repository.postStoryComment(body, 11L, 111L)\r\n\r\n        // The correct response is returned\r\n        assertEquals(result, data)', 53, 1, NULL, '2019-02-28 08:00:49', '2019-02-28 08:00:49', NULL),
(168, 'postStoryComment_withError', '// Given that an error result is return when posting a story comment\r\n        val result = Result.Error(IOException(\"error\"))\r\n        whenever(\r\n            dataSource.comment(\r\n                commentBody = body,\r\n                parentCommentId = null,\r\n                storyId = 11L,\r\n                userId = 111L\r\n            )\r\n        ).thenReturn(result)\r\n\r\n        // When posting a story comment\r\n        val data = repository.postStoryComment(body, 11L, 111L)\r\n\r\n        // The correct response is returned\r\n        assertEquals(result, data)', 53, 1, NULL, '2019-02-28 08:01:02', '2019-02-28 08:01:02', NULL),
(169, 'postReply_withSuccess', '// Given that a result is return when posting a story comment\r\n        val result = Result.Success(replyResponse1)\r\n        whenever(\r\n            dataSource.comment(\r\n                commentBody = body,\r\n                parentCommentId = 11L,\r\n                storyId = null,\r\n                userId = 111L\r\n            )\r\n        ).thenReturn(result)\r\n\r\n        // When posting reply\r\n        val data = repository.postReply(body, 11L, 111L)\r\n\r\n        // The correct response is returned\r\n        assertEquals(result, data)', 53, 1, NULL, '2019-02-28 08:01:16', '2019-02-28 08:01:16', NULL),
(170, 'postReply_withError', '// Given that an error result is return when posting a reply to a comment\r\n        val result = Result.Error(IOException(\"error\"))\r\n        whenever(\r\n            dataSource.comment(\r\n                commentBody = body,\r\n                parentCommentId = 11L,\r\n                storyId = null,\r\n                userId = 111L\r\n            )\r\n        ).thenReturn(result)\r\n\r\n        // When posting reply\r\n        val data = repository.postReply(body, 11L, 111L)\r\n\r\n        // The correct response is returned\r\n        assertEquals(result, data)', 53, 1, NULL, '2019-02-28 08:01:29', '2019-02-28 08:01:29', NULL),
(171, 'logout_clearsToken', '// When logging out\r\n        dataSource.logout()\r\n\r\n        // Then the auth token is null\r\n        assertNull(authTokenDataSource.authToken)', 54, 1, NULL, '2019-02-28 08:04:11', '2019-02-28 08:04:11', NULL),
(172, 'login_successful_when_AccessTokenAndGetUserSuccessful', '// Given that all API calls are successful\r\n        val accessTokenResponse = Response.success(accessToken)\r\n        whenever(service.login(any())).thenReturn(CompletableDeferred(accessTokenResponse))\r\n        val authUserResponse = Response.success(listOf(response))\r\n        whenever(service.getAuthedUser()).thenReturn(CompletableDeferred(authUserResponse))\r\n\r\n        // When logging in\r\n        val result = dataSource.login(\"test\", \"test\")\r\n\r\n        // Then the user is received\r\n        assertEquals(Result.Success(user), result)', 54, 1, NULL, '2019-02-28 08:04:27', '2019-02-28 08:04:27', NULL),
(173, 'login_failed_whenAccessTokenFailed', '// Given that the auth token retrieval fails\r\n        val failureResponse = Response.error<AccessToken>(\r\n            400,\r\n            errorResponseBody\r\n        )\r\n        whenever(service.login(any())).thenReturn(CompletableDeferred(failureResponse))\r\n\r\n        // When logging in\r\n        val result = dataSource.login(\"test\", \"test\")\r\n\r\n        // Then get authed user is never called\r\n        verify(service, never()).getAuthedUser()\r\n        // Then the login fails\r\n        assertTrue(result is Result.Error)', 54, 1, NULL, '2019-02-28 08:04:42', '2019-02-28 08:04:42', NULL);
INSERT INTO `test_codes` (`id`, `method_name`, `method_body`, `test_code_class_id`, `assert_count`, `deleted_at`, `created_at`, `updated_at`, `source_codes`) VALUES
(174, 'login_failed_whenGetUserFailed', '// Given that the access token is retrieved successfully\r\n        val accessTokenRespone = Response.success(accessToken)\r\n        whenever(service.login(any())).thenReturn(CompletableDeferred(accessTokenRespone))\r\n        // And the get authed user failed\r\n        val failureResponse = Response.error<List<LoggedInUserResponse>>(\r\n            400,\r\n            errorResponseBody\r\n        )\r\n        whenever(service.getAuthedUser()).thenReturn(CompletableDeferred(failureResponse))\r\n\r\n        // When logging in\r\n        val result = dataSource.login(\"test\", \"test\")\r\n\r\n        // Then error is triggered\r\n        assertTrue(result is Result.Error)', 54, 1, NULL, '2019-02-28 08:04:55', '2019-02-28 08:04:55', NULL),
(175, 'login_failed_whenAccessTokenThrowsException', '// Given that the auth token retrieval throws an exception\r\n        doAnswer { throw UnknownHostException() }\r\n            .whenever(service).login(any())\r\n\r\n        // When logging in\r\n        val result = dataSource.login(\"test\", \"test\")\r\n\r\n        // Then get authed user is never called\r\n        verify(service, never()).getAuthedUser()\r\n        // Then the login fails\r\n        assertTrue(result is Result.Error)', 54, 1, NULL, '2019-02-28 08:05:11', '2019-02-28 08:05:11', NULL),
(176, 'login_failed_whenGetUserThrowsException', '// Given that the access token is retrieved successfully\r\n        val accessTokenRespone = Response.success(accessToken)\r\n        whenever(service.login(any())).thenReturn(CompletableDeferred(accessTokenRespone))\r\n        // And the get authed user throws an exception\r\n        doAnswer { throw UnknownHostException() }\r\n            .whenever(service).getAuthedUser()\r\n\r\n        // When logging in\r\n        val result = dataSource.login(\"test\", \"test\")\r\n\r\n        // Then error is triggered\r\n        assertTrue(result is Result.Error)', 54, 1, NULL, '2019-02-28 08:05:26', '2019-02-28 08:05:26', NULL),
(177, 'isNotLoggedIn_byDefault', '// When no user was logged in\r\n        // Then the logged in repository flag is false\r\n        assertFalse(repository.isLoggedIn)', 55, 1, NULL, '2019-02-28 08:06:58', '2019-02-28 08:06:58', NULL),
(178, 'isLoggedIn_afterSuccessfulLogin', '// Given that the login will be successful\r\n        withLoginSuccessful(username, pass)\r\n\r\n        // When logging in\r\n        val result = repository.login(username, pass)\r\n\r\n        // Then the success result is returned\r\n        assertEquals(Result.Success(user), result)\r\n        // The user is logged in\r\n        assertTrue(repository.isLoggedIn)\r\n        // The user cached is the expected user\r\n        assertEquals(repository.user, user)', 55, 3, NULL, '2019-02-28 08:09:39', '2019-02-28 08:09:39', NULL),
(179, 'userNull_byDefault', 'assertNull(repository.user)', 55, 1, NULL, '2019-02-28 08:10:05', '2019-02-28 08:10:05', NULL),
(180, 'logout', '// When logging out\r\n        repository.logout()\r\n\r\n        // Then the user is not logged in\r\n        assertFalse(repository.isLoggedIn)\r\n        // The cached user is null\r\n        assertNull(repository.user)', 55, 2, NULL, '2019-02-28 08:11:46', '2019-02-28 08:11:46', NULL),
(181, 'logout_afterLogin', '// Given a logged in user\r\n        withLoginSuccessful(username, pass)\r\n        repository.login(username, pass)\r\n\r\n        // When logging out\r\n        repository.logout()\r\n\r\n        // Then the user is logged out\r\n        assertFalse(repository.isLoggedIn)\r\n        // The cached user is null\r\n        assertNull(repository.user)', 55, 2, NULL, '2019-02-28 08:12:19', '2019-02-28 08:12:19', NULL),
(182, 'isNotLoggedIn_afterFailedLogin', '// Given that the login will fail\r\n        withLoginFailed(username, pass)\r\n\r\n        // When logging in\r\n        val result = repository.login(username, pass)\r\n\r\n        // Then the error result is returned\r\n        assertTrue(result is Result.Error)\r\n        // The user is not logged in\r\n        assertFalse(repository.isLoggedIn)\r\n        // The cached user is null\r\n        assertNull(repository.user)', 55, 3, NULL, '2019-02-28 08:12:44', '2019-02-28 08:12:44', NULL),
(183, 'story_converted', '// Given a story response\r\n        val storyLinks = StoryLinks(\r\n            user = 123L,\r\n            comments = listOf(1, 2, 3),\r\n            upvotes = listOf(11, 22, 33),\r\n            downvotes = listOf(111, 222, 333)\r\n        )\r\n        val storyResponse = StoryResponse(\r\n            id = 987,\r\n            title = \"My Plaid story\",\r\n            comment = \"This is amazing\",\r\n            comment_html = \"www.plaid.com\",\r\n            comment_count = 0,\r\n            vote_count = 100,\r\n            created_at = createdDate,\r\n            links = storyLinks\r\n        )\r\n\r\n        // When converting it to a story\r\n        val story = storyResponse.toStory()\r\n\r\n        // The story has the expected data\r\n        val expectedStory = Story(\r\n            id = 987,\r\n            title = \"My Plaid story\",\r\n            comment = \"This is amazing\",\r\n            commentHtml = \"www.plaid.com\",\r\n            commentCount = 0,\r\n            voteCount = 100,\r\n            userId = 123L,\r\n            createdAt = createdDate,\r\n            links = storyLinks,\r\n            userDisplayName = null,\r\n            userPortraitUrl = null,\r\n            userJob = null\r\n        )\r\n        assertEquals(expectedStory, story)', 56, 1, NULL, '2019-02-28 08:14:43', '2019-02-28 08:14:43', NULL),
(184, 'loadStories_withSuccess', '// Given that the service responds with success\r\n        withStoriesSuccess(2, stories)\r\n\r\n        // When requesting stories\r\n        val result = dataSource.loadStories(2)\r\n\r\n        // Then there\'s one request to the service\r\n        verify(service).getStories(2)\r\n        // Then the correct list of stories is returned\r\n        assertEquals(Result.Success(stories), result)', 58, 1, NULL, '2019-02-28 08:15:53', '2019-02-28 08:15:53', NULL),
(185, 'loadStories_withError', '// Given that the service responds with error\r\n        withStoriesError(1)\r\n\r\n        // When requesting stories\r\n        val result = dataSource.loadStories(1)\r\n\r\n        // Then error is returned\r\n        assertTrue(result is Result.Error)', 58, 1, NULL, '2019-02-28 08:16:11', '2019-02-28 08:16:11', NULL),
(186, 'loadStories_withException', '// Given that the service throws an exception\r\n        doAnswer { throw UnknownHostException() }\r\n            .whenever(service).getStories(1)\r\n\r\n        // When requesting stories\r\n        val result = dataSource.loadStories(1)\r\n\r\n        // Then error is returned\r\n        assertTrue(result is Result.Error)', 58, 1, NULL, '2019-02-28 08:16:27', '2019-02-28 08:16:27', NULL),
(187, 'search_withSuccess', '// Given that the service responds with success\r\n        val storyIds = stories.map { it.id.toString() }\r\n        whenever(service.search(query, 2)).thenReturn(CompletableDeferred(Response.success(storyIds)))\r\n        val commaSeparatedIds = storyIds.joinToString(\",\")\r\n        whenever(service.getStories(commaSeparatedIds)).thenReturn(CompletableDeferred(Response.success(stories)))\r\n\r\n        // When searching for stories\r\n        val result = dataSource.search(query, 2)\r\n\r\n        // Then the correct list of stories is returned\r\n        assertEquals(Result.Success(stories), result)', 58, 1, NULL, '2019-02-28 08:17:04', '2019-02-28 08:17:04', NULL),
(188, 'search_withErrorScrapingResults', '// Given that the service responds with error\r\n        val error = Response.error<List<String>>(400, errorResponseBody)\r\n        whenever(service.search(query, 1)).thenReturn(CompletableDeferred(error))\r\n\r\n        // When searching for stories\r\n        val result = dataSource.search(query, 1)\r\n\r\n        // Then error is returned\r\n        assertTrue(result is Result.Error)', 58, 1, NULL, '2019-02-28 08:17:21', '2019-02-28 08:17:21', NULL),
(189, 'search_withExceptionScrapingResults', '// Given that the service throws an exception\r\n        doAnswer { throw UnknownHostException() }\r\n            .whenever(service).search(query, 1)\r\n\r\n        // When searching for stories\r\n        val result = dataSource.search(query, 1)\r\n\r\n        // Then error is returned\r\n        assertTrue(result is Result.Error)', 58, 1, NULL, '2019-02-28 08:17:47', '2019-02-28 08:17:47', NULL),
(190, 'search_withErrorFetchingStories', '// Given that the service responds with error\r\n        val storyIds = stories.joinToString(\",\") { it.id.toString() }\r\n        val error = Response.error<List<StoryResponse>>(400, errorResponseBody)\r\n        whenever(service.getStories(storyIds)).thenReturn(CompletableDeferred(error))\r\n\r\n        // When searching for stories\r\n        val result = dataSource.search(query, 1)\r\n\r\n        // Then error is returned\r\n        assertTrue(result is Result.Error)', 58, 1, NULL, '2019-02-28 08:18:03', '2019-02-28 08:18:03', NULL),
(191, 'search_withExceptionFetchingStories', '// Given that the service throws an exception\r\n        doAnswer { throw UnknownHostException() }\r\n            .whenever(service).getStories(stories.joinToString(\",\") { it.id.toString() })\r\n\r\n        // When searching for stories\r\n        val result = dataSource.search(query, 1)\r\n\r\n        // Then error is returned\r\n        assertTrue(result is Result.Error)', 58, 1, NULL, '2019-02-28 08:18:19', '2019-02-28 08:18:19', NULL),
(192, 'loadStories_withSuccess', '// Given a list of stories returned for a specific page\r\n        val result = Result.Success(stories)\r\n        whenever(dataSource.loadStories(1)).thenReturn(result)\r\n\r\n        // When loading stories\r\n        val data = repository.loadStories(1)\r\n\r\n        // The correct data is returned\r\n        assertEquals(Result.Success(stories), data)', 59, 1, NULL, '2019-02-28 08:20:12', '2019-02-28 08:20:12', NULL),
(193, 'loadStories_withError', '// Given that an error is returned for a specific page\r\n        val result = Result.Error(IOException(\"error\"))\r\n        whenever(dataSource.loadStories(2)).thenReturn(result)\r\n\r\n        // When loading stories\r\n        val data = repository.loadStories(2)\r\n\r\n        // Then error is returned\r\n        assertTrue(data is Result.Error)', 59, 1, NULL, '2019-02-28 08:20:27', '2019-02-28 08:20:27', NULL),
(194, 'search_withSuccess', '// Given a list of stories returned for a specific query and page\r\n        val result = Result.Success(stories)\r\n        whenever(dataSource.search(query, 1)).thenReturn(result)\r\n\r\n        // When searching for stories\r\n        val data = repository.search(query, 1)\r\n\r\n        // The correct data is returned\r\n        assertEquals(Result.Success(stories), data)', 59, 1, NULL, '2019-02-28 08:21:31', '2019-02-28 08:21:31', NULL),
(195, 'search_withError', '// Given that an error is returned for a specific query and page search\r\n        val result = Result.Error(IOException(\"error\"))\r\n        whenever(dataSource.search(query, 2)).thenReturn(result)\r\n\r\n        // When searching for stories\r\n        val data = repository.search(query, 2)\r\n\r\n        // Then error data is returned\r\n        assertTrue(data is Result.Error)', 59, 1, NULL, '2019-02-28 08:21:50', '2019-02-28 08:21:50', NULL),
(196, 'getStory_whenLoadSucceeded', '// Given that a load has been performed successfully and data cached\r\n        whenever(dataSource.loadStories(1)).thenReturn(Result.Success(stories))\r\n        repository.loadStories(1)\r\n\r\n        // When getting a story by id\r\n        val result = repository.getStory(stories[0].id)\r\n\r\n        // Then it is successfully retrieved\r\n        assertNotNull(result)\r\n        assertTrue(result is Result.Success)\r\n        assertEquals(stories[0], (result as Result.Success).data)', 59, 1, NULL, '2019-02-28 08:22:09', '2019-02-28 08:22:09', NULL),
(197, 'getStory_whenLoadFailed', '// Given that a search fails so no data is cached\r\n        whenever(dataSource.loadStories(1)).thenReturn(Result.Error(IOException(\"error\")))\r\n        repository.loadStories(1)\r\n\r\n        // When getting a story by id\r\n        val result = repository.getStory(stories[0].id)\r\n\r\n        // Then error is returned\r\n        assertNotNull(result)\r\n        assertTrue(result is Result.Error)', 59, 2, NULL, '2019-02-28 08:23:05', '2019-02-28 08:23:15', NULL),
(198, 'getStory_whenSearchSucceeded', '// Given that a search has been performed successfully and data cached\r\n        whenever(dataSource.search(query, 1)).thenReturn(Result.Success(stories))\r\n        repository.search(query, 1)\r\n\r\n        // When getting a story by id\r\n        val result = repository.getStory(stories[0].id)\r\n\r\n        // Then it is successfully retrieved\r\n        assertNotNull(result)\r\n        assertTrue(result is Result.Success)\r\n        assertEquals(stories[0], (result as Result.Success).data)', 59, 3, NULL, '2019-02-28 08:23:38', '2019-02-28 08:23:38', NULL),
(199, 'getStory_whenSearchFailed', '// Given that a search fails so no data is cached\r\n        whenever(dataSource.search(query, 1)).thenReturn(Result.Error(IOException(\"error\")))\r\n        repository.search(query, 1)\r\n\r\n        // When getting a story by id\r\n        val result = repository.getStory(stories[0].id)\r\n\r\n        // Then error is returned\r\n        assertNotNull(result)\r\n        assertTrue(result is Result.Error)', 59, 2, NULL, '2019-02-28 08:23:56', '2019-02-28 08:23:56', NULL),
(200, 'loadStories_withSuccess', '// Given a list of story responses returned for a specific page\r\n        val result = Result.Success(storyResponses)\r\n        whenever(storiesRepository.loadStories(1)).thenReturn(result)\r\n        var sourceLoaded = false\r\n        // Given a callback where we check the validity of the data received\r\n        val callback = object : LoadSourceCallback {\r\n            override fun sourceLoaded(result: List<PlaidItem>?, page: Int, source: String) {\r\n                // Then the correct data is received\r\n                sourceLoaded = true\r\n                assertEquals(stories, result)\r\n                assertEquals(1, page)\r\n                assertEquals(SourcesRepository.SOURCE_DESIGNER_NEWS_POPULAR, source)\r\n            }\r\n\r\n            override fun loadFailed(source: String) {\r\n                fail(\"Load shouldn\'t have failed\")\r\n            }\r\n        }\r\n\r\n        // When loading stories\r\n        loadStoriesUseCase(1, callback)\r\n\r\n        // The correct callback was called\r\n        assertTrue(sourceLoaded)', 60, 1, NULL, '2019-02-28 08:44:04', '2019-02-28 08:44:04', NULL),
(201, 'loadStories_withError', '// Given that an error is returned for a specific page\r\n        val result = Result.Error(IOException(\"error\"))\r\n        whenever(storiesRepository.loadStories(2)).thenReturn(result)\r\n        var sourceLoadingFailed = false\r\n        // Given a callback where we check the validity of the data received\r\n        val callback = object : LoadSourceCallback {\r\n            override fun sourceLoaded(result: List<PlaidItem>?, page: Int, source: String) {\r\n                fail(\"Load shouldn\'t have succeeded\")\r\n            }\r\n\r\n            override fun loadFailed(source: String) {\r\n                // Then the fail callback gets called for the correct source\r\n                sourceLoadingFailed = true\r\n                assertEquals(SourcesRepository.SOURCE_DESIGNER_NEWS_POPULAR, source)\r\n            }\r\n        }\r\n\r\n        // When loading stories\r\n        loadStoriesUseCase(2, callback)\r\n\r\n        // The correct callback was called\r\n        assertTrue(sourceLoadingFailed)', 60, 1, NULL, '2019-02-28 08:44:27', '2019-02-28 08:44:27', NULL),
(202, 'search_withSuccess', '// Given a list of stories returned for a specific query and page\r\n        val result = Result.Success(storiesResponses)\r\n        whenever(storiesRepository.search(query, 1)).thenReturn(result)\r\n        var sourceLoaded = false\r\n        // Given a callback where we check the validity of the data received\r\n        val callback = object : LoadSourceCallback {\r\n            override fun sourceLoaded(result: List<PlaidItem>?, page: Int, source: String) {\r\n                // Then the correct data is received\r\n                sourceLoaded = true\r\n                assertEquals(stories, result)\r\n                assertEquals(1, page)\r\n                assertEquals(query, source)\r\n            }\r\n\r\n            override fun loadFailed(source: String) {\r\n                fail(\"Search shouldn\'t have failed\")\r\n            }\r\n        }\r\n\r\n        // When searching for stories\r\n        searchStoriesUseCase(query, 1, callback)\r\n\r\n        // The correct callback was called\r\n        assertTrue(sourceLoaded)', 61, 1, NULL, '2019-02-28 08:45:09', '2019-02-28 08:45:09', NULL),
(203, 'search_withError', '// Given that an error is returned for a specific query and page search\r\n        val result = Result.Error(IOException(\"error\"))\r\n        whenever(storiesRepository.search(query, 2)).thenReturn(result)\r\n        var sourceLoadingFailed = false\r\n        // Given a callback where we check the validity of the data received\r\n        val callback = object : LoadSourceCallback {\r\n            override fun sourceLoaded(result: List<PlaidItem>?, page: Int, source: String) {\r\n                fail(\"Search shouldn\'t have succeeded\")\r\n            }\r\n\r\n            override fun loadFailed(source: String) {\r\n                // Then the fail callback gets called for the correct source\r\n                sourceLoadingFailed = true\r\n                assertEquals(query, source)\r\n            }\r\n        }\r\n\r\n        // When searching for stories\r\n        searchStoriesUseCase(query, 2, callback)\r\n\r\n        // The correct callback was called\r\n        assertTrue(sourceLoadingFailed)', 61, 1, NULL, '2019-02-28 08:45:26', '2019-02-28 08:45:26', NULL),
(204, 'weights_inExpectedOrder', '// Given a number of shots with different likes counts in a random order\r\n        val shots = listOf(shot20, shot200, shot0, shot99)\r\n\r\n        // When the weigher weighs them\r\n        weigher.weigh(shots)\r\n\r\n        // Then each shot has an appropriate weight applied.\r\n        // We don\'t care about the exact weight (black box test) but that they yield the\r\n        // expected order i.e. shots with more likes have a lower weight\r\n        assertTrue(shot200.weight < shot99.weight)\r\n        assertTrue(shot99.weight < shot20.weight)\r\n        assertTrue(shot20.weight < shot0.weight)', 62, 3, NULL, '2019-02-28 08:46:40', '2019-02-28 08:46:40', NULL),
(205, 'weights_inExpectedRange', '// Given a number of shots, all with page 0\r\n        val shots = listOf(shot20, shot200, shot0, shot99)\r\n\r\n        // When the weigher weighs them\r\n        weigher.weigh(shots)\r\n\r\n        // Then weights in the range [0..1] are applied\r\n        shots.forEach {\r\n            assertTrue(it.weight > 0f)\r\n            assertTrue(it.weight <= 1f)\r\n        }', 62, 8, NULL, '2019-02-28 08:47:22', '2019-02-28 08:47:22', NULL),
(206, 'weights_acrossPages_inExpectedOrder', '// Given a number of shots, with a range of likes and across different pages\r\n        val shot_p0_0 = shot0.apply { page = 0 }\r\n        val shot_p0_99 = shot99.apply { page = 0 }\r\n        val shot_p1_0 = shot0.copy().apply { page = 1 }\r\n        val shot_p1_99 = shot99.copy().apply { page = 1 }\r\n        val shot_p2_0 = shot0.copy().apply { page = 2 }\r\n        val shot_p2_99 = shot99.copy().apply { page = 2 }\r\n        val shots = listOf(shot_p2_0, shot_p0_99, shot_p0_0, shot_p2_99, shot_p1_0, shot_p1_99)\r\n\r\n        // When the weigher weighs them\r\n        weigher.weigh(shots)\r\n\r\n        // Then each shot has a weight applied in the expected order\r\n        // i.e. shots with more likes have a lower weight, per page\r\n        assertTrue(shot_p0_99.weight < shot_p0_0.weight)\r\n        assertTrue(shot_p0_0.weight < shot_p1_99.weight)\r\n        assertTrue(shot_p1_99.weight < shot_p1_0.weight)\r\n        assertTrue(shot_p1_0.weight < shot_p2_99.weight)\r\n        assertTrue(shot_p2_99.weight < shot_p2_0.weight)\r\n\r\n        // And weights in the range [page..page + 1] are applied\r\n        shots.forEach {\r\n            assertTrue(it.weight > it.page)\r\n            assertTrue(it.weight <= it.page + 1)\r\n        }', 62, 17, NULL, '2019-02-28 08:47:57', '2019-02-28 08:47:57', NULL),
(207, 'parsesHtml', '// Given a response from a dribbble search\r\n        val response = ResponseBody.create(null, loadData(\"/dribbble_search.html\"))\r\n\r\n        // When we convert this\r\n        val shots = DribbbleSearchConverter.convert(response)\r\n\r\n        // Then the html is parsed into a list of shots\r\n        assertNotNull(shots)\r\n        assertEquals(24, shots.size)\r\n\r\n        // Then each shot contains the expected fields\r\n        shots.forEach { shot ->\r\n            assertNotNull(shot)\r\n            assertNotNull(shot.id)\r\n            assertNotNull(shot.title)\r\n            assertNotNull(shot.url)\r\n            assertNotNull(shot.user)\r\n        }', 63, 122, NULL, '2019-02-28 08:54:58', '2019-02-28 08:54:58', NULL),
(208, 'search_whenRequestSuccessful', '// Given that the service responds with success\r\n        withSuccess(shots)\r\n\r\n        // When performing a search\r\n        val response = dataSource.search(query, page, SortOrder.RECENT, defaultResultsPerPage)\r\n\r\n        // Then the response is as expected\r\n        assertNotNull(response)\r\n        assertEquals(Result.Success(shots), response)', 64, 2, NULL, '2019-02-28 08:56:11', '2019-02-28 08:56:11', NULL),
(209, 'search_whenRequestFailed', '// Given that the service responds with failure\r\n        val result = Response.error<List<Shot>>(400, errorResponseBody)\r\n        whenever(service.searchDeferred(query, page, defaultSortOrder, defaultResultsPerPage))\r\n            .thenReturn(CompletableDeferred(result))\r\n\r\n        // When performing a search\r\n        val response = dataSource.search(query, page, SortOrder.RECENT, defaultResultsPerPage)\r\n\r\n        // Then an error is reported\r\n        assertTrue(response is Result.Error)', 64, 1, NULL, '2019-02-28 08:56:26', '2019-02-28 08:56:26', NULL),
(210, 'search_whenResponseEmpty', '// Given that the service responds with success but with an empty response\r\n        withSuccess(null)\r\n\r\n        // When performing a search\r\n        val response = dataSource.search(query, page, SortOrder.RECENT, defaultResultsPerPage)\r\n\r\n        // Then an error is reported\r\n        assertTrue(response is Result.Error)', 64, 1, NULL, '2019-02-28 08:56:43', '2019-02-28 08:56:43', NULL),
(211, 'search_defaultParams', '// Given that the service responds with success when called\r\n        withSuccess(shots)\r\n\r\n        // When performing a search without specifying the sort or results per page\r\n        runBlocking { dataSource.search(query, page) }\r\n\r\n        // Then the default values for these params are used\r\n        verify(service).searchDeferred(query, page, defaultSortOrder, defaultResultsPerPage)', 64, 0, NULL, '2019-02-28 08:57:01', '2019-02-28 08:57:01', NULL),
(212, 'search_nonDefaultParams', '// Given that the service responds with success when called\r\n        val popularSearchParam = \"\"\r\n        val customPerPage = 20\r\n        val result = Response.success(shots)\r\n        whenever(service.searchDeferred(query, page, popularSearchParam, customPerPage))\r\n            .thenReturn(CompletableDeferred(result))\r\n\r\n        // When performing a search & specifying non-default sort & results per page\r\n        runBlocking { dataSource.search(query, page, SortOrder.POPULAR, customPerPage) }\r\n\r\n        // Then the supplied values for these params are used\r\n        verify(service).searchDeferred(query, page, popularSearchParam, customPerPage)', 64, 0, NULL, '2019-02-28 08:57:20', '2019-02-28 08:57:20', NULL),
(213, 'search_whenRequestThrowsException', '// Given that the service throws an exception\r\n        doAnswer { throw UnknownHostException() }\r\n            .whenever(service).searchDeferred(query, page, defaultSortOrder, defaultResultsPerPage)\r\n\r\n        // When performing a search\r\n        val response = dataSource.search(query, page, SortOrder.RECENT, defaultResultsPerPage)\r\n\r\n        // Then an error is reported\r\n        assertTrue(response is Result.Error)', 64, 1, NULL, '2019-02-28 08:57:41', '2019-02-28 08:57:41', NULL),
(214, 'search_whenRequestSuccessful', '// Given that the data source responds with success\r\n        val result = Result.Success(shots)\r\n        whenever(dataSource.search(query, page)).thenReturn(result)\r\n        var data: Result<List<Shot>>? = null\r\n\r\n        // When searching for a query\r\n        repository.search(query, page) { data = it }\r\n\r\n        // Then the correct method was called\r\n        verify(dataSource).search(query, page)\r\n        // And the expected result was returned to the callback\r\n        assertEquals(Result.Success(shots), data)', 65, 1, NULL, '2019-02-28 08:59:08', '2019-02-28 08:59:08', NULL),
(215, 'search_whenRequestFailed', '// Given that the data source responds with failure\r\n        val result = Result.Error(IOException(\"error\"))\r\n        whenever(dataSource.search(query, page)).thenReturn(result)\r\n        var data: Result<List<Shot>>? = null\r\n\r\n        // When searching for a query\r\n        repository.search(query, page) { data = it }\r\n\r\n        // Then an error result is reported\r\n        assertNotNull(data)\r\n        assertTrue(data is Result.Error)', 65, 2, NULL, '2019-02-28 08:59:27', '2019-02-28 08:59:27', NULL),
(216, 'getShot_whenSearchSucceeded', '// Given that a search has been performed successfully and data cached\r\n        whenever(dataSource.search(query, page)).thenReturn(Result.Success(shots))\r\n        repository.search(query, page) { }\r\n\r\n        // When getting a shot by id\r\n        val result = repository.getShot(shots[0].id)\r\n\r\n        // Then it is successfully retrieved\r\n        assertNotNull(result)\r\n        assertTrue(result is Result.Success)\r\n        assertEquals(shots[0], (result as Result.Success).data)', 65, 3, NULL, '2019-02-28 08:59:45', '2019-02-28 08:59:45', NULL),
(217, 'getShot_whenSearchFailed', '// Given that a search fails so no data is cached\r\n        whenever(dataSource.search(query, page)).thenReturn(Result.Error(IOException(\"error\")))\r\n        repository.search(query, page) { }\r\n\r\n        // When getting a shot by id\r\n        val result = repository.getShot(shots[0].id)\r\n\r\n        // Then an Error is reported\r\n        assertNotNull(result)\r\n        assertTrue(result is Result.Error)', 65, 2, NULL, '2019-02-28 09:00:05', '2019-02-28 09:00:05', NULL),
(218, 'loadData_whenResultSuccessful', '// Given that the service responds with success\r\n        val result = Response.success(postsResult)\r\n        whenever(service.getPosts(1)).thenReturn(CompletableDeferred(result))\r\n\r\n        // When loading the data\r\n        val response = dataSource.loadData(1)\r\n\r\n        // Then the response is the expected one\r\n        assertNotNull(response)\r\n        assertEquals(Result.Success(postsResult), response)', 66, 2, NULL, '2019-02-28 09:01:25', '2019-02-28 09:01:25', NULL),
(219, 'loadData_whenRequestFailed', '// Given that the service responds with failure\r\n        val result = Response.error<List<Post>>(\r\n                400,\r\n                errorResponseBody\r\n        )\r\n        whenever(service.getPosts(1)).thenReturn(CompletableDeferred(result))\r\n\r\n        // When loading posts\r\n        val response = dataSource.loadData(1)\r\n\r\n        // Then the response is not successful\r\n        assertTrue(response is Result.Error)', 66, 1, NULL, '2019-02-28 09:01:48', '2019-02-28 09:01:48', NULL),
(220, 'getUsers_withSuccess', '// Given that the service responds with success\r\n        withUsersSuccess(\"111,222\", users)\r\n\r\n        // When requesting the users\r\n        val result = dataSource.getUsers(listOf(111L, 222L))\r\n\r\n        // Then there\'s one request to the service\r\n        verify(service).getUsers(\"111,222\")\r\n        // Then the correct set of users is returned\r\n        assertEquals(Result.Success(users), result)', 67, 1, NULL, '2019-02-28 10:10:40', '2019-02-28 10:10:40', NULL),
(221, 'getUsers_withError', '// Given that the service responds with error\r\n        withUsersError(\"111,222\")\r\n\r\n        // When requesting the users\r\n        val result = dataSource.getUsers(listOf(111L, 222L))\r\n\r\n        // Then error is returned\r\n        assertTrue(result is Result.Error)', 67, 1, NULL, '2019-02-28 10:10:59', '2019-02-28 10:10:59', NULL),
(222, 'getUsers_withException', '// Given that the service throws an exception\r\n        doAnswer { throw UnknownHostException() }\r\n            .whenever(service).getUsers(\"111,222\")\r\n\r\n        // When requesting the users\r\n        val result = dataSource.getUsers(listOf(111L, 222L))\r\n\r\n        // Then error is returned\r\n        assertTrue(result is Result.Error)', 67, 1, NULL, '2019-02-28 10:11:16', '2019-02-28 10:11:16', NULL),
(223, 'getUsers_withSuccess', '// Given that the service responds with success\r\n        withUsersSuccess(\"111,222\", users)\r\n\r\n        // When requesting the users\r\n        val result = dataSource.getUsers(listOf(111L, 222L))\r\n\r\n        // Then there\'s one request to the service\r\n        verify(service).getUsers(\"111,222\")\r\n        // Then the correct set of users is returned\r\n        assertEquals(Result.Success(users), result)', 68, 1, NULL, '2019-02-28 10:14:21', '2019-02-28 10:14:21', NULL),
(224, 'getUsers_withError', '// Given that the service responds with error\r\n        withUsersError(\"111,222\")\r\n\r\n        // When requesting the users\r\n        val result = dataSource.getUsers(listOf(111L, 222L))\r\n\r\n        // Then error is returned\r\n        assertTrue(result is Result.Error)', 68, 1, NULL, '2019-02-28 10:14:44', '2019-02-28 10:14:44', NULL),
(225, 'getUsers_withException', '// Given that the service throws an exception\r\n        doAnswer { throw UnknownHostException() }\r\n            .whenever(service).getUsers(\"111,222\")\r\n\r\n        // When requesting the users\r\n        val result = dataSource.getUsers(listOf(111L, 222L))\r\n\r\n        // Then error is returned\r\n        assertTrue(result is Result.Error)', 68, 1, NULL, '2019-02-28 10:15:08', '2019-02-28 10:15:08', NULL),
(226, 'upvoteStory_whenRequestSuccessful', '// Given that the service responds with success\r\n        val response = Response.success(Unit)\r\n        whenever(service.upvoteStoryV2(any())).thenReturn(CompletableDeferred(response))\r\n\r\n        // When upvoting a story\r\n        val result = dataSource.upvoteStory(storyId, userId)\r\n\r\n        // Then the result is successful\r\n        assertEquals(Result.Success(Unit), result)', 70, 1, NULL, '2019-02-28 10:16:46', '2019-02-28 10:16:46', NULL),
(227, 'upvoteStory_whenRequestFailed', '// Given that the service responds with error\r\n        val response = Response.error<Unit>(404, errorResponseBody)\r\n        whenever(service.upvoteStoryV2(any())).thenReturn(CompletableDeferred(response))\r\n\r\n        // When upvoting a story\r\n        val result = dataSource.upvoteStory(storyId, userId)\r\n\r\n        // Then the result is error\r\n        assertTrue(result is Result.Error)', 70, 1, NULL, '2019-02-28 10:16:59', '2019-02-28 10:16:59', NULL),
(228, 'upvoteStory_whenExceptionThrown', '// Given that the service trows an exception\r\n        doAnswer { throw UnknownHostException() }\r\n            .whenever(service).upvoteStoryV2(any())\r\n\r\n        // When upvoting a story\r\n        val result = dataSource.upvoteStory(storyId, userId)\r\n\r\n        // Then the result is error\r\n        assertTrue(result is Result.Error)', 70, 1, NULL, '2019-02-28 10:17:10', '2019-02-28 10:17:10', NULL),
(229, 'upvoteComment_whenRequestSuccessful', '// Given that the service responds with success\r\n        val response = Response.success(Unit)\r\n        whenever(service.upvoteComment(any())).thenReturn(CompletableDeferred(response))\r\n\r\n        // When upvoting a comment\r\n        val result = dataSource.upvoteComment(storyId, userId)\r\n\r\n        // Then the result is successful\r\n        assertEquals(Result.Success(Unit), result)', 70, 1, NULL, '2019-02-28 10:17:23', '2019-02-28 10:17:23', NULL),
(230, 'upvoteComment_whenRequestFailed', '// Given that the service responds with error\r\n        val response = Response.error<Unit>(404, errorResponseBody)\r\n        whenever(service.upvoteComment(any())).thenReturn(CompletableDeferred(response))\r\n\r\n        // When upvoting a comment\r\n        val result = dataSource.upvoteComment(storyId, userId)\r\n\r\n        // Then the result is error\r\n        assertTrue(result is Result.Error)', 70, 1, NULL, '2019-02-28 10:17:34', '2019-02-28 10:17:34', NULL),
(231, 'upvoteComment_whenExceptionThrown', '// Given that the service throws an exception\r\n        doAnswer { throw UnknownHostException() }\r\n            .whenever(service).upvoteComment(any())\r\n\r\n        // When upvoting a comment\r\n        val result = dataSource.upvoteComment(commentId, userId)\r\n\r\n        // Then the result is error\r\n        assertTrue(result is Result.Error)', 70, 1, NULL, '2019-02-28 10:17:43', '2019-02-28 10:17:43', NULL),
(232, 'upvoteStory_whenRequestSuccessful', '// Given that the data source responds with success\r\n        val response = Result.Success(Unit)\r\n        whenever(dataSource.upvoteStory(storyId, userId)).thenReturn(response)\r\n\r\n        // When upvoting a story\r\n        val result = votesRepository.upvoteStory(storyId, userId)\r\n\r\n        // Then the result is successful\r\n        assertEquals(Result.Success(Unit), result)', 71, 1, NULL, '2019-02-28 10:19:49', '2019-02-28 10:19:49', NULL),
(233, 'upvoteStory_whenRequestFailed', '// Given that the data source responds with error\r\n        val response = Result.Error(IOException(\"Error upvoting\"))\r\n        whenever(dataSource.upvoteStory(storyId, userId)).thenReturn(response)\r\n\r\n        // When upvoting a story\r\n        val result = votesRepository.upvoteStory(storyId, userId)\r\n\r\n        // Then the result is error\r\n        assertTrue(result is Result.Error)', 71, 1, NULL, '2019-02-28 10:20:00', '2019-02-28 10:20:00', NULL),
(234, 'upvoteComment_whenRequestSuccessful', '// Given that the data source responds with success\r\n        val response = Result.Success(Unit)\r\n        whenever(dataSource.upvoteComment(commentId, userId)).thenReturn(response)\r\n\r\n        // When upvoting a comment\r\n        val result = votesRepository.upvoteComment(commentId, userId)\r\n\r\n        // Then the result is successful\r\n        assertEquals(Result.Success(Unit), result)', 71, 1, NULL, '2019-02-28 10:20:11', '2019-02-28 10:20:11', NULL),
(235, 'upvoteComment_whenRequestFailed', '// Given that the data source responds with error\r\n        val response = Result.Error(IOException(\"Error upvoting\"))\r\n        whenever(dataSource.upvoteComment(commentId, userId)).thenReturn(response)\r\n\r\n        // When upvoting a comment\r\n        val result = votesRepository.upvoteComment(commentId, userId)\r\n\r\n        // Then the result is error\r\n        assertTrue(result is Result.Error)', 71, 1, NULL, '2019-02-28 10:20:22', '2019-02-28 10:20:22', NULL),
(236, 'getComments_noReplies_whenCommentsAnUserRequestsSuccessful', '// Given that the comments request responds with success\r\n        withComments(replyResponse1, \"11\")\r\n        // Given that the user request responds with success\r\n        withUsers(listOf(user1), \"111\")\r\n\r\n        // When getting the replies\r\n        val result = repository(listOf(11L))\r\n\r\n        // Then the correct list of comments was requested from the API\r\n        verify(service).getComments(\"11\")\r\n        // Then the correct list is received\r\n        assertEquals(Result.Success(listOf(reply1)), result)', 72, 1, NULL, '2019-02-28 10:27:56', '2019-02-28 10:27:56', NULL),
(237, 'getComments_noReplies_whenCommentsRequestFailed', '// Given that the service responds with failure\r\n        val apiResult = Response.error<List<CommentResponse>>(\r\n            400,\r\n            errorResponseBody\r\n        )\r\n        whenever(service.getComments(\"11\")).thenReturn(CompletableDeferred(apiResult))\r\n\r\n        // When getting the comments\r\n        val result = repository(listOf(11L))\r\n\r\n        // Then the result is not successful\r\n        assertNotNull(result)\r\n        assertTrue(result is Result.Error)', 72, 2, NULL, '2019-02-28 10:28:10', '2019-02-28 10:28:10', NULL),
(238, 'getComments_multipleReplies_whenCommentsAndUsersRequestsSuccessful', '// Given that:\r\n        // When requesting replies for ids 1 from service we get the parent comment but\r\n        // without replies embedded (since that\'s what the next call is doing)\r\n        withComments(parentCommentResponse, \"1\")\r\n        // When requesting replies for ids 11 and 12 from service we get the children\r\n        withComments(repliesResponses, \"11,12\")\r\n        // When the user request responds with success\r\n        withUsers(listOf(user1, user2), \"222,111\")\r\n\r\n        // When getting the comments from the repository\r\n        val result = repository(listOf(1L))\r\n\r\n        // Then  API requests were triggered\r\n        verify(service).getComments(\"1\")\r\n        verify(service).getComments(\"11,12\")\r\n        verify(service).getUsers(\"222,111\")\r\n        // Then the correct result is received\r\n        assertEquals(Result.Success(flattendCommentsWithReplies), result)', 72, 1, NULL, '2019-02-28 10:28:24', '2019-02-28 10:28:24', NULL),
(239, 'getComments_multipleReplies_whenRepliesRequestFailed', '// Given that\r\n        // When requesting replies for ids 1 from service we get the parent comment\r\n        withComments(parentCommentResponse, \"1\")\r\n        // When requesting replies for ids 11 and 12 from service we get an error\r\n        val resultChildrenError = Response.error<List<CommentResponse>>(\r\n            400,\r\n            errorResponseBody\r\n        )\r\n        whenever(service.getComments(\"11,12\"))\r\n            .thenReturn(CompletableDeferred(resultChildrenError))\r\n        // Given that the user request responds with success\r\n        withUsers(listOf(user2), \"222\")\r\n\r\n        // When getting the comments from the repository\r\n        val result = repository(listOf(1L))\r\n\r\n        // Then  API requests were triggered\r\n        verify(service).getComments(\"1\")\r\n        verify(service).getComments(\"11,12\")\r\n        verify(service).getUsers(\"222\")\r\n        // Then the correct result is received\r\n        assertEquals(Result.Success(flattenedCommentsWithoutReplies), result)', 72, 1, NULL, '2019-02-28 10:28:39', '2019-02-28 10:28:39', NULL),
(240, 'getComments_whenUserRequestFailed', '// Given that:\r\n        // When requesting replies for ids 1 from service we get the parent comment but\r\n        // without replies embedded (since that\'s what the next call is doing)\r\n        withComments(replyResponse1, \"11\")\r\n        // Given that the user request responds with failure\r\n        val userError = Response.error<List<User>>(\r\n            400,\r\n            errorResponseBody\r\n        )\r\n        whenever(service.getUsers(\"111\"))\r\n            .thenReturn(CompletableDeferred(userError))\r\n\r\n        // When getting the comments from the repository\r\n        val result = repository(listOf(11L))\r\n\r\n        // Then  API requests were triggered\r\n        verify(service).getComments(\"11\")\r\n        verify(service).getUsers(\"111\")\r\n        // Then the correct result is received\r\n        assertEquals(Result.Success(arrayListOf(reply1NoUser)), result)', 72, 1, NULL, '2019-02-28 10:28:55', '2019-02-28 10:28:55', NULL),
(241, 'getComments_noReplies_whenCommentsAnUserRequestsSuccessful', '// Given that the comments request responds with success\r\n        val ids = listOf(11L)\r\n        withComment(replyWithReplies1, ids)\r\n        // Given that the user request responds with success\r\n        withUsers(setOf(user1), setOf(111L))\r\n\r\n        // When getting the replies\r\n        val result = repository(ids)\r\n\r\n        // Then the correct list is received\r\n        assertEquals(Result.Success(listOf(reply1)), result)', 73, 1, NULL, '2019-02-28 10:30:02', '2019-02-28 10:30:02', NULL),
(242, 'getComments_noReplies_whenCommentsRequestFailed', '// Given that the getCommentsWithReplies responds with failure\r\n        val resultError = Result.Error(IOException(\"Comment error\"))\r\n        val ids = listOf(11L)\r\n        whenever(getCommentsWithReplies.invoke(ids)).thenReturn(resultError)\r\n\r\n        // When getting the comments\r\n        val result = repository(ids)\r\n\r\n        // Then the result is not successful\r\n        assertNotNull(result)\r\n        assertTrue(result is Result.Error)', 73, 2, NULL, '2019-02-28 10:30:17', '2019-02-28 10:30:17', NULL),
(243, 'getComments_multipleReplies_whenCommentsAndUsersRequestsSuccessful', '// Given that:\r\n        // When requesting replies for ids 1 from getCommentsWithReplies we get the parent comment but\r\n        // without replies embedded (since that\'s what the next call is doing)\r\n        val parentIds = listOf(1L)\r\n        withComment(parentCommentWithReplies, parentIds)\r\n        withUsers(setOf(user1, user2), setOf(111L, 222L))\r\n\r\n        // When getting the comments from the repository\r\n        val result = repository(listOf(1L))\r\n\r\n        // Then comments were requested for correct ids\r\n        verify(getCommentsWithReplies).invoke(parentIds)\r\n        // Then the correct result is received\r\n        assertEquals(Result.Success(flattendCommentsWithReplies), result)', 73, 1, NULL, '2019-02-28 10:30:32', '2019-02-28 10:30:32', NULL),
(244, 'getComments_multipleReplies_whenRepliesRequestFailed', '// Given that when requesting replies for ids 1 from getCommentsWithReplies we get the parent comment\r\n        val parentIds = listOf(1L)\r\n        withComment(parentCommentWithRepliesWithoutReplies, parentIds)\r\n        // Given that the user request responds with success\r\n        withUsers(setOf(user2), setOf(222))\r\n\r\n        // When getting the comments from the repository\r\n        val result = repository(listOf(1L))\r\n\r\n        // Then comments were requested for correct ids\r\n        verify(getCommentsWithReplies).invoke(parentIds)\r\n        // Then the correct result is received\r\n        assertEquals(Result.Success(flattenedCommentsWithoutReplies), result)', 73, 1, NULL, '2019-02-28 10:30:44', '2019-02-28 10:30:44', NULL),
(245, 'getComments_whenUserRequestFailed', '// Given that:\r\n        // When requesting replies for ids 1 from getCommentsWithReplies we get the parent comment but\r\n        // without replies embedded (since that\'s what the next call is doing)\r\n        val ids = listOf(11L)\r\n        withComment(replyWithReplies1, ids)\r\n        // Given that the user request responds with failure\r\n        val userError = Result.Error(IOException(\"User error\"))\r\n        whenever(userRepository.getUsers(setOf(11L))).thenReturn(userError)\r\n\r\n        // When getting the comments from the repository\r\n        val result = repository(listOf(11L))\r\n\r\n        // Then comments were requested for correct ids\r\n        verify(getCommentsWithReplies).invoke(ids)\r\n        // Then the correct result is received\r\n        assertEquals(Result.Success(arrayListOf(reply1NoUser)), result)', 73, 1, NULL, '2019-02-28 10:30:59', '2019-02-28 10:30:59', NULL),
(246, 'getComments_noReplies_whenRequestSuccessful', '// Given that the repository responds with success\r\n        val ids = listOf(reply1.id)\r\n        val repositoryResult = Result.Success(listOf(replyResponse1))\r\n        whenever(repository.getComments(ids)).thenReturn(repositoryResult)\r\n\r\n        // When getting the replies\r\n        val result = useCase(ids)\r\n\r\n        // Then the correct list of comments was requested\r\n        verify(repository).getComments(ids)\r\n        // Then the correct list is received\r\n        assertEquals(Result.Success(listOf(replyWithReplies1)), result)', 74, 1, NULL, '2019-02-28 10:32:12', '2019-02-28 10:32:12', NULL),
(247, 'getComments_noReplies_whenRequestFailed', '// Given that the repository responds with error\r\n        val ids = listOf(11L)\r\n        val repositoryResult = Result.Error(IOException(\"Unable to get comments\"))\r\n        whenever(repository.getComments(ids)).thenReturn(repositoryResult)\r\n\r\n        // When getting the comments\r\n        val result = useCase(ids)\r\n\r\n        // Then the result is not successful\r\n        assertNotNull(result)\r\n        assertTrue(result is Result.Error)', 74, 2, NULL, '2019-02-28 10:32:26', '2019-02-28 10:32:26', NULL),
(248, 'getComments_multipleReplies_whenRequestSuccessful', '// Given that:\r\n        // When requesting replies for ids 1 from repository we get the parent comment but\r\n        // without replies embedded (since that\'s what the next call is doing)\r\n        val resultParent = Result.Success(listOf(parentCommentResponse))\r\n        val parentIds = listOf(1L)\r\n        whenever(repository.getComments(parentIds)).thenReturn(resultParent)\r\n        // When requesting replies for ids 11 and 12 from repository we get the children\r\n        val childrenIds = listOf(11L, 12L)\r\n        val resultChildren = Result.Success(\r\n            listOf(\r\n                replyResponse1,\r\n                replyResponse2\r\n            )\r\n        )\r\n        whenever(repository.getComments(childrenIds)).thenReturn(resultChildren)\r\n\r\n        // When getting the comments from the useCase\r\n        val result = useCase(listOf(1L))\r\n\r\n        // Then  requests were triggered\r\n        verify(repository).getComments(parentIds)\r\n        verify(repository).getComments(childrenIds)\r\n        // Then the correct result is received\r\n        assertEquals(Result.Success(arrayListOf(parentCommentWithReplies)), result)', 74, 1, NULL, '2019-02-28 10:32:39', '2019-02-28 10:32:39', NULL),
(249, 'getComments_multipleReplies_whenRepliesRequestFailed', '// Given that\r\n        // When requesting replies for ids 1 from repository we get the parent comment\r\n        val resultParent = Result.Success(listOf(parentCommentResponse))\r\n        val parentIds = listOf(1L)\r\n        whenever(repository.getComments(parentIds)).thenReturn(resultParent)\r\n        // When requesting replies for ids 11 and 12 from repository we get an error\r\n        val resultChildrenError = Result.Error(IOException(\"Unable to get comments\"))\r\n        val childrenIds = listOf(11L, 12L)\r\n        whenever(repository.getComments(childrenIds)).thenReturn(resultChildrenError)\r\n\r\n        // When getting the comments from the useCase\r\n        val result = useCase(listOf(1L))\r\n\r\n        // Then  API requests were triggered\r\n        verify(repository).getComments(parentIds)\r\n        verify(repository).getComments(childrenIds)\r\n        // Then the correct result is received\r\n        assertEquals(Result.Success(arrayListOf(parentCommentWithRepliesWithoutReplies)), result)', 74, 1, NULL, '2019-02-28 10:32:50', '2019-02-28 10:32:50', NULL),
(250, 'getStory_whenStoryInRepository', '// Given that the repository returns a story request for the id\r\n        whenever(storiesRepository.getStory(storyId)).thenReturn(Result.Success(storyResponse))\r\n\r\n        // When getting the story\r\n        val result = getStoryUseCase(storyId)\r\n\r\n        // The story is returned\r\n        assertEquals(Result.Success(story), result)', 75, 1, NULL, '2019-02-28 10:37:29', '2019-02-28 10:37:29', NULL),
(251, 'getStory_whenStoryNotInRepository', '// Given that the repository returns with error\r\n        whenever(storiesRepository.getStory(storyId)).thenReturn(Result.Error(Exception(\"exception\")))\r\n\r\n        // When getting the story\r\n        val result = getStoryUseCase(storyId)\r\n\r\n        // Error is return\r\n        assertTrue(result is Result.Error)', 75, 1, NULL, '2019-02-28 10:37:39', '2019-02-28 10:37:39', NULL),
(252, 'postReply_userNull', '// Given that a user is not logged in\r\n        whenever(loginRepository.user).thenReturn(null)\r\n\r\n        // When logging in\r\n        postReply(\"text\", 123L)\r\n\r\n        // Then an exception is thrown\r\n        Unit', 76, 0, NULL, '2019-02-28 10:39:07', '2019-02-28 10:39:07', NULL);
INSERT INTO `test_codes` (`id`, `method_name`, `method_body`, `test_code_class_id`, `assert_count`, `deleted_at`, `created_at`, `updated_at`, `source_codes`) VALUES
(253, 'postReply_errorReturned', '// Given a logged in user\r\n        whenever(loginRepository.user).thenReturn(loggedInUser)\r\n        // Given that the comment is posted with error\r\n        whenever(repository.postReply(body, 123L, 111L))\r\n            .thenReturn(Result.Error(IOException(\"Error\")))\r\n\r\n        // When posting a comment to a story\r\n        val result = postReply(body, 123L)\r\n\r\n        // Then the result is not successful\r\n        assertTrue(result is Result.Error)', 76, 1, NULL, '2019-02-28 10:39:19', '2019-02-28 10:39:19', NULL),
(254, 'postReply_success', '// Given a logged in user\r\n        whenever(loginRepository.user).thenReturn(loggedInUser)\r\n        // Given that the comment is posted successfully\r\n        whenever(repository.postReply(replyResponse1.body, 123L, 111L))\r\n            .thenReturn(Result.Success(replyResponse1))\r\n\r\n        // When posting a comment to a story\r\n        val result = postReply(replyResponse1.body, 123L)\r\n\r\n        val expectedComment = Comment(\r\n            id = replyResponse1.id,\r\n            parentCommentId = replyResponse1.links.parentComment,\r\n            body = replyResponse1.body,\r\n            createdAt = replyResponse1.created_at,\r\n            depth = replyResponse1.depth,\r\n            upvotesCount = replyResponse1.links.commentUpvotes.size,\r\n            userId = user1.id,\r\n            userDisplayName = user1.displayName,\r\n            userPortraitUrl = user1.portraitUrl,\r\n            upvoted = false\r\n        )\r\n        // Then the result is the expected one\r\n        assertEquals(Result.Success(expectedComment), result)', 76, 1, NULL, '2019-02-28 10:39:32', '2019-02-28 10:39:32', NULL),
(255, 'postStoryComment_userNull', '// Given that a user is not logged in\r\n        whenever(loginRepository.user).thenReturn(null)\r\n\r\n        // When logging in\r\n        postStoryComment(\"text\", 123L)\r\n\r\n        // Then an exception is thrown\r\n        Unit', 77, 0, NULL, '2019-02-28 10:41:00', '2019-02-28 10:41:00', NULL),
(256, 'postStoryComment_errorReturned', '// Given a logged in user\r\n        whenever(loginRepository.user).thenReturn(loggedInUser)\r\n        // Given that the comment is posted with error\r\n        whenever(repository.postStoryComment(body, 123L, 111L))\r\n            .thenReturn(Result.Error(IOException(\"Error\")))\r\n\r\n        // When posting a comment to a story\r\n        val result = postStoryComment(body, 123L)\r\n\r\n        // Then the result is not successful\r\n        assertTrue(result is Result.Error)', 77, 1, NULL, '2019-02-28 10:41:11', '2019-02-28 10:41:11', NULL),
(257, 'postStoryComment_success', '// Given a logged in user\r\n        whenever(loginRepository.user).thenReturn(loggedInUser)\r\n        // Given that the comment is posted successfully\r\n        whenever(repository.postStoryComment(replyResponse1.body, 123L, 111L))\r\n            .thenReturn(Result.Success(replyResponse1))\r\n\r\n        // When posting a comment to a story\r\n        val result = postStoryComment(replyResponse1.body, 123L)\r\n\r\n        val expectedComment = Comment(\r\n            id = replyResponse1.id,\r\n            parentCommentId = replyResponse1.links.parentComment,\r\n            body = replyResponse1.body,\r\n            createdAt = replyResponse1.created_at,\r\n            depth = replyResponse1.depth,\r\n            upvotesCount = replyResponse1.links.commentUpvotes.size,\r\n            userId = loggedInUser.id,\r\n            userDisplayName = loggedInUser.displayName,\r\n            userPortraitUrl = loggedInUser.portraitUrl,\r\n            upvoted = false\r\n        )\r\n        // Then the result is the expected one\r\n        assertEquals(Result.Success(expectedComment), result)', 77, 1, NULL, '2019-02-28 10:41:24', '2019-02-28 10:41:24', NULL),
(258, 'upvoteComment_throws_whenUserNull', '// Given that the user is null\r\n        whenever(loginRepository.user).thenReturn(null)\r\n\r\n        // When upvoting a comment\r\n        // Then an exception is thrown\r\n        runBlocking { upvoteCommentUseCase(1L) }', 78, 0, NULL, '2019-02-28 10:44:18', '2019-02-28 10:44:18', NULL),
(259, 'upvoteComment_whenCommentUpvotedSuccessfully', '// Given that the login repository returns a user\r\n        whenever(loginRepository.user).thenReturn(user)\r\n        // And the repository upvoted successfully\r\n        whenever(votesRepository.upvoteComment(commentId, userId))\r\n            .thenReturn(Result.Success(Unit))\r\n\r\n        // When upvoting a comment\r\n        val result = upvoteCommentUseCase(commentId)\r\n\r\n        // Then the use case returns success\r\n        assertEquals(Result.Success(Unit), result)', 78, 1, NULL, '2019-02-28 10:44:40', '2019-02-28 10:44:40', NULL),
(260, 'upvoteComment_whenCommentUpvotedFailed', '// Given that the login repository returns a user\r\n        whenever(loginRepository.user).thenReturn(user)\r\n        // And the repository upvote failed\r\n        whenever(votesRepository.upvoteComment(commentId, userId))\r\n            .thenReturn(Result.Error(IOException(\"error\")))\r\n\r\n        // When upvoting a comment\r\n        val result = upvoteCommentUseCase(commentId)\r\n\r\n        // Then the use case returns with error\r\n        assertTrue(result is Result.Error)', 78, 1, NULL, '2019-02-28 10:44:53', '2019-02-28 10:44:53', NULL),
(261, 'upvoteStory_throws_whenUserNull', '// Given that the user is null\r\n        whenever(loginRepository.user).thenReturn(null)\r\n\r\n        // When upvoting a story\r\n        // Then an exception is thrown\r\n        runBlocking { upvoteStoryUseCase(1L) }', 79, 0, NULL, '2019-02-28 10:46:36', '2019-02-28 10:46:36', NULL),
(262, 'upvoteStory_whenStoryUpvotedSuccessfully', '// Given that the login repository returns a user\r\n        whenever(loginRepository.user).thenReturn(user)\r\n        // And the repository upvoted successfully the story\r\n        whenever(votesRepository.upvoteStory(storyId, userId))\r\n            .thenReturn(Result.Success(Unit))\r\n\r\n        // When upvoting a story\r\n        val result = upvoteStoryUseCase(storyId)\r\n\r\n        // Then the use case returns success\r\n        Assert.assertEquals(Result.Success(Unit), result)', 79, 1, NULL, '2019-02-28 10:46:45', '2019-02-28 10:46:45', NULL),
(263, 'upvoteStory_whenStoryUpvotedFailed', '// Given that the login repository returns a user\r\n        whenever(loginRepository.user).thenReturn(user)\r\n        // And the repository story upvote failed\r\n        whenever(votesRepository.upvoteStory(storyId, userId))\r\n            .thenReturn(Result.Error(IOException(\"error\")))\r\n\r\n        // When upvoting a story\r\n        val result = upvoteStoryUseCase(storyId)\r\n\r\n        // Then the use case returns with error\r\n        Assert.assertTrue(result is Result.Error)', 79, 1, NULL, '2019-02-28 10:46:58', '2019-02-28 10:46:58', NULL),
(264, 'login_whenUserLoggedInSuccessfully', '// Given a view model\r\n        val viewModel = LoginViewModel(loginRepo, provideFakeCoroutinesDispatcherProvider())\r\n        // Given that the repository returns a user\r\n        val user = LoggedInUser(\r\n            id = 3,\r\n            firstName = \"Plaida\",\r\n            lastName = \"Plaidich\",\r\n            displayName = \"Plaida Plaidich\",\r\n            portraitUrl = \"www\",\r\n            upvotes = listOf(123L, 234L)\r\n        )\r\n\r\n        whenever(loginRepo.login(username, password)).thenReturn(Result.Success(user))\r\n\r\n        // When logging in\r\n        viewModel.login(username, password)\r\n\r\n        // Then the correct UI model is created\r\n        val expected = LoginUiModel(\r\n            showProgress = false,\r\n            showError = null,\r\n            showSuccess = Event(LoginResultUiModel(\"plaida plaidich\", \"www\")),\r\n            enableLoginButton = false\r\n        )\r\n        val uiState = LiveDataTestUtil.getValue(viewModel.uiState)\r\n        assertEquals(expected, uiState)', 80, 1, NULL, '2019-02-28 10:49:35', '2019-02-28 10:49:35', NULL),
(265, 'login_whenUserLogInFailed', '// Given a view model\r\n        val viewModel = LoginViewModel(loginRepo, provideFakeCoroutinesDispatcherProvider())\r\n        // Given that the repository returns with error\r\n        whenever(loginRepo.login(username, password))\r\n            .thenReturn(Result.Error(IOException(\"Login error\")))\r\n\r\n        // When logging in\r\n        viewModel.login(username, password)\r\n\r\n        // Then the correct UI model is created\r\n        val expectedUiModel = LoginUiModel(\r\n            showProgress = false,\r\n            showError = Event(R.string.login_failed),\r\n            showSuccess = null,\r\n            enableLoginButton = true\r\n        )\r\n        val uiState = LiveDataTestUtil.getValue(viewModel.uiState)\r\n        assertEquals(expectedUiModel, uiState)', 80, 1, NULL, '2019-02-28 10:49:52', '2019-02-28 10:49:52', NULL),
(266, 'init_disablesLogin', '// When the view model is created\r\n        val viewModel = LoginViewModel(loginRepo, provideFakeCoroutinesDispatcherProvider())\r\n\r\n        // Then the login is disabled\r\n        val uiState = LiveDataTestUtil.getValue(viewModel.uiState)\r\n        assertEquals(initialUiModel, uiState)', 80, 1, NULL, '2019-02-28 10:51:08', '2019-02-28 10:51:08', NULL),
(267, 'loginDataChanged_withValidLogin', '// Given a view model\r\n        val viewModel = LoginViewModel(loginRepo, provideFakeCoroutinesDispatcherProvider())\r\n\r\n        // When login data changed with valid login data\r\n        viewModel.loginDataChanged(username, password)\r\n\r\n        // Then the correct UI model is created\r\n        val expectedUiModel = LoginUiModel(\r\n            showProgress = false,\r\n            showError = null,\r\n            showSuccess = null,\r\n            enableLoginButton = true\r\n        )\r\n        // TODO leave only the last assert\r\n        val uiState = LiveDataTestUtil.getValue(viewModel.uiState)\r\n        assertEquals(expectedUiModel.showProgress, uiState!!.showProgress)\r\n        assertEquals(expectedUiModel.showError, uiState.showError)\r\n        assertEquals(expectedUiModel.showSuccess, uiState.showSuccess)\r\n        assertEquals(expectedUiModel.enableLoginButton, uiState.enableLoginButton)\r\n        assertEquals(expectedUiModel, uiState)', 80, 5, NULL, '2019-02-28 10:52:30', '2019-02-28 10:52:30', NULL),
(268, 'loginDataChanged_withEmptyUsername', '// Given a view model\r\n        val viewModel = LoginViewModel(loginRepo, provideFakeCoroutinesDispatcherProvider())\r\n\r\n        // When login data changed with invalid login data\r\n        viewModel.loginDataChanged(\"\", password)\r\n\r\n        // Then the correct UI model is created\r\n        val expectedUiModel = LoginUiModel(\r\n            showProgress = false,\r\n            showError = null,\r\n            showSuccess = null,\r\n            enableLoginButton = false\r\n        )\r\n        val uiState = LiveDataTestUtil.getValue(viewModel.uiState)\r\n        assertEquals(expectedUiModel, uiState)', 80, 1, NULL, '2019-02-28 10:52:45', '2019-02-28 10:52:45', NULL),
(269, 'loginDataChanged_withEmptyPassword', '// Given a view model\r\n        val viewModel = LoginViewModel(loginRepo, provideFakeCoroutinesDispatcherProvider())\r\n\r\n        // When login data changed with invalid login data\r\n        viewModel.loginDataChanged(username, \"\")\r\n\r\n        // Then the correct UI model is created\r\n        val expectedUiModel = LoginUiModel(\r\n            showProgress = false,\r\n            showError = null,\r\n            showSuccess = null,\r\n            enableLoginButton = false\r\n        )\r\n        val uiState = LiveDataTestUtil.getValue(viewModel.uiState)\r\n        assertEquals(expectedUiModel, uiState)', 80, 1, NULL, '2019-02-28 10:52:55', '2019-02-28 10:52:55', NULL),
(270, 'login_withEmptyUsername', '// Given a view model\r\n        val viewModel = LoginViewModel(loginRepo, provideFakeCoroutinesDispatcherProvider())\r\n\r\n        // When logging in with invalid login data\r\n        viewModel.login(\"\", password)\r\n\r\n        // Then login is not triggered\r\n        verify(loginRepo, never()).login(username, \"\")\r\n        // Then the UI state is the initial state\r\n        val uiState = LiveDataTestUtil.getValue(viewModel.uiState)\r\n        assertEquals(initialUiModel, uiState)', 80, 1, NULL, '2019-02-28 10:53:13', '2019-02-28 10:53:13', NULL),
(271, 'login_withEmptyPassword', '// Given a view model\r\n        val viewModel = LoginViewModel(loginRepo, provideFakeCoroutinesDispatcherProvider())\r\n\r\n        // When logging in with invalid login data\r\n        viewModel.loginDataChanged(username, \"\")\r\n\r\n        // Then login is not triggered\r\n        verify(loginRepo, never()).login(username, \"\")\r\n        // Then the UI state is the initial state\r\n        val uiState = LiveDataTestUtil.getValue(viewModel.uiState)\r\n        assertEquals(initialUiModel, uiState)', 80, 1, NULL, '2019-02-28 10:53:33', '2019-02-28 10:53:33', NULL),
(272, 'signup', '// Given a view model\r\n        val viewModel = LoginViewModel(loginRepo, provideFakeCoroutinesDispatcherProvider())\r\n\r\n        // When signing up\r\n        viewModel.signup()\r\n\r\n        // Then an open url event is emitted\r\n        val url = LiveDataTestUtil.getValue(viewModel.openUrl)\r\n        assertNotNull(url)', 80, 1, NULL, '2019-02-28 10:53:45', '2019-02-28 10:53:45', NULL),
(273, 'loadStory_notInRepo', '// Given that the repo fails to return the requested story\r\n        whenever(getStory(storyId)).thenReturn(Result.Error(IllegalStateException()))\r\n\r\n        // When the view model is constructed\r\n        StoryViewModel(\r\n            storyId,\r\n            getStory,\r\n            postStoryComment,\r\n            postComment,\r\n            getCommentsWithRepliesAndUsers,\r\n            upvoteStory,\r\n            upvoteComment,\r\n            provideFakeCoroutinesDispatcherProvider()\r\n        )\r\n        // Then it throws', 80, 0, NULL, '2019-02-28 10:55:37', '2019-02-28 10:55:37', NULL),
(274, 'commentsRequested_whenViewModelCreated', '// Given that the repo successfully returns the requested story\r\n        // When the view model is constructed\r\n        val viewModel = withViewModel()\r\n\r\n        // Then the correct UI model is created\r\n        val event = LiveDataTestUtil.getValue(viewModel.uiModel)\r\n        assertEquals(event!!.comments, flattendCommentsWithReplies)', 80, 1, NULL, '2019-02-28 10:56:53', '2019-02-28 10:56:53', NULL),
(275, 'upvoteStory_whenUpvoteSuccessful', '// Given that the use case responds with success\r\n        whenever(upvoteStory(storyId)).thenReturn(Result.Success(Unit))\r\n        // And the view model is constructed\r\n        val viewModel = withViewModel()\r\n        var result: Result<Unit>? = null\r\n\r\n        // When upvoting a story\r\n        viewModel.storyUpvoteRequested(storyId) { result = it }\r\n\r\n        // Then the result is successful\r\n        assertEquals(Result.Success(Unit), result)', 80, 1, NULL, '2019-02-28 11:00:45', '2019-02-28 11:00:45', NULL),
(276, 'upvoteStory_whenUpvoteFailed', '// Given that the use case responds with error\r\n        val response = Result.Error(IOException(\"Error upvoting\"))\r\n        whenever(upvoteStory(storyId)).thenReturn(response)\r\n        // And the view model is constructed\r\n        val viewModel = withViewModel()\r\n        var result: Result<Unit>? = null\r\n\r\n        // When upvoting a story\r\n        viewModel.storyUpvoteRequested(storyId) { result = it }\r\n\r\n        // Then the result is an error\r\n        assertTrue(result is Result.Error)', 80, 1, NULL, '2019-02-28 11:00:58', '2019-02-28 11:00:58', NULL),
(277, 'upvoteComment_whenUpvoteSuccessful', '// Given that the use case responds with success\r\n        whenever(upvoteComment(commentId))\r\n            .thenReturn(Result.Success(Unit))\r\n        // And the view model is constructed\r\n        val viewModel = withViewModel()\r\n        var result: Result<Unit>? = null\r\n\r\n        // When upvoting a comment\r\n        viewModel.commentUpvoteRequested(commentId) { result = it }\r\n\r\n        // Then the result is successful\r\n        assertEquals(Result.Success(Unit), result)', 80, 1, NULL, '2019-02-28 11:01:23', '2019-02-28 11:01:23', NULL),
(278, 'upvoteComment_whenUpvoteFailed', '// Given that the use case responds with error\r\n        val response = Result.Error(IOException(\"Error upvoting\"))\r\n        whenever(upvoteComment(commentId)).thenReturn(response)\r\n        // And the view model is constructed\r\n        val viewModel = withViewModel()\r\n        var result: Result<Unit>? = null\r\n\r\n        // When upvoting a comment\r\n        viewModel.commentUpvoteRequested(commentId) { result = it }\r\n\r\n        // Then the result is an error\r\n        assertTrue(result is Result.Error)', 80, 1, NULL, '2019-02-28 11:01:41', '2019-02-28 11:01:41', NULL),
(279, 'commentReplyRequested_withSuccess', '// Given that the comment reply is posted successfully\r\n        val expected = Result.Success(reply1)\r\n        whenever(postComment.invoke(reply1.body, reply1.parentCommentId!!)).thenReturn(expected)\r\n        // And the view model is constructed\r\n        val viewModel = withViewModel()\r\n        var result: Result<Comment>? = null\r\n\r\n        // When posting a comment reply\r\n        viewModel.commentReplyRequested(reply1.body, reply1.parentCommentId!!) {\r\n            result = it\r\n        }\r\n\r\n        // Then the result is the expected one\r\n        assertEquals(expected, result)', 80, 1, NULL, '2019-02-28 11:01:55', '2019-02-28 11:01:55', NULL),
(280, 'commentReplyRequested_withError', '// Given that the comment reply is posted with error\r\n        val expected = Result.Error(IOException(\"Error\"))\r\n        whenever(postComment.invoke(reply1.body, reply1.parentCommentId!!)).thenReturn(expected)\r\n        // And the view model is constructed\r\n        val viewModel = withViewModel()\r\n        var result: Result<Comment>? = null\r\n\r\n        // When posting a comment reply\r\n        viewModel.commentReplyRequested(reply1.body, reply1.parentCommentId!!) {\r\n            result = it\r\n        }\r\n\r\n        // Then the result is the expected one\r\n        assertEquals(expected, result)', 80, 1, NULL, '2019-02-28 11:02:13', '2019-02-28 11:02:13', NULL),
(281, 'storyReplyRequested_withSuccess', '// Given that the comment reply is posted successfully\r\n        val expected = Result.Success(reply1)\r\n        whenever(postStoryComment.invoke(reply1.body, storyId))\r\n            .thenReturn(expected)\r\n        // And the view model is constructed\r\n        val viewModel = withViewModel()\r\n        var result: Result<Comment>? = null\r\n\r\n        // When posting a comment reply\r\n        viewModel.storyReplyRequested(reply1.body) { result = it }\r\n\r\n        // Then the result is the expected one\r\n        assertEquals(expected, result)', 80, 1, NULL, '2019-02-28 11:02:34', '2019-02-28 11:02:34', NULL),
(282, 'storyReplyRequested_withError', '// Given that the comment reply is posted with error\r\n        val expected = Result.Error(IOException(\"Error\"))\r\n        whenever(postStoryComment.invoke(reply1.body, storyId)).thenReturn(expected)\r\n        // And the view model is constructed\r\n        val viewModel = withViewModel()\r\n        var result: Result<Comment>? = null\r\n\r\n        // When posting a comment reply\r\n        viewModel.storyReplyRequested(reply1.body) { result = it }\r\n\r\n        // Then the result is the expected one\r\n        assertEquals(expected, result)', 80, 1, NULL, '2019-02-28 11:02:54', '2019-02-28 11:02:54', NULL),
(283, 'getShareInfo_Png', '// Given a shot with a png image\r\n        val shot =\r\n            withUrl(\"https://cdn.dribbble.com/users/6295/screenshots/2344334/plaid_dribbble.png\")\r\n\r\n        // When invoking the use case\r\n        val shareInfo = getShareShotInfoUseCase(shot)\r\n\r\n        // Then the expected share info is returned\r\n        assertNotNull(shareInfo)\r\n        assertEquals(shot.title, shareInfo.title)\r\n        assertFalse(shareInfo.shareText.isBlank())\r\n        assertTrue(shareInfo.shareText.contains(shot.title))\r\n        assertTrue(shareInfo.shareText.contains(shot.user.name))\r\n        assertTrue(shareInfo.shareText.contains(shot.htmlUrl))\r\n        assertTrue(shareInfo.mimeType.contains(\"png\"))', 81, 7, NULL, '2019-02-28 11:10:36', '2019-02-28 11:10:36', NULL),
(284, 'getShareInfo_Gif', '// Given a shot with a gif image\r\n        val shot =\r\n            withUrl(\"https://cdn.dribbble.com/users/213811/screenshots/2916762/password_visibility_toggle.gif\")\r\n\r\n        // When invoking the use case\r\n        val shareInfo = getShareShotInfoUseCase(shot)\r\n\r\n        // Then the expected share info is returned\r\n        assertNotNull(shareInfo)\r\n        assertEquals(shot.title, shareInfo.title)\r\n        assertFalse(shareInfo.shareText.isBlank())\r\n        assertTrue(shareInfo.shareText.contains(shot.title))\r\n        assertTrue(shareInfo.shareText.contains(shot.user.name))\r\n        assertTrue(shareInfo.shareText.contains(shot.htmlUrl))\r\n        assertTrue(shareInfo.mimeType.contains(\"gif\"))', 81, 7, NULL, '2019-02-28 11:11:00', '2019-02-28 11:11:00', NULL),
(285, 'getShareInfo_Jpeg', '// Given a shot with a jpg image\r\n        val shot = withUrl(\"https://cdn.dribbble.com/users/3557/screenshots/1550672/full2.jpg\")\r\n\r\n        // When invoking the use case\r\n        val shareInfo = getShareShotInfoUseCase(shot)\r\n\r\n        // Then the expected share info is returned\r\n        assertNotNull(shareInfo)\r\n        assertEquals(shot.title, shareInfo.title)\r\n        assertFalse(shareInfo.shareText.isBlank())\r\n        assertTrue(shareInfo.shareText.contains(shot.title))\r\n        assertTrue(shareInfo.shareText.contains(shot.user.name))\r\n        assertTrue(shareInfo.shareText.contains(shot.htmlUrl))\r\n        assertTrue(shareInfo.mimeType.contains(\"jpeg\"))', 81, 7, NULL, '2019-02-28 11:11:13', '2019-02-28 11:11:13', NULL),
(286, 'loadShot_existsInRepo', '// Given that the repo successfully returns the requested shot\r\n        // When view model is constructed\r\n        val viewModel = withViewModel()\r\n\r\n        // Then the shot is present\r\n        assertNotNull(viewModel.shot)', 82, 1, NULL, '2019-02-28 11:36:04', '2019-02-28 11:36:04', NULL),
(287, 'loadShot_notInRepo', '// Given that the repo fails to return the requested shot\r\n        whenever(repo.getShot(shotId)).thenReturn(Result.Error(Exception()))\r\n\r\n        // When the view model is constructed\r\n        ShotViewModel(\r\n            shotId,\r\n            repo,\r\n            getShareShotInfoUseCase,\r\n            provideFakeCoroutinesDispatcherProvider()\r\n        )\r\n        // Then it throws', 82, 0, NULL, '2019-02-28 11:36:24', '2019-02-28 11:36:24', NULL),
(288, 'loadShot_existsInRepo', '// Given that the repo successfully returns the requested shot\r\n        // When view model is constructed\r\n        val viewModel = withViewModel()\r\n\r\n        // Then the shot is present\r\n        assertNotNull(viewModel.shot)', 82, 1, NULL, '2019-02-28 12:27:04', '2019-02-28 12:27:04', NULL),
(289, 'loadShot_notInRepo', '// Given that the repo fails to return the requested shot\r\n        whenever(repo.getShot(shotId)).thenReturn(Result.Error(Exception()))\r\n\r\n        // When the view model is constructed\r\n        ShotViewModel(\r\n            shotId,\r\n            repo,\r\n            getShareShotInfoUseCase,\r\n            provideFakeCoroutinesDispatcherProvider()\r\n        )\r\n        // Then it throws', 82, 0, NULL, '2019-02-28 12:27:25', '2019-02-28 12:27:25', NULL),
(290, 'shotClicked_sendsOpenLinkEvent', '// Given a view model with a shot with a known URL\r\n        val url = \"https://dribbble.com/shots/2344334-Plaid-Product-Icon\"\r\n        val viewModel = withViewModel(shot = testShot.copy(htmlUrl = url))\r\n\r\n        // When there is a request to view the shot\r\n        viewModel.viewShotRequested()\r\n\r\n        // Then an event is emitted to open the given url\r\n        val openLinkEvent: Event<String>? = LiveDataTestUtil.getValue(viewModel.openLink)\r\n        assertNotNull(openLinkEvent)\r\n        assertEquals(url, openLinkEvent!!.peek())', 82, 2, NULL, '2019-02-28 12:27:50', '2019-02-28 12:27:50', NULL),
(291, 'shotShareClicked_sendsShareInfoEvent', '// Given a VM with a mocked use case which return a known Share Info object\r\n        val expected = ShareShotInfo(mock(), \"Title\", \"Share Text\", \"Mime\")\r\n        val viewModel = withViewModel(shareInfo = expected)\r\n\r\n        // When there is a request to share the shot\r\n        viewModel.shareShotRequested()\r\n\r\n        // Then an event is raised with the expected info\r\n        val shareInfoEvent: Event<ShareShotInfo>? = LiveDataTestUtil.getValue(viewModel.shareShot)\r\n        assertNotNull(shareInfoEvent)\r\n        assertEquals(expected, shareInfoEvent!!.peek())', 82, 2, NULL, '2019-02-28 12:28:02', '2019-02-28 12:28:02', NULL),
(292, 'searchFor_searchesInDataManager', '// Given a query\r\n        val query = \"Plaid\"\r\n\r\n        // When searching for the query\r\n        viewModel.searchFor(query)\r\n\r\n        // Then search is called in data manager\r\n        verify(dataManager).searchFor(query)', 83, 0, NULL, '2019-02-28 12:30:00', '2019-02-28 12:30:00', NULL),
(293, 'loadMore_loadsInDataManager', '// When loading more\r\n        viewModel.loadMore()\r\n\r\n        // Then load more is called in data manager\r\n        verify(dataManager).loadMore()', 83, 0, NULL, '2019-02-28 12:30:19', '2019-02-28 12:30:19', NULL),
(294, 'clearResults_clearsInDataManager', '// When clearing results\r\n        viewModel.clearResults()\r\n\r\n        // Then clear results is called in data manager\r\n        verify(dataManager).clear()', 83, 0, NULL, '2019-02-28 12:30:36', '2019-02-28 12:30:36', NULL),
(295, 'testGetLength', 'assertThat(byteArrayUploadDataProvider.getLength()).isEqualTo(TEST_DATA.length);', 84, 1, NULL, '2019-02-28 12:44:40', '2019-02-28 12:44:40', NULL),
(296, 'testReadFullBuffer', 'byteArrayUploadDataProvider.read(mockUploadDataSink, byteBuffer);\r\n    assertThat(byteBuffer.array()).isEqualTo(TEST_DATA);', 84, 1, NULL, '2019-02-28 12:45:28', '2019-02-28 12:45:28', NULL),
(297, 'testReadPartialBuffer', 'byte[] firstHalf = Arrays.copyOf(TEST_DATA, TEST_DATA.length / 2);\r\n    byte[] secondHalf = Arrays.copyOfRange(TEST_DATA, TEST_DATA.length / 2, TEST_DATA.length);\r\n    byteBuffer = ByteBuffer.allocate(TEST_DATA.length / 2);\r\n    // Read half of the data.\r\n    byteArrayUploadDataProvider.read(mockUploadDataSink, byteBuffer);\r\n    assertThat(byteBuffer.array()).isEqualTo(firstHalf);\r\n\r\n    // Read the second half of the data.\r\n    byteBuffer.rewind();\r\n    byteArrayUploadDataProvider.read(mockUploadDataSink, byteBuffer);\r\n    assertThat(byteBuffer.array()).isEqualTo(secondHalf);\r\n    verify(mockUploadDataSink, times(2)).onReadSucceeded(false);', 84, 2, NULL, '2019-02-28 12:45:55', '2019-02-28 12:46:41', NULL),
(298, 'testRewind', '// Read all the data.\r\n    byteArrayUploadDataProvider.read(mockUploadDataSink, byteBuffer);\r\n    assertThat(byteBuffer.array()).isEqualTo(TEST_DATA);\r\n\r\n    // Rewind and make sure it can be read again.\r\n    byteBuffer.clear();\r\n    byteArrayUploadDataProvider.rewind(mockUploadDataSink);\r\n    byteArrayUploadDataProvider.read(mockUploadDataSink, byteBuffer);\r\n    assertThat(byteBuffer.array()).isEqualTo(TEST_DATA);\r\n    verify(mockUploadDataSink).onRewindSucceeded();', 84, 2, NULL, '2019-02-28 12:46:37', '2019-02-28 12:46:37', NULL),
(299, 'testGetCastTimeline', 'MediaInfo mediaInfo;\r\n    MediaStatus status =\r\n        mockMediaStatus(\r\n            new int[] {1, 2, 3},\r\n            new String[] {\"contentId1\", \"contentId2\", \"contentId3\"},\r\n            new long[] {DURATION_1_MS, MediaInfo.UNKNOWN_DURATION, MediaInfo.UNKNOWN_DURATION});\r\n\r\n    CastTimelineTracker tracker = new CastTimelineTracker();\r\n    mediaInfo = getMediaInfo(\"contentId1\", DURATION_1_MS);\r\n    Mockito.when(status.getMediaInfo()).thenReturn(mediaInfo);\r\n    TimelineAsserts.assertPeriodDurations(\r\n        tracker.getCastTimeline(status), C.msToUs(DURATION_1_MS), C.TIME_UNSET, C.TIME_UNSET);\r\n\r\n    mediaInfo = getMediaInfo(\"contentId3\", DURATION_3_MS);\r\n    Mockito.when(status.getMediaInfo()).thenReturn(mediaInfo);\r\n    TimelineAsserts.assertPeriodDurations(\r\n        tracker.getCastTimeline(status),\r\n        C.msToUs(DURATION_1_MS),\r\n        C.TIME_UNSET,\r\n        C.msToUs(DURATION_3_MS));\r\n\r\n    mediaInfo = getMediaInfo(\"contentId2\", DURATION_2_MS);\r\n    Mockito.when(status.getMediaInfo()).thenReturn(mediaInfo);\r\n    TimelineAsserts.assertPeriodDurations(\r\n        tracker.getCastTimeline(status),\r\n        C.msToUs(DURATION_1_MS),\r\n        C.msToUs(DURATION_2_MS),\r\n        C.msToUs(DURATION_3_MS));\r\n\r\n    MediaStatus newStatus =\r\n        mockMediaStatus(\r\n            new int[] {4, 1, 5, 3},\r\n            new String[] {\"contentId4\", \"contentId1\", \"contentId5\", \"contentId3\"},\r\n            new long[] {\r\n              MediaInfo.UNKNOWN_DURATION,\r\n              MediaInfo.UNKNOWN_DURATION,\r\n              DURATION_5_MS,\r\n              MediaInfo.UNKNOWN_DURATION\r\n            });\r\n    mediaInfo = getMediaInfo(\"contentId5\", DURATION_5_MS);\r\n    Mockito.when(newStatus.getMediaInfo()).thenReturn(mediaInfo);\r\n    TimelineAsserts.assertPeriodDurations(\r\n        tracker.getCastTimeline(newStatus),\r\n        C.TIME_UNSET,\r\n        C.msToUs(DURATION_1_MS),\r\n        C.msToUs(DURATION_5_MS),\r\n        C.msToUs(DURATION_3_MS));\r\n\r\n    mediaInfo = getMediaInfo(\"contentId3\", DURATION_3_MS);\r\n    Mockito.when(newStatus.getMediaInfo()).thenReturn(mediaInfo);\r\n    TimelineAsserts.assertPeriodDurations(\r\n        tracker.getCastTimeline(newStatus),\r\n        C.TIME_UNSET,\r\n        C.msToUs(DURATION_1_MS),\r\n        C.msToUs(DURATION_5_MS),\r\n        C.msToUs(DURATION_3_MS));\r\n\r\n    mediaInfo = getMediaInfo(\"contentId4\", DURATION_4_MS);\r\n    Mockito.when(newStatus.getMediaInfo()).thenReturn(mediaInfo);\r\n    TimelineAsserts.assertPeriodDurations(\r\n        tracker.getCastTimeline(newStatus),\r\n        C.msToUs(DURATION_4_MS),\r\n        C.msToUs(DURATION_1_MS),\r\n        C.msToUs(DURATION_5_MS),\r\n        C.msToUs(DURATION_3_MS));', 85, 6, NULL, '2019-02-28 12:50:36', '2019-02-28 12:50:36', NULL),
(300, 'testOpeningTwiceThrows', 'mockResponseStartSuccess();\r\n    dataSourceUnderTest.open(testDataSpec);\r\n    try {\r\n      dataSourceUnderTest.open(testDataSpec);\r\n      fail(\"Expected IllegalStateException.\");\r\n    } catch (IllegalStateException e) {\r\n      // Expected.\r\n    }', 86, 0, NULL, '2019-02-28 12:52:47', '2019-02-28 12:52:47', NULL),
(301, 'testCallbackFromPreviousRequest', 'mockResponseStartSuccess();\r\n\r\n    dataSourceUnderTest.open(testDataSpec);\r\n    dataSourceUnderTest.close();\r\n    // Prepare a mock UrlRequest to be used in the second open() call.\r\n    final UrlRequest mockUrlRequest2 = mock(UrlRequest.class);\r\n    when(mockUrlRequestBuilder.build()).thenReturn(mockUrlRequest2);\r\n    doAnswer(\r\n            invocation -> {\r\n              // Invoke the callback for the previous request.\r\n              dataSourceUnderTest.urlRequestCallback.onFailed(\r\n                  mockUrlRequest, testUrlResponseInfo, mockNetworkException);\r\n              dataSourceUnderTest.urlRequestCallback.onResponseStarted(\r\n                  mockUrlRequest2, testUrlResponseInfo);\r\n              return null;\r\n            })\r\n        .when(mockUrlRequest2)\r\n        .start();\r\n    dataSourceUnderTest.open(testDataSpec);', 86, 0, NULL, '2019-02-28 12:53:39', '2019-02-28 12:53:39', NULL),
(302, 'testRequestStartCalled', 'mockResponseStartSuccess();\r\n\r\n    dataSourceUnderTest.open(testDataSpec);\r\n    verify(mockCronetEngine)\r\n        .newUrlRequestBuilder(eq(TEST_URL), any(UrlRequest.Callback.class), any(Executor.class));\r\n    verify(mockUrlRequest).start();', 86, 0, NULL, '2019-02-28 12:54:57', '2019-02-28 12:54:57', NULL),
(303, 'testRequestHeadersSet', 'testDataSpec = new DataSpec(Uri.parse(TEST_URL), 1000, 5000, null);\r\n    mockResponseStartSuccess();\r\n\r\n    dataSourceUnderTest.setRequestProperty(\"firstHeader\", \"firstValue\");\r\n    dataSourceUnderTest.setRequestProperty(\"secondHeader\", \"secondValue\");\r\n\r\n    dataSourceUnderTest.open(testDataSpec);\r\n    // The header value to add is current position to current position + length - 1.\r\n    verify(mockUrlRequestBuilder).addHeader(\"Range\", \"bytes=1000-5999\");\r\n    verify(mockUrlRequestBuilder).addHeader(\"firstHeader\", \"firstValue\");\r\n    verify(mockUrlRequestBuilder).addHeader(\"secondHeader\", \"secondValue\");\r\n    verify(mockUrlRequest).start();', 86, 0, NULL, '2019-02-28 12:56:08', '2019-02-28 12:56:08', NULL),
(304, 'testRequestOpen', 'mockResponseStartSuccess();\r\n    assertThat(dataSourceUnderTest.open(testDataSpec)).isEqualTo(TEST_CONTENT_LENGTH);\r\n    verify(mockTransferListener)\r\n        .onTransferStart(dataSourceUnderTest, testDataSpec, /* isNetwork= */ true);', 86, 1, NULL, '2019-02-28 12:56:33', '2019-02-28 12:56:33', NULL),
(305, 'testRequestOpenGzippedCompressedReturnsDataSpecLength', 'testDataSpec = new DataSpec(Uri.parse(TEST_URL), 0, 5000, null);\r\n    testResponseHeader.put(\"Content-Encoding\", \"gzip\");\r\n    testResponseHeader.put(\"Content-Length\", Long.toString(50L));\r\n    mockResponseStartSuccess();\r\n\r\n    assertThat(dataSourceUnderTest.open(testDataSpec)).isEqualTo(5000 /* contentLength */);\r\n    verify(mockTransferListener)\r\n        .onTransferStart(dataSourceUnderTest, testDataSpec, /* isNetwork= */ true);', 86, 1, NULL, '2019-02-28 12:57:06', '2019-02-28 12:57:06', NULL),
(306, 'testRequestOpenFail', 'mockResponseStartFailure();\r\n\r\n    try {\r\n      dataSourceUnderTest.open(testDataSpec);\r\n      fail(\"HttpDataSource.HttpDataSourceException expected\");\r\n    } catch (HttpDataSourceException e) {\r\n      // Check for connection not automatically closed.\r\n      assertThat(e.getCause() instanceof UnknownHostException).isFalse();\r\n      verify(mockUrlRequest, never()).cancel();\r\n      verify(mockTransferListener, never())\r\n          .onTransferStart(dataSourceUnderTest, testDataSpec, /* isNetwork= */ true);\r\n    }', 86, 1, NULL, '2019-02-28 12:57:27', '2019-02-28 12:57:27', NULL),
(307, 'testRequestOpenFailDueToDnsFailure', 'mockResponseStartFailure();\r\n    when(mockNetworkException.getErrorCode())\r\n        .thenReturn(NetworkException.ERROR_HOSTNAME_NOT_RESOLVED);\r\n\r\n    try {\r\n      dataSourceUnderTest.open(testDataSpec);\r\n      fail(\"HttpDataSource.HttpDataSourceException expected\");\r\n    } catch (HttpDataSourceException e) {\r\n      // Check for connection not automatically closed.\r\n      assertThat(e.getCause() instanceof UnknownHostException).isTrue();\r\n      verify(mockUrlRequest, never()).cancel();\r\n      verify(mockTransferListener, never())\r\n          .onTransferStart(dataSourceUnderTest, testDataSpec, /* isNetwork= */ true);\r\n    }', 86, 1, NULL, '2019-02-28 12:58:59', '2019-02-28 12:58:59', NULL),
(308, 'testRequestOpenValidatesStatusCode', 'mockResponseStartSuccess();\r\n    testUrlResponseInfo = createUrlResponseInfo(500); // statusCode\r\n\r\n    try {\r\n      dataSourceUnderTest.open(testDataSpec);\r\n      fail(\"HttpDataSource.HttpDataSourceException expected\");\r\n    } catch (HttpDataSourceException e) {\r\n      assertThat(e instanceof HttpDataSource.InvalidResponseCodeException).isTrue();\r\n      // Check for connection not automatically closed.\r\n      verify(mockUrlRequest, never()).cancel();\r\n      verify(mockTransferListener, never())\r\n          .onTransferStart(dataSourceUnderTest, testDataSpec, /* isNetwork= */ true);\r\n    }', 86, 1, NULL, '2019-02-28 12:59:13', '2019-02-28 12:59:13', NULL),
(309, 'testRequestOpenValidatesContentTypePredicate', 'mockResponseStartSuccess();\r\n    when(mockContentTypePredicate.evaluate(anyString())).thenReturn(false);\r\n\r\n    try {\r\n      dataSourceUnderTest.open(testDataSpec);\r\n      fail(\"HttpDataSource.HttpDataSourceException expected\");\r\n    } catch (HttpDataSourceException e) {\r\n      assertThat(e instanceof HttpDataSource.InvalidContentTypeException).isTrue();\r\n      // Check for connection not automatically closed.\r\n      verify(mockUrlRequest, never()).cancel();\r\n      verify(mockContentTypePredicate).evaluate(TEST_CONTENT_TYPE);\r\n    }', 86, 1, NULL, '2019-02-28 12:59:30', '2019-02-28 12:59:30', NULL),
(310, 'testPostRequestOpen', 'mockResponseStartSuccess();\r\n\r\n    dataSourceUnderTest.setRequestProperty(\"Content-Type\", TEST_CONTENT_TYPE);\r\n    assertThat(dataSourceUnderTest.open(testPostDataSpec)).isEqualTo(TEST_CONTENT_LENGTH);\r\n    verify(mockTransferListener)\r\n        .onTransferStart(dataSourceUnderTest, testPostDataSpec, /* isNetwork= */ true);', 86, 1, NULL, '2019-02-28 12:59:46', '2019-02-28 12:59:46', NULL),
(311, 'testPostRequestOpenValidatesContentType', 'mockResponseStartSuccess();\r\n\r\n    try {\r\n      dataSourceUnderTest.open(testPostDataSpec);\r\n      fail(\"HttpDataSource.HttpDataSourceException expected\");\r\n    } catch (HttpDataSourceException e) {\r\n      verify(mockUrlRequest, never()).start();\r\n    }', 86, 0, NULL, '2019-02-28 13:00:10', '2019-02-28 13:00:10', NULL),
(312, 'testPostRequestOpenRejects307Redirects', 'mockResponseStartSuccess();\r\n    mockResponseStartRedirect();\r\n\r\n    try {\r\n      dataSourceUnderTest.setRequestProperty(\"Content-Type\", TEST_CONTENT_TYPE);\r\n      dataSourceUnderTest.open(testPostDataSpec);\r\n      fail(\"HttpDataSource.HttpDataSourceException expected\");\r\n    } catch (HttpDataSourceException e) {\r\n      verify(mockUrlRequest, never()).followRedirect();\r\n    }', 86, 0, NULL, '2019-02-28 13:00:28', '2019-02-28 13:00:28', NULL),
(313, 'testHeadRequestOpen', 'mockResponseStartSuccess();\r\n    dataSourceUnderTest.open(testHeadDataSpec);\r\n    verify(mockTransferListener)\r\n        .onTransferStart(dataSourceUnderTest, testHeadDataSpec, /* isNetwork= */ true);\r\n    dataSourceUnderTest.close();', 86, 0, NULL, '2019-02-28 13:00:52', '2019-02-28 13:00:52', NULL),
(314, 'testRequestReadTwice', 'mockResponseStartSuccess();\r\n    mockReadSuccess(0, 16);\r\n\r\n    dataSourceUnderTest.open(testDataSpec);\r\n\r\n    byte[] returnedBuffer = new byte[8];\r\n    int bytesRead = dataSourceUnderTest.read(returnedBuffer, 0, 8);\r\n    assertThat(returnedBuffer).isEqualTo(buildTestDataArray(0, 8));\r\n    assertThat(bytesRead).isEqualTo(8);\r\n\r\n    returnedBuffer = new byte[8];\r\n    bytesRead = dataSourceUnderTest.read(returnedBuffer, 0, 8);\r\n    assertThat(returnedBuffer).isEqualTo(buildTestDataArray(8, 8));\r\n    assertThat(bytesRead).isEqualTo(8);\r\n\r\n    // Should have only called read on cronet once.\r\n    verify(mockUrlRequest, times(1)).read(any(ByteBuffer.class));\r\n    verify(mockTransferListener, times(2))\r\n        .onBytesTransferred(dataSourceUnderTest, testDataSpec, /* isNetwork= */ true, 8);', 86, 4, NULL, '2019-02-28 13:01:49', '2019-02-28 13:01:49', NULL),
(315, 'testSecondRequestNoContentLength', 'mockResponseStartSuccess();\r\n    testResponseHeader.put(\"Content-Length\", Long.toString(1L));\r\n    mockReadSuccess(0, 16);\r\n\r\n    // First request.\r\n    dataSourceUnderTest.open(testDataSpec);\r\n    byte[] returnedBuffer = new byte[8];\r\n    dataSourceUnderTest.read(returnedBuffer, 0, 1);\r\n    dataSourceUnderTest.close();\r\n\r\n    testResponseHeader.remove(\"Content-Length\");\r\n    mockReadSuccess(0, 16);\r\n\r\n    // Second request.\r\n    dataSourceUnderTest.open(testDataSpec);\r\n    returnedBuffer = new byte[16];\r\n    int bytesRead = dataSourceUnderTest.read(returnedBuffer, 0, 10);\r\n    assertThat(bytesRead).isEqualTo(10);\r\n    bytesRead = dataSourceUnderTest.read(returnedBuffer, 0, 10);\r\n    assertThat(bytesRead).isEqualTo(6);\r\n    bytesRead = dataSourceUnderTest.read(returnedBuffer, 0, 10);\r\n    assertThat(bytesRead).isEqualTo(C.RESULT_END_OF_INPUT);', 86, 3, NULL, '2019-02-28 13:02:31', '2019-02-28 13:02:31', NULL),
(316, 'testReadWithOffset', 'mockResponseStartSuccess();\r\n    mockReadSuccess(0, 16);\r\n\r\n    dataSourceUnderTest.open(testDataSpec);\r\n\r\n    byte[] returnedBuffer = new byte[16];\r\n    int bytesRead = dataSourceUnderTest.read(returnedBuffer, 8, 8);\r\n    assertThat(bytesRead).isEqualTo(8);\r\n    assertThat(returnedBuffer).isEqualTo(prefixZeros(buildTestDataArray(0, 8), 16));\r\n    verify(mockTransferListener)\r\n        .onBytesTransferred(dataSourceUnderTest, testDataSpec, /* isNetwork= */ true, 8)', 86, 2, NULL, '2019-02-28 13:02:46', '2019-02-28 13:02:46', NULL),
(317, 'testRangeRequestWith206Response', 'mockResponseStartSuccess();\r\n    mockReadSuccess(1000, 5000);\r\n    testUrlResponseInfo = createUrlResponseInfo(206); // Server supports range requests.\r\n    testDataSpec = new DataSpec(Uri.parse(TEST_URL), 1000, 5000, null);\r\n\r\n    dataSourceUnderTest.open(testDataSpec);\r\n\r\n    byte[] returnedBuffer = new byte[16];\r\n    int bytesRead = dataSourceUnderTest.read(returnedBuffer, 0, 16);\r\n    assertThat(bytesRead).isEqualTo(16);\r\n    assertThat(returnedBuffer).isEqualTo(buildTestDataArray(1000, 16));\r\n    verify(mockTransferListener)\r\n        .onBytesTransferred(dataSourceUnderTest, testDataSpec, /* isNetwork= */ true, 16);', 86, 2, NULL, '2019-02-28 13:03:07', '2019-02-28 13:03:07', NULL),
(318, 'testRangeRequestWith200Response', 'mockResponseStartSuccess();\r\n    mockReadSuccess(0, 7000);\r\n    testUrlResponseInfo = createUrlResponseInfo(200); // Server does not support range requests.\r\n    testDataSpec = new DataSpec(Uri.parse(TEST_URL), 1000, 5000, null);\r\n\r\n    dataSourceUnderTest.open(testDataSpec);\r\n\r\n    byte[] returnedBuffer = new byte[16];\r\n    int bytesRead = dataSourceUnderTest.read(returnedBuffer, 0, 16);\r\n    assertThat(bytesRead).isEqualTo(16);\r\n    assertThat(returnedBuffer).isEqualTo(buildTestDataArray(1000, 16));\r\n    verify(mockTransferListener)\r\n        .onBytesTransferred(dataSourceUnderTest, testDataSpec, /* isNetwork= */ true, 16);', 86, 2, NULL, '2019-02-28 13:03:29', '2019-02-28 13:03:29', NULL),
(319, 'testReadWithUnsetLength', 'testResponseHeader.remove(\"Content-Length\");\r\n    mockResponseStartSuccess();\r\n    mockReadSuccess(0, 16);\r\n\r\n    dataSourceUnderTest.open(testDataSpec);\r\n\r\n    byte[] returnedBuffer = new byte[16];\r\n    int bytesRead = dataSourceUnderTest.read(returnedBuffer, 8, 8);\r\n    assertThat(returnedBuffer).isEqualTo(prefixZeros(buildTestDataArray(0, 8), 16));\r\n    assertThat(bytesRead).isEqualTo(8);\r\n    verify(mockTransferListener)\r\n        .onBytesTransferred(dataSourceUnderTest, testDataSpec, /* isNetwork= */ true, 8);', 86, 2, NULL, '2019-02-28 13:03:40', '2019-02-28 13:03:40', NULL),
(320, 'testReadReturnsWhatItCan', 'mockResponseStartSuccess();\r\n    mockReadSuccess(0, 16);\r\n\r\n    dataSourceUnderTest.open(testDataSpec);\r\n\r\n    byte[] returnedBuffer = new byte[24];\r\n    int bytesRead = dataSourceUnderTest.read(returnedBuffer, 0, 24);\r\n    assertThat(returnedBuffer).isEqualTo(suffixZeros(buildTestDataArray(0, 16), 24));\r\n    assertThat(bytesRead).isEqualTo(16);\r\n    verify(mockTransferListener)\r\n        .onBytesTransferred(dataSourceUnderTest, testDataSpec, /* isNetwork= */ true, 16);', 86, 2, NULL, '2019-02-28 13:03:53', '2019-02-28 13:03:53', NULL),
(321, 'testClosedMeansClosed', 'mockResponseStartSuccess();\r\n    mockReadSuccess(0, 16);\r\n\r\n    int bytesRead = 0;\r\n    dataSourceUnderTest.open(testDataSpec);\r\n\r\n    byte[] returnedBuffer = new byte[8];\r\n    bytesRead += dataSourceUnderTest.read(returnedBuffer, 0, 8);\r\n    assertThat(returnedBuffer).isEqualTo(buildTestDataArray(0, 8));\r\n    assertThat(bytesRead).isEqualTo(8);\r\n\r\n    dataSourceUnderTest.close();\r\n    verify(mockTransferListener)\r\n        .onTransferEnd(dataSourceUnderTest, testDataSpec, /* isNetwork= */ true);\r\n\r\n    try {\r\n      bytesRead += dataSourceUnderTest.read(returnedBuffer, 0, 8);\r\n      fail();\r\n    } catch (IllegalStateException e) {\r\n      // Expected.\r\n    }\r\n\r\n    // 16 bytes were attempted but only 8 should have been successfully read.\r\n    assertThat(bytesRead).isEqualTo(8);', 86, 3, NULL, '2019-02-28 13:05:08', '2019-02-28 13:05:08', NULL),
(322, 'testOverread', 'testDataSpec = new DataSpec(Uri.parse(TEST_URL), 0, 16, null);\r\n    testResponseHeader.put(\"Content-Length\", Long.toString(16L));\r\n    mockResponseStartSuccess();\r\n    mockReadSuccess(0, 16);\r\n\r\n    dataSourceUnderTest.open(testDataSpec);\r\n\r\n    byte[] returnedBuffer = new byte[8];\r\n    int bytesRead = dataSourceUnderTest.read(returnedBuffer, 0, 8);\r\n    assertThat(bytesRead).isEqualTo(8);\r\n    assertThat(returnedBuffer).isEqualTo(buildTestDataArray(0, 8));\r\n\r\n    // The current buffer is kept if not completely consumed by DataSource reader.\r\n    returnedBuffer = new byte[8];\r\n    bytesRead += dataSourceUnderTest.read(returnedBuffer, 0, 6);\r\n    assertThat(bytesRead).isEqualTo(14);\r\n    assertThat(returnedBuffer).isEqualTo(suffixZeros(buildTestDataArray(8, 6), 8));\r\n\r\n    // 2 bytes left at this point.\r\n    returnedBuffer = new byte[8];\r\n    bytesRead += dataSourceUnderTest.read(returnedBuffer, 0, 8);\r\n    assertThat(bytesRead).isEqualTo(16);\r\n    assertThat(returnedBuffer).isEqualTo(suffixZeros(buildTestDataArray(14, 2), 8));\r\n\r\n    // Should have only called read on cronet once.\r\n    verify(mockUrlRequest, times(1)).read(any(ByteBuffer.class));\r\n    verify(mockTransferListener, times(1))\r\n        .onBytesTransferred(dataSourceUnderTest, testDataSpec, /* isNetwork= */ true, 8);\r\n    verify(mockTransferListener, times(1))\r\n        .onBytesTransferred(dataSourceUnderTest, testDataSpec, /* isNetwork= */ true, 6);\r\n    verify(mockTransferListener, times(1))\r\n        .onBytesTransferred(dataSourceUnderTest, testDataSpec, /* isNetwork= */ true, 2);\r\n\r\n    // Now we already returned the 16 bytes initially asked.\r\n    // Try to read again even though all requested 16 bytes are already returned.\r\n    // Return C.RESULT_END_OF_INPUT\r\n    returnedBuffer = new byte[16];\r\n    int bytesOverRead = dataSourceUnderTest.read(returnedBuffer, 0, 16);\r\n    assertThat(bytesOverRead).isEqualTo(C.RESULT_END_OF_INPUT);\r\n    assertThat(returnedBuffer).isEqualTo(new byte[16]);\r\n    // C.RESULT_END_OF_INPUT should not be reported though the TransferListener.\r\n    verify(mockTransferListener, never())\r\n        .onBytesTransferred(\r\n            dataSourceUnderTest, testDataSpec, /* isNetwork= */ true, C.RESULT_END_OF_INPUT);\r\n    // There should still be only one call to read on cronet.\r\n    verify(mockUrlRequest, times(1)).read(any(ByteBuffer.class));\r\n    // Check for connection not automatically closed.\r\n    verify(mockUrlRequest, never()).cancel();\r\n    assertThat(bytesRead).isEqualTo(16);', 86, 9, NULL, '2019-02-28 13:05:51', '2019-02-28 13:05:51', NULL),
(323, 'testConnectTimeout', 'long startTimeMs = SystemClock.elapsedRealtime();\r\n    final ConditionVariable startCondition = buildUrlRequestStartedCondition();\r\n    final CountDownLatch timedOutLatch = new CountDownLatch(1);\r\n\r\n    new Thread() {\r\n      @Override\r\n      public void run() {\r\n        try {\r\n          dataSourceUnderTest.open(testDataSpec);\r\n          fail();\r\n        } catch (HttpDataSourceException e) {\r\n          // Expected.\r\n          assertThat(e instanceof CronetDataSource.OpenException).isTrue();\r\n          assertThat(e.getCause() instanceof SocketTimeoutException).isTrue();\r\n          assertThat(((CronetDataSource.OpenException) e).cronetConnectionStatus)\r\n              .isEqualTo(TEST_CONNECTION_STATUS);\r\n          timedOutLatch.countDown();\r\n        }\r\n      }\r\n    }.start();\r\n    startCondition.block();\r\n\r\n    // We should still be trying to open.\r\n    assertNotCountedDown(timedOutLatch);\r\n    // We should still be trying to open as we approach the timeout.\r\n    SystemClock.setCurrentTimeMillis(startTimeMs + TEST_CONNECT_TIMEOUT_MS - 1);\r\n    assertNotCountedDown(timedOutLatch);\r\n    // Now we timeout.\r\n    SystemClock.setCurrentTimeMillis(startTimeMs + TEST_CONNECT_TIMEOUT_MS + 10);\r\n    timedOutLatch.await();\r\n\r\n    verify(mockTransferListener, never())\r\n        .onTransferStart(dataSourceUnderTest, testDataSpec, /* isNetwork= */ true);', 86, 5, NULL, '2019-02-28 13:07:19', '2019-02-28 13:07:19', NULL);
INSERT INTO `test_codes` (`id`, `method_name`, `method_body`, `test_code_class_id`, `assert_count`, `deleted_at`, `created_at`, `updated_at`, `source_codes`) VALUES
(324, 'testConnectInterrupted', 'long startTimeMs = SystemClock.elapsedRealtime();\r\n    final ConditionVariable startCondition = buildUrlRequestStartedCondition();\r\n    final CountDownLatch timedOutLatch = new CountDownLatch(1);\r\n\r\n    Thread thread =\r\n        new Thread() {\r\n          @Override\r\n          public void run() {\r\n            try {\r\n              dataSourceUnderTest.open(testDataSpec);\r\n              fail();\r\n            } catch (HttpDataSourceException e) {\r\n              // Expected.\r\n              assertThat(e instanceof CronetDataSource.OpenException).isTrue();\r\n              assertThat(e.getCause() instanceof CronetDataSource.InterruptedIOException).isTrue();\r\n              assertThat(((CronetDataSource.OpenException) e).cronetConnectionStatus)\r\n                  .isEqualTo(TEST_INVALID_CONNECTION_STATUS);\r\n              timedOutLatch.countDown();\r\n            }\r\n          }\r\n        };\r\n    thread.start();\r\n    startCondition.block();\r\n\r\n    // We should still be trying to open.\r\n    assertNotCountedDown(timedOutLatch);\r\n    // We should still be trying to open as we approach the timeout.\r\n    SystemClock.setCurrentTimeMillis(startTimeMs + TEST_CONNECT_TIMEOUT_MS - 1);\r\n    assertNotCountedDown(timedOutLatch);\r\n    // Now we interrupt.\r\n    thread.interrupt();\r\n    timedOutLatch.await();\r\n\r\n    verify(mockTransferListener, never())\r\n        .onTransferStart(dataSourceUnderTest, testDataSpec, /* isNetwork= */ true);', 86, 5, NULL, '2019-02-28 13:08:25', '2019-02-28 13:08:25', NULL),
(325, 'testConnectResponseBeforeTimeout', 'long startTimeMs = SystemClock.elapsedRealtime();\r\n    final ConditionVariable startCondition = buildUrlRequestStartedCondition();\r\n    final CountDownLatch openLatch = new CountDownLatch(1);\r\n\r\n    AtomicReference<Exception> exceptionOnTestThread = new AtomicReference<>();\r\n    new Thread() {\r\n      @Override\r\n      public void run() {\r\n        try {\r\n          dataSourceUnderTest.open(testDataSpec);\r\n        } catch (HttpDataSourceException e) {\r\n          exceptionOnTestThread.set(e);\r\n        } finally {\r\n          openLatch.countDown();\r\n        }\r\n      }\r\n    }.start();\r\n    startCondition.block();\r\n\r\n    // We should still be trying to open.\r\n    assertNotCountedDown(openLatch);\r\n    // We should still be trying to open as we approach the timeout.\r\n    SystemClock.setCurrentTimeMillis(startTimeMs + TEST_CONNECT_TIMEOUT_MS - 1);\r\n    assertNotCountedDown(openLatch);\r\n    // The response arrives just in time.\r\n    dataSourceUnderTest.urlRequestCallback.onResponseStarted(mockUrlRequest, testUrlResponseInfo);\r\n    openLatch.await();\r\n    assertThat(exceptionOnTestThread.get()).isNull();', 86, 3, NULL, '2019-02-28 13:08:44', '2019-02-28 13:08:44', NULL),
(326, 'testRedirectIncreasesConnectionTimeout', 'long startTimeMs = SystemClock.elapsedRealtime();\r\n    final ConditionVariable startCondition = buildUrlRequestStartedCondition();\r\n    final CountDownLatch timedOutLatch = new CountDownLatch(1);\r\n    final AtomicInteger openExceptions = new AtomicInteger(0);\r\n\r\n    new Thread() {\r\n      @Override\r\n      public void run() {\r\n        try {\r\n          dataSourceUnderTest.open(testDataSpec);\r\n          fail();\r\n        } catch (HttpDataSourceException e) {\r\n          // Expected.\r\n          assertThat(e instanceof CronetDataSource.OpenException).isTrue();\r\n          assertThat(e.getCause() instanceof SocketTimeoutException).isTrue();\r\n          openExceptions.getAndIncrement();\r\n          timedOutLatch.countDown();\r\n        }\r\n      }\r\n    }.start();\r\n    startCondition.block();\r\n\r\n    // We should still be trying to open.\r\n    assertNotCountedDown(timedOutLatch);\r\n    // We should still be trying to open as we approach the timeout.\r\n    SystemClock.setCurrentTimeMillis(startTimeMs + TEST_CONNECT_TIMEOUT_MS - 1);\r\n    assertNotCountedDown(timedOutLatch);\r\n    // A redirect arrives just in time.\r\n    dataSourceUnderTest.urlRequestCallback.onRedirectReceived(\r\n        mockUrlRequest, testUrlResponseInfo, \"RandomRedirectedUrl1\");\r\n\r\n    long newTimeoutMs = 2 * TEST_CONNECT_TIMEOUT_MS - 1;\r\n    SystemClock.setCurrentTimeMillis(startTimeMs + newTimeoutMs - 1);\r\n    // We should still be trying to open as we approach the new timeout.\r\n    assertNotCountedDown(timedOutLatch);\r\n    // A redirect arrives just in time.\r\n    dataSourceUnderTest.urlRequestCallback.onRedirectReceived(\r\n        mockUrlRequest, testUrlResponseInfo, \"RandomRedirectedUrl2\");\r\n\r\n    newTimeoutMs = 3 * TEST_CONNECT_TIMEOUT_MS - 2;\r\n    SystemClock.setCurrentTimeMillis(startTimeMs + newTimeoutMs - 1);\r\n    // We should still be trying to open as we approach the new timeout.\r\n    assertNotCountedDown(timedOutLatch);\r\n    // Now we timeout.\r\n    SystemClock.setCurrentTimeMillis(startTimeMs + newTimeoutMs + 10);\r\n    timedOutLatch.await();\r\n\r\n    verify(mockTransferListener, never())\r\n        .onTransferStart(dataSourceUnderTest, testDataSpec, /* isNetwork= */ true);\r\n    assertThat(openExceptions.get()).isEqualTo(1);', 86, 7, NULL, '2019-02-28 13:09:31', '2019-02-28 13:09:31', NULL),
(327, 'testRedirectParseAndAttachCookie_dataSourceDoesNotHandleSetCookie_followsRedirect', 'mockSingleRedirectSuccess();\r\n    mockFollowRedirectSuccess();\r\n\r\n    testResponseHeader.put(\"Set-Cookie\", \"testcookie=testcookie; Path=/video\");\r\n\r\n    dataSourceUnderTest.open(testDataSpec);\r\n    verify(mockUrlRequestBuilder, never()).addHeader(eq(\"Cookie\"), any(String.class));\r\n    verify(mockUrlRequest).followRedirect();', 86, 0, NULL, '2019-02-28 13:10:02', '2019-02-28 13:10:02', NULL),
(328, 'testRedirectParseAndAttachCookie_dataSourceHandlesSetCookie_andPreservesOriginalRequestHeaders', 'dataSourceUnderTest =\r\n        new CronetDataSource(\r\n            mockCronetEngine,\r\n            mockExecutor,\r\n            mockContentTypePredicate,\r\n            TEST_CONNECT_TIMEOUT_MS,\r\n            TEST_READ_TIMEOUT_MS,\r\n            true, // resetTimeoutOnRedirects\r\n            Clock.DEFAULT,\r\n            null,\r\n            true);\r\n    dataSourceUnderTest.addTransferListener(mockTransferListener);\r\n    dataSourceUnderTest.setRequestProperty(\"Content-Type\", TEST_CONTENT_TYPE);\r\n\r\n    mockSingleRedirectSuccess();\r\n\r\n    testResponseHeader.put(\"Set-Cookie\", \"testcookie=testcookie; Path=/video\");\r\n\r\n    dataSourceUnderTest.open(testDataSpec);\r\n    verify(mockUrlRequestBuilder).addHeader(eq(\"Cookie\"), any(String.class));\r\n    verify(mockUrlRequestBuilder, never()).addHeader(eq(\"Range\"), any(String.class));\r\n    verify(mockUrlRequestBuilder, times(2)).addHeader(\"Content-Type\", TEST_CONTENT_TYPE);\r\n    verify(mockUrlRequest, never()).followRedirect();\r\n    verify(mockUrlRequest, times(2)).start();', 86, 0, NULL, '2019-02-28 13:10:21', '2019-02-28 13:10:21', NULL),
(329, 'testRedirectParseAndAttachCookie_dataSourceHandlesSetCookie_andPreservesOriginalRequestHeadersIncludingByteRangeHeader', 'testDataSpec = new DataSpec(Uri.parse(TEST_URL), 1000, 5000, null);\r\n    dataSourceUnderTest =\r\n        new CronetDataSource(\r\n            mockCronetEngine,\r\n            mockExecutor,\r\n            mockContentTypePredicate,\r\n            TEST_CONNECT_TIMEOUT_MS,\r\n            TEST_READ_TIMEOUT_MS,\r\n            true, // resetTimeoutOnRedirects\r\n            Clock.DEFAULT,\r\n            null,\r\n            true);\r\n    dataSourceUnderTest.addTransferListener(mockTransferListener);\r\n    dataSourceUnderTest.setRequestProperty(\"Content-Type\", TEST_CONTENT_TYPE);\r\n\r\n    mockSingleRedirectSuccess();\r\n\r\n    testResponseHeader.put(\"Set-Cookie\", \"testcookie=testcookie; Path=/video\");\r\n\r\n    dataSourceUnderTest.open(testDataSpec);\r\n    verify(mockUrlRequestBuilder).addHeader(eq(\"Cookie\"), any(String.class));\r\n    verify(mockUrlRequestBuilder, times(2)).addHeader(\"Range\", \"bytes=1000-5999\");\r\n    verify(mockUrlRequestBuilder, times(2)).addHeader(\"Content-Type\", TEST_CONTENT_TYPE);\r\n    verify(mockUrlRequest, never()).followRedirect();\r\n    verify(mockUrlRequest, times(2)).start();', 86, 0, NULL, '2019-02-28 13:10:52', '2019-02-28 13:10:52', NULL),
(330, 'testRedirectNoSetCookieFollowsRedirect', 'mockSingleRedirectSuccess();\r\n    mockFollowRedirectSuccess();\r\n\r\n    dataSourceUnderTest.open(testDataSpec);\r\n    verify(mockUrlRequestBuilder, never()).addHeader(eq(\"Cookie\"), any(String.class));\r\n    verify(mockUrlRequest).followRedirect();', 86, 0, NULL, '2019-02-28 13:11:10', '2019-02-28 13:11:10', NULL),
(331, 'testRedirectNoSetCookieFollowsRedirect_dataSourceHandlesSetCookie', 'dataSourceUnderTest =\r\n        new CronetDataSource(\r\n            mockCronetEngine,\r\n            mockExecutor,\r\n            mockContentTypePredicate,\r\n            TEST_CONNECT_TIMEOUT_MS,\r\n            TEST_READ_TIMEOUT_MS,\r\n            true, // resetTimeoutOnRedirects\r\n            Clock.DEFAULT,\r\n            null,\r\n            true);\r\n    dataSourceUnderTest.addTransferListener(mockTransferListener);\r\n    mockSingleRedirectSuccess();\r\n    mockFollowRedirectSuccess();\r\n\r\n    dataSourceUnderTest.open(testDataSpec);\r\n    verify(mockUrlRequestBuilder, never()).addHeader(eq(\"Cookie\"), any(String.class));\r\n    verify(mockUrlRequest).followRedirect();', 86, 0, NULL, '2019-02-28 13:11:27', '2019-02-28 13:11:27', NULL),
(332, 'testExceptionFromTransferListener', 'mockResponseStartSuccess();\r\n\r\n    // Make mockTransferListener throw an exception in CronetDataSource.close(). Ensure that\r\n    // the subsequent open() call succeeds.\r\n    doThrow(new NullPointerException())\r\n        .when(mockTransferListener)\r\n        .onTransferEnd(dataSourceUnderTest, testDataSpec, /* isNetwork= */ true);\r\n    dataSourceUnderTest.open(testDataSpec);\r\n    try {\r\n      dataSourceUnderTest.close();\r\n      fail(\"NullPointerException expected\");\r\n    } catch (NullPointerException e) {\r\n      // Expected.\r\n    }\r\n    // Open should return successfully.\r\n    dataSourceUnderTest.open(testDataSpec);', 86, 0, NULL, '2019-02-28 13:12:14', '2019-02-28 13:12:14', NULL),
(333, 'testReadFailure', 'mockResponseStartSuccess();\r\n    mockReadFailure();\r\n\r\n    dataSourceUnderTest.open(testDataSpec);\r\n    byte[] returnedBuffer = new byte[8];\r\n    try {\r\n      dataSourceUnderTest.read(returnedBuffer, 0, 8);\r\n      fail(\"dataSourceUnderTest.read() returned, but IOException expected\");\r\n    } catch (IOException e) {\r\n      // Expected.\r\n    }', 86, 0, NULL, '2019-02-28 13:12:42', '2019-02-28 13:12:42', NULL),
(334, 'testReadInterrupted', 'mockResponseStartSuccess();\r\n    dataSourceUnderTest.open(testDataSpec);\r\n\r\n    final ConditionVariable startCondition = buildReadStartedCondition();\r\n    final CountDownLatch timedOutLatch = new CountDownLatch(1);\r\n    byte[] returnedBuffer = new byte[8];\r\n    Thread thread =\r\n        new Thread() {\r\n          @Override\r\n          public void run() {\r\n            try {\r\n              dataSourceUnderTest.read(returnedBuffer, 0, 8);\r\n              fail();\r\n            } catch (HttpDataSourceException e) {\r\n              // Expected.\r\n              assertThat(e.getCause() instanceof CronetDataSource.InterruptedIOException).isTrue();\r\n              timedOutLatch.countDown();\r\n            }\r\n          }\r\n        };\r\n    thread.start();\r\n    startCondition.block();\r\n\r\n    assertNotCountedDown(timedOutLatch);\r\n    // Now we interrupt.\r\n    thread.interrupt();\r\n    timedOutLatch.await();', 86, 2, NULL, '2019-02-28 13:13:09', '2019-02-28 13:13:09', NULL),
(335, 'testAllowDirectExecutor', 'testDataSpec = new DataSpec(Uri.parse(TEST_URL), 1000, 5000, null);\r\n    mockResponseStartSuccess();\r\n\r\n    dataSourceUnderTest.open(testDataSpec);\r\n    verify(mockUrlRequestBuilder).allowDirectExecutor();', 86, 0, NULL, '2019-02-28 13:13:38', '2019-02-28 13:13:38', NULL),
(336, 'testBuilder_overridesPlayerType', 'when(imaSdkSettings.getPlayerType()).thenReturn(\"test player type\");\r\n    setupPlayback(CONTENT_TIMELINE, PREROLL_ADS_DURATIONS_US, PREROLL_CUE_POINTS_SECONDS);\r\n\r\n    verify(imaSdkSettings).setPlayerType(\"google/exo.ext.ima\");', 87, 0, NULL, '2019-02-28 13:36:08', '2019-02-28 13:36:08', NULL),
(337, 'testStart_setsAdUiViewGroup', 'setupPlayback(CONTENT_TIMELINE, PREROLL_ADS_DURATIONS_US, PREROLL_CUE_POINTS_SECONDS);\r\n    imaAdsLoader.start(adsLoaderListener, adViewProvider);\r\n\r\n    verify(adDisplayContainer, atLeastOnce()).setAdContainer(adViewGroup);\r\n    verify(adDisplayContainer, atLeastOnce()).registerVideoControlsOverlay(adOverlayView);', 87, 0, NULL, '2019-02-28 13:36:24', '2019-02-28 13:36:24', NULL),
(338, 'testStart_updatesAdPlaybackState', 'setupPlayback(CONTENT_TIMELINE, PREROLL_ADS_DURATIONS_US, PREROLL_CUE_POINTS_SECONDS);\r\n    imaAdsLoader.start(adsLoaderListener, adViewProvider);\r\n\r\n    assertThat(adsLoaderListener.adPlaybackState)\r\n        .isEqualTo(\r\n            new AdPlaybackState(/* adGroupTimesUs= */ 0)\r\n                .withAdDurationsUs(PREROLL_ADS_DURATIONS_US));', 87, 1, NULL, '2019-02-28 13:36:35', '2019-02-28 13:36:35', NULL),
(339, 'testStartAfterRelease', 'setupPlayback(CONTENT_TIMELINE, PREROLL_ADS_DURATIONS_US, PREROLL_CUE_POINTS_SECONDS);\r\n    imaAdsLoader.release();\r\n    imaAdsLoader.start(adsLoaderListener, adViewProvider);', 87, 0, NULL, '2019-02-28 13:37:11', '2019-02-28 13:37:11', NULL),
(340, 'testStartAndCallbacksAfterRelease', 'setupPlayback(CONTENT_TIMELINE, PREROLL_ADS_DURATIONS_US, PREROLL_CUE_POINTS_SECONDS);\r\n    imaAdsLoader.release();\r\n    imaAdsLoader.start(adsLoaderListener, adViewProvider);\r\n    fakeExoPlayer.setPlayingContentPosition(/* position= */ 0);\r\n    fakeExoPlayer.setState(Player.STATE_READY, true);\r\n\r\n    // If callbacks are invoked there is no crash.\r\n    // Note: we can\'t currently call getContentProgress/getAdProgress as a VerifyError is thrown\r\n    // when using Robolectric and accessing VideoProgressUpdate.VIDEO_TIME_NOT_READY, due to the IMA\r\n    // SDK being proguarded.\r\n    imaAdsLoader.requestAds(adViewGroup);\r\n    imaAdsLoader.onAdEvent(getAdEvent(AdEventType.LOADED, UNSKIPPABLE_AD));\r\n    imaAdsLoader.loadAd(TEST_URI.toString());\r\n    imaAdsLoader.onAdEvent(getAdEvent(AdEventType.CONTENT_PAUSE_REQUESTED, UNSKIPPABLE_AD));\r\n    imaAdsLoader.playAd();\r\n    imaAdsLoader.onAdEvent(getAdEvent(AdEventType.STARTED, UNSKIPPABLE_AD));\r\n    imaAdsLoader.pauseAd();\r\n    imaAdsLoader.stopAd();\r\n    imaAdsLoader.onPlayerError(ExoPlaybackException.createForSource(new IOException()));\r\n    imaAdsLoader.onPositionDiscontinuity(Player.DISCONTINUITY_REASON_SEEK);\r\n    imaAdsLoader.onAdEvent(getAdEvent(AdEventType.CONTENT_RESUME_REQUESTED, /* ad= */ null));\r\n    imaAdsLoader.handlePrepareError(\r\n        /* adGroupIndex= */ 0, /* adIndexInAdGroup= */ 0, new IOException());', 87, 0, NULL, '2019-02-28 13:37:30', '2019-02-28 13:37:30', NULL),
(341, 'testPlayback_withPrerollAd_marksAdAsPlayed', 'setupPlayback(CONTENT_TIMELINE, PREROLL_ADS_DURATIONS_US, PREROLL_CUE_POINTS_SECONDS);\r\n\r\n    // Load the preroll ad.\r\n    imaAdsLoader.start(adsLoaderListener, adViewProvider);\r\n    imaAdsLoader.onAdEvent(getAdEvent(AdEventType.LOADED, UNSKIPPABLE_AD));\r\n    imaAdsLoader.loadAd(TEST_URI.toString());\r\n    imaAdsLoader.onAdEvent(getAdEvent(AdEventType.CONTENT_PAUSE_REQUESTED, UNSKIPPABLE_AD));\r\n\r\n    // Play the preroll ad.\r\n    imaAdsLoader.playAd();\r\n    fakeExoPlayer.setPlayingAdPosition(\r\n        /* adGroupIndex= */ 0,\r\n        /* adIndexInAdGroup= */ 0,\r\n        /* position= */ 0,\r\n        /* contentPosition= */ 0);\r\n    fakeExoPlayer.setState(Player.STATE_READY, true);\r\n    imaAdsLoader.onAdEvent(getAdEvent(AdEventType.STARTED, UNSKIPPABLE_AD));\r\n    imaAdsLoader.onAdEvent(getAdEvent(AdEventType.FIRST_QUARTILE, UNSKIPPABLE_AD));\r\n    imaAdsLoader.onAdEvent(getAdEvent(AdEventType.MIDPOINT, UNSKIPPABLE_AD));\r\n    imaAdsLoader.onAdEvent(getAdEvent(AdEventType.THIRD_QUARTILE, UNSKIPPABLE_AD));\r\n\r\n    // Play the content.\r\n    fakeExoPlayer.setPlayingContentPosition(0);\r\n    imaAdsLoader.stopAd();\r\n    imaAdsLoader.onAdEvent(getAdEvent(AdEventType.CONTENT_RESUME_REQUESTED, /* ad= */ null));\r\n\r\n    // Verify that the preroll ad has been marked as played.\r\n    assertThat(adsLoaderListener.adPlaybackState)\r\n        .isEqualTo(\r\n            new AdPlaybackState(/* adGroupTimesUs= */ 0)\r\n                .withContentDurationUs(CONTENT_DURATION_US)\r\n                .withAdCount(/* adGroupIndex= */ 0, /* adCount= */ 1)\r\n                .withAdUri(/* adGroupIndex= */ 0, /* adIndexInAdGroup= */ 0, /* uri= */ TEST_URI)\r\n                .withAdDurationsUs(PREROLL_ADS_DURATIONS_US)\r\n                .withPlayedAd(/* adGroupIndex= */ 0, /* adIndexInAdGroup= */ 0)\r\n                .withAdResumePositionUs(/* adResumePositionUs= */ 0));', 87, 1, NULL, '2019-02-28 13:42:45', '2019-02-28 13:42:45', NULL),
(342, 'testStop_unregistersAllVideoControlOverlays', 'setupPlayback(CONTENT_TIMELINE, PREROLL_ADS_DURATIONS_US, PREROLL_CUE_POINTS_SECONDS);\r\n    imaAdsLoader.start(adsLoaderListener, adViewProvider);\r\n    imaAdsLoader.requestAds(adViewGroup);\r\n    imaAdsLoader.stop();\r\n\r\n    InOrder inOrder = inOrder(adDisplayContainer);\r\n    inOrder.verify(adDisplayContainer).registerVideoControlsOverlay(adOverlayView);\r\n    inOrder.verify(adDisplayContainer).unregisterAllVideoControlsOverlays();', 87, 0, NULL, '2019-02-28 13:44:00', '2019-02-28 13:44:00', NULL),
(343, 'testBasicPlayback', 'playUri(BEAR_OPUS_URI);', 88, 0, NULL, '2019-02-28 16:43:08', '2019-02-28 16:43:08', NULL),
(344, 'openRtmpDataSpec_instantiatesRtmpDataSourceViaReflection', 'DefaultDataSource dataSource =\r\n        new DefaultDataSource(\r\n            RuntimeEnvironment.application, \"userAgent\", /* allowCrossProtocolRedirects= */ false);\r\n    DataSpec dataSpec = new DataSpec(Uri.parse(\"rtmp://test.com/stream\"));\r\n    try {\r\n      dataSource.open(dataSpec);\r\n    } catch (UnsatisfiedLinkError e) {\r\n      // RtmpDataSource was successfully instantiated (test run using Gradle).\r\n    } catch (UnsupportedOperationException e) {\r\n      // RtmpDataSource was successfully instantiated (test run using Blaze).\r\n    }', 89, 0, NULL, '2019-02-28 16:45:01', '2019-02-28 16:45:01', NULL),
(345, 'testBasicPlayback', 'playUri(BEAR_URI);', 90, 0, NULL, '2019-02-28 16:51:21', '2019-02-28 16:51:21', NULL),
(346, 'testOddDimensionsPlayback', 'playUri(BEAR_ODD_DIMENSIONS_URI);', 90, 0, NULL, '2019-02-28 16:51:34', '2019-02-28 16:51:34', NULL),
(347, 'test10BitProfile2Playback', 'if (VpxLibrary.isHighBitDepthSupported()) {\r\n      Log.d(TAG, \"High Bit Depth supported.\");\r\n      playUri(ROADTRIP_10BIT_URI);\r\n      return;\r\n    }\r\n    Log.d(TAG, \"High Bit Depth not supported.\");', 90, 0, NULL, '2019-02-28 16:52:39', '2019-02-28 16:52:39', NULL),
(348, 'testInvalidBitstream', 'try {\r\n      playUri(INVALID_BITSTREAM_URI);\r\n      fail();\r\n    } catch (Exception e) {\r\n      assertThat(e.getCause()).isNotNull();\r\n      assertThat(e.getCause()).isInstanceOf(VpxDecoderException.class);\r\n    }', 90, 2, NULL, '2019-02-28 16:52:57', '2019-02-28 16:52:57', NULL),
(349, 'testEmptyTimeline', 'FakeMediaSource mediaSource =\r\n        new FakeMediaSource(\r\n            Timeline.EMPTY, /* manifest= */ null, Builder.VIDEO_FORMAT, Builder.AUDIO_FORMAT);\r\n    TestAnalyticsListener listener = runAnalyticsTest(mediaSource);\r\n\r\n    assertThat(listener.getEvents(EVENT_PLAYER_STATE_CHANGED))\r\n        .containsExactly(\r\n            WINDOW_0 /* setPlayWhenReady */, WINDOW_0 /* BUFFERING */, WINDOW_0 /* ENDED */);\r\n    assertThat(listener.getEvents(EVENT_TIMELINE_CHANGED)).containsExactly(WINDOW_0);\r\n    listener.assertNoMoreEvents();', 91, 2, NULL, '2019-02-28 16:56:50', '2019-02-28 16:56:50', NULL),
(350, 'testSinglePeriod', 'FakeMediaSource mediaSource =\r\n        new FakeMediaSource(\r\n            SINGLE_PERIOD_TIMELINE,\r\n            /* manifest= */ null,\r\n            Builder.VIDEO_FORMAT,\r\n            Builder.AUDIO_FORMAT);\r\n    TestAnalyticsListener listener = runAnalyticsTest(mediaSource);\r\n\r\n    populateEventIds(SINGLE_PERIOD_TIMELINE);\r\n    assertThat(listener.getEvents(EVENT_PLAYER_STATE_CHANGED))\r\n        .containsExactly(\r\n            WINDOW_0 /* setPlayWhenReady */,\r\n            WINDOW_0 /* BUFFERING */,\r\n            period0 /* READY */,\r\n            period0 /* ENDED */);\r\n    assertThat(listener.getEvents(EVENT_TIMELINE_CHANGED)).containsExactly(WINDOW_0);\r\n    assertThat(listener.getEvents(EVENT_LOADING_CHANGED))\r\n        .containsExactly(period0 /* started */, period0 /* stopped */);\r\n    assertThat(listener.getEvents(EVENT_TRACKS_CHANGED)).containsExactly(period0);\r\n    assertThat(listener.getEvents(EVENT_LOAD_STARTED))\r\n        .containsExactly(WINDOW_0 /* manifest */, period0 /* media */);\r\n    assertThat(listener.getEvents(EVENT_LOAD_COMPLETED))\r\n        .containsExactly(WINDOW_0 /* manifest */, period0 /* media */);\r\n    assertThat(listener.getEvents(EVENT_DOWNSTREAM_FORMAT_CHANGED))\r\n        .containsExactly(period0 /* audio */, period0 /* video */);\r\n    assertThat(listener.getEvents(EVENT_MEDIA_PERIOD_CREATED)).containsExactly(period0);\r\n    assertThat(listener.getEvents(EVENT_READING_STARTED)).containsExactly(period0);\r\n    assertThat(listener.getEvents(EVENT_DECODER_ENABLED))\r\n        .containsExactly(period0 /* audio */, period0 /* video */);\r\n    assertThat(listener.getEvents(EVENT_DECODER_INIT))\r\n        .containsExactly(period0 /* audio */, period0 /* video */);\r\n    assertThat(listener.getEvents(EVENT_DECODER_FORMAT_CHANGED))\r\n        .containsExactly(period0 /* audio */, period0 /* video */);\r\n    assertThat(listener.getEvents(EVENT_AUDIO_SESSION_ID)).containsExactly(period0);\r\n    assertThat(listener.getEvents(EVENT_DROPPED_VIDEO_FRAMES)).containsExactly(period0);\r\n    assertThat(listener.getEvents(EVENT_VIDEO_SIZE_CHANGED)).containsExactly(period0);\r\n    assertThat(listener.getEvents(EVENT_RENDERED_FIRST_FRAME)).containsExactly(period0);\r\n    listener.assertNoMoreEvents();', 91, 17, NULL, '2019-02-28 16:58:58', '2019-02-28 16:58:58', NULL),
(351, 'testAutomaticPeriodTransition', 'MediaSource mediaSource =\r\n        new ConcatenatingMediaSource(\r\n            new FakeMediaSource(\r\n                SINGLE_PERIOD_TIMELINE,\r\n                /* manifest= */ null,\r\n                Builder.VIDEO_FORMAT,\r\n                Builder.AUDIO_FORMAT),\r\n            new FakeMediaSource(\r\n                SINGLE_PERIOD_TIMELINE,\r\n                /* manifest= */ null,\r\n                Builder.VIDEO_FORMAT,\r\n                Builder.AUDIO_FORMAT));\r\n    TestAnalyticsListener listener = runAnalyticsTest(mediaSource);\r\n\r\n    populateEventIds(listener.lastReportedTimeline);\r\n    assertThat(listener.getEvents(EVENT_PLAYER_STATE_CHANGED))\r\n        .containsExactly(\r\n            WINDOW_0 /* setPlayWhenReady */,\r\n            WINDOW_0 /* BUFFERING */,\r\n            period0 /* READY */,\r\n            period1 /* ENDED */);\r\n    assertThat(listener.getEvents(EVENT_TIMELINE_CHANGED)).containsExactly(WINDOW_0);\r\n    assertThat(listener.getEvents(EVENT_POSITION_DISCONTINUITY)).containsExactly(period1);\r\n    assertThat(listener.getEvents(EVENT_LOADING_CHANGED))\r\n        .containsExactly(period0, period0, period0, period0);\r\n    assertThat(listener.getEvents(EVENT_TRACKS_CHANGED)).containsExactly(period0, period1);\r\n    assertThat(listener.getEvents(EVENT_LOAD_STARTED))\r\n        .containsExactly(\r\n            WINDOW_0 /* manifest */,\r\n            period0 /* media */,\r\n            WINDOW_1 /* manifest */,\r\n            period1 /* media */);\r\n    assertThat(listener.getEvents(EVENT_LOAD_COMPLETED))\r\n        .containsExactly(\r\n            WINDOW_0 /* manifest */,\r\n            period0 /* media */,\r\n            WINDOW_1 /* manifest */,\r\n            period1 /* media */);\r\n    assertThat(listener.getEvents(EVENT_DOWNSTREAM_FORMAT_CHANGED))\r\n        .containsExactly(\r\n            period0 /* audio */, period0 /* video */, period1 /* audio */, period1 /* video */);\r\n    assertThat(listener.getEvents(EVENT_MEDIA_PERIOD_CREATED)).containsExactly(period0, period1);\r\n    assertThat(listener.getEvents(EVENT_MEDIA_PERIOD_RELEASED)).containsExactly(period0);\r\n    assertThat(listener.getEvents(EVENT_READING_STARTED)).containsExactly(period0, period1);\r\n    assertThat(listener.getEvents(EVENT_DECODER_ENABLED))\r\n        .containsExactly(period0 /* audio */, period0 /* video */);\r\n    assertThat(listener.getEvents(EVENT_DECODER_INIT))\r\n        .containsExactly(\r\n            period0 /* audio */, period0 /* video */, period1 /* audio */, period1 /* video */);\r\n    assertThat(listener.getEvents(EVENT_DECODER_FORMAT_CHANGED))\r\n        .containsExactly(\r\n            period0 /* audio */, period0 /* video */, period1 /* audio */, period1 /* video */);\r\n    assertThat(listener.getEvents(EVENT_AUDIO_SESSION_ID)).containsExactly(period0);\r\n    assertThat(listener.getEvents(EVENT_DROPPED_VIDEO_FRAMES)).containsExactly(period1);\r\n    assertThat(listener.getEvents(EVENT_VIDEO_SIZE_CHANGED)).containsExactly(period0);\r\n    assertThat(listener.getEvents(EVENT_RENDERED_FIRST_FRAME)).containsExactly(period0);\r\n    listener.assertNoMoreEvents();', 91, 19, NULL, '2019-02-28 16:59:19', '2019-02-28 16:59:19', NULL),
(352, 'testPeriodTransitionWithRendererChange', 'MediaSource mediaSource =\r\n        new ConcatenatingMediaSource(\r\n            new FakeMediaSource(SINGLE_PERIOD_TIMELINE, /* manifest= */ null, Builder.VIDEO_FORMAT),\r\n            new FakeMediaSource(\r\n                SINGLE_PERIOD_TIMELINE, /* manifest= */ null, Builder.AUDIO_FORMAT));\r\n    TestAnalyticsListener listener = runAnalyticsTest(mediaSource);\r\n\r\n    populateEventIds(listener.lastReportedTimeline);\r\n    assertThat(listener.getEvents(EVENT_PLAYER_STATE_CHANGED))\r\n        .containsExactly(\r\n            WINDOW_0 /* setPlayWhenReady */,\r\n            WINDOW_0 /* BUFFERING */,\r\n            period0 /* READY */,\r\n            period1 /* BUFFERING */,\r\n            period1 /* READY */,\r\n            period1 /* ENDED */);\r\n    assertThat(listener.getEvents(EVENT_TIMELINE_CHANGED)).containsExactly(WINDOW_0);\r\n    assertThat(listener.getEvents(EVENT_POSITION_DISCONTINUITY)).containsExactly(period1);\r\n    assertThat(listener.getEvents(EVENT_LOADING_CHANGED))\r\n        .containsExactly(period0, period0, period0, period0);\r\n    assertThat(listener.getEvents(EVENT_TRACKS_CHANGED)).containsExactly(period0, period1);\r\n    assertThat(listener.getEvents(EVENT_LOAD_STARTED))\r\n        .containsExactly(\r\n            WINDOW_0 /* manifest */,\r\n            period0 /* media */,\r\n            WINDOW_1 /* manifest */,\r\n            period1 /* media */);\r\n    assertThat(listener.getEvents(EVENT_LOAD_COMPLETED))\r\n        .containsExactly(\r\n            WINDOW_0 /* manifest */,\r\n            period0 /* media */,\r\n            WINDOW_1 /* manifest */,\r\n            period1 /* media */);\r\n    assertThat(listener.getEvents(EVENT_DOWNSTREAM_FORMAT_CHANGED))\r\n        .containsExactly(period0 /* video */, period1 /* audio */);\r\n    assertThat(listener.getEvents(EVENT_MEDIA_PERIOD_CREATED)).containsExactly(period0, period1);\r\n    assertThat(listener.getEvents(EVENT_MEDIA_PERIOD_RELEASED)).containsExactly(period0);\r\n    assertThat(listener.getEvents(EVENT_READING_STARTED)).containsExactly(period0, period1);\r\n    assertThat(listener.getEvents(EVENT_DECODER_ENABLED))\r\n        .containsExactly(period0 /* video */, period1 /* audio */);\r\n    assertThat(listener.getEvents(EVENT_DECODER_INIT))\r\n        .containsExactly(period0 /* video */, period1 /* audio */);\r\n    assertThat(listener.getEvents(EVENT_DECODER_FORMAT_CHANGED))\r\n        .containsExactly(period0 /* video */, period1 /* audio */);\r\n    assertThat(listener.getEvents(EVENT_DECODER_DISABLED)).containsExactly(period0);\r\n    assertThat(listener.getEvents(EVENT_AUDIO_SESSION_ID)).containsExactly(period1);\r\n    assertThat(listener.getEvents(EVENT_DROPPED_VIDEO_FRAMES)).containsExactly(period0);\r\n    assertThat(listener.getEvents(EVENT_VIDEO_SIZE_CHANGED)).containsExactly(period0);\r\n    assertThat(listener.getEvents(EVENT_RENDERED_FIRST_FRAME)).containsExactly(period0);\r\n    listener.assertNoMoreEvents();', 91, 20, NULL, '2019-02-28 16:59:48', '2019-02-28 16:59:48', NULL),
(353, 'testSeekToOtherPeriod', 'MediaSource mediaSource =\r\n        new ConcatenatingMediaSource(\r\n            new FakeMediaSource(SINGLE_PERIOD_TIMELINE, /* manifest= */ null, Builder.VIDEO_FORMAT),\r\n            new FakeMediaSource(\r\n                SINGLE_PERIOD_TIMELINE, /* manifest= */ null, Builder.AUDIO_FORMAT));\r\n    ActionSchedule actionSchedule =\r\n        new ActionSchedule.Builder(\"AnalyticsCollectorTest\")\r\n            .pause()\r\n            .waitForPlaybackState(Player.STATE_READY)\r\n            .seek(/* windowIndex= */ 1, /* positionMs= */ 0)\r\n            .play()\r\n            .build();\r\n    TestAnalyticsListener listener = runAnalyticsTest(mediaSource, actionSchedule);\r\n\r\n    populateEventIds(listener.lastReportedTimeline);\r\n    assertThat(listener.getEvents(EVENT_PLAYER_STATE_CHANGED))\r\n        .containsExactly(\r\n            WINDOW_0 /* setPlayWhenReady=true */,\r\n            WINDOW_0 /* BUFFERING */,\r\n            WINDOW_0 /* setPlayWhenReady=false */,\r\n            period0 /* READY */,\r\n            period1 /* BUFFERING */,\r\n            period1 /* READY */,\r\n            period1 /* setPlayWhenReady=true */,\r\n            period1 /* ENDED */);\r\n    assertThat(listener.getEvents(EVENT_TIMELINE_CHANGED)).containsExactly(WINDOW_0);\r\n    assertThat(listener.getEvents(EVENT_POSITION_DISCONTINUITY)).containsExactly(period1);\r\n    assertThat(listener.getEvents(EVENT_SEEK_STARTED)).containsExactly(period0);\r\n    assertThat(listener.getEvents(EVENT_SEEK_PROCESSED)).containsExactly(period1);\r\n    List<EventWindowAndPeriodId> loadingEvents = listener.getEvents(EVENT_LOADING_CHANGED);\r\n    assertThat(loadingEvents).hasSize(4);\r\n    assertThat(loadingEvents).containsAllOf(period0, period0);\r\n    assertThat(listener.getEvents(EVENT_TRACKS_CHANGED)).containsExactly(period0, period1);\r\n    assertThat(listener.getEvents(EVENT_LOAD_STARTED))\r\n        .containsExactly(\r\n            WINDOW_0 /* manifest */,\r\n            period0 /* media */,\r\n            WINDOW_1 /* manifest */,\r\n            period1 /* media */);\r\n    assertThat(listener.getEvents(EVENT_LOAD_COMPLETED))\r\n        .containsExactly(\r\n            WINDOW_0 /* manifest */,\r\n            period0 /* media */,\r\n            WINDOW_1 /* manifest */,\r\n            period1 /* media */);\r\n    assertThat(listener.getEvents(EVENT_DOWNSTREAM_FORMAT_CHANGED))\r\n        .containsExactly(period0 /* video */, period1 /* audio */);\r\n    assertThat(listener.getEvents(EVENT_MEDIA_PERIOD_CREATED)).containsExactly(period0, period1);\r\n    assertThat(listener.getEvents(EVENT_MEDIA_PERIOD_RELEASED)).containsExactly(period0);\r\n    assertThat(listener.getEvents(EVENT_READING_STARTED)).containsExactly(period0, period1);\r\n    assertThat(listener.getEvents(EVENT_DECODER_ENABLED))\r\n        .containsExactly(period0 /* video */, period1 /* audio */);\r\n    assertThat(listener.getEvents(EVENT_DECODER_INIT))\r\n        .containsExactly(period0 /* video */, period1 /* audio */);\r\n    assertThat(listener.getEvents(EVENT_DECODER_FORMAT_CHANGED))\r\n        .containsExactly(period0 /* video */, period1 /* audio */);\r\n    assertThat(listener.getEvents(EVENT_DECODER_DISABLED)).containsExactly(period0);\r\n    assertThat(listener.getEvents(EVENT_AUDIO_SESSION_ID)).containsExactly(period1);\r\n    assertThat(listener.getEvents(EVENT_VIDEO_SIZE_CHANGED)).containsExactly(period0);\r\n    assertThat(listener.getEvents(EVENT_RENDERED_FIRST_FRAME)).containsExactly(period0);\r\n    listener.assertNoMoreEvents();', 91, 22, NULL, '2019-02-28 17:00:10', '2019-02-28 17:00:10', NULL),
(354, 'testSeekBackAfterReadingAhead', 'MediaSource mediaSource =\r\n        new ConcatenatingMediaSource(\r\n            new FakeMediaSource(SINGLE_PERIOD_TIMELINE, /* manifest= */ null, Builder.VIDEO_FORMAT),\r\n            new FakeMediaSource(\r\n                SINGLE_PERIOD_TIMELINE,\r\n                /* manifest= */ null,\r\n                Builder.VIDEO_FORMAT,\r\n                Builder.AUDIO_FORMAT));\r\n    long periodDurationMs =\r\n        SINGLE_PERIOD_TIMELINE.getWindow(/* windowIndex= */ 0, new Window()).getDurationMs();\r\n    ActionSchedule actionSchedule =\r\n        new ActionSchedule.Builder(\"AnalyticsCollectorTest\")\r\n            .pause()\r\n            .waitForPlaybackState(Player.STATE_READY)\r\n            .playUntilPosition(/* windowIndex= */ 0, periodDurationMs)\r\n            .seek(/* positionMs= */ 0)\r\n            .waitForPlaybackState(Player.STATE_READY)\r\n            .play()\r\n            .build();\r\n    TestAnalyticsListener listener = runAnalyticsTest(mediaSource, actionSchedule);\r\n\r\n    populateEventIds(listener.lastReportedTimeline);\r\n    assertThat(listener.getEvents(EVENT_PLAYER_STATE_CHANGED))\r\n        .containsExactly(\r\n            WINDOW_0 /* setPlayWhenReady=true */,\r\n            WINDOW_0 /* BUFFERING */,\r\n            WINDOW_0 /* setPlayWhenReady=false */,\r\n            period0 /* READY */,\r\n            period0 /* setPlayWhenReady=true */,\r\n            period0 /* setPlayWhenReady=false */,\r\n            period0 /* BUFFERING */,\r\n            period0 /* READY */,\r\n            period0 /* setPlayWhenReady=true */,\r\n            period1Seq2 /* BUFFERING */,\r\n            period1Seq2 /* READY */,\r\n            period1Seq2 /* ENDED */);\r\n    assertThat(listener.getEvents(EVENT_TIMELINE_CHANGED)).containsExactly(WINDOW_0);\r\n    assertThat(listener.getEvents(EVENT_POSITION_DISCONTINUITY))\r\n        .containsExactly(period0, period1Seq2);\r\n    assertThat(listener.getEvents(EVENT_SEEK_STARTED)).containsExactly(period0);\r\n    assertThat(listener.getEvents(EVENT_SEEK_PROCESSED)).containsExactly(period0);\r\n    assertThat(listener.getEvents(EVENT_LOADING_CHANGED))\r\n        .containsExactly(period0, period0, period0, period0, period0, period0);\r\n    assertThat(listener.getEvents(EVENT_TRACKS_CHANGED)).containsExactly(period0, period1Seq2);\r\n    assertThat(listener.getEvents(EVENT_LOAD_STARTED))\r\n        .containsExactly(\r\n            WINDOW_0 /* manifest */,\r\n            period0 /* media */,\r\n            WINDOW_1 /* manifest */,\r\n            period1Seq1 /* media */,\r\n            period1Seq2 /* media */);\r\n    assertThat(listener.getEvents(EVENT_LOAD_COMPLETED))\r\n        .containsExactly(\r\n            WINDOW_0 /* manifest */,\r\n            period0 /* media */,\r\n            WINDOW_1 /* manifest */,\r\n            period1Seq1 /* media */,\r\n            period1Seq2 /* media */);\r\n    assertThat(listener.getEvents(EVENT_DOWNSTREAM_FORMAT_CHANGED))\r\n        .containsExactly(period0, period1Seq1, period1Seq2, period1Seq2);\r\n    assertThat(listener.getEvents(EVENT_MEDIA_PERIOD_CREATED))\r\n        .containsExactly(period0, period1Seq1, period1Seq2);\r\n    assertThat(listener.getEvents(EVENT_MEDIA_PERIOD_RELEASED))\r\n        .containsExactly(period0, period1Seq1);\r\n    assertThat(listener.getEvents(EVENT_READING_STARTED))\r\n        .containsExactly(period0, period1Seq1, period1Seq2);\r\n    assertThat(listener.getEvents(EVENT_DECODER_ENABLED))\r\n        .containsExactly(period0, period0, period1Seq2);\r\n    assertThat(listener.getEvents(EVENT_DECODER_INIT))\r\n        .containsExactly(period0, period1Seq1, period1Seq2, period1Seq2);\r\n    assertThat(listener.getEvents(EVENT_DECODER_FORMAT_CHANGED))\r\n        .containsExactly(period0, period1Seq1, period1Seq2, period1Seq2);\r\n    assertThat(listener.getEvents(EVENT_DECODER_DISABLED)).containsExactly(period0);\r\n    assertThat(listener.getEvents(EVENT_AUDIO_SESSION_ID)).containsExactly(period1Seq2);\r\n    assertThat(listener.getEvents(EVENT_DROPPED_VIDEO_FRAMES))\r\n        .containsExactly(period0, period0, period1Seq2);\r\n    assertThat(listener.getEvents(EVENT_VIDEO_SIZE_CHANGED)).containsExactly(period0, period1Seq2);\r\n    assertThat(listener.getEvents(EVENT_RENDERED_FIRST_FRAME))\r\n        .containsExactly(period0, period1Seq2);\r\n    listener.assertNoMoreEvents();', 91, 22, NULL, '2019-02-28 17:00:44', '2019-02-28 17:00:44', NULL),
(355, 'testPrepareNewSource', 'MediaSource mediaSource1 =\r\n        new FakeMediaSource(SINGLE_PERIOD_TIMELINE, /* manifest= */ null, Builder.VIDEO_FORMAT);\r\n    MediaSource mediaSource2 =\r\n        new FakeMediaSource(SINGLE_PERIOD_TIMELINE, /* manifest= */ null, Builder.VIDEO_FORMAT);\r\n    ActionSchedule actionSchedule =\r\n        new ActionSchedule.Builder(\"AnalyticsCollectorTest\")\r\n            .pause()\r\n            .waitForPlaybackState(Player.STATE_READY)\r\n            .prepareSource(mediaSource2)\r\n            .play()\r\n            .build();\r\n    TestAnalyticsListener listener = runAnalyticsTest(mediaSource1, actionSchedule);\r\n\r\n    populateEventIds(SINGLE_PERIOD_TIMELINE);\r\n    assertThat(listener.getEvents(EVENT_PLAYER_STATE_CHANGED))\r\n        .containsExactly(\r\n            WINDOW_0 /* setPlayWhenReady=true */,\r\n            WINDOW_0 /* BUFFERING */,\r\n            WINDOW_0 /* setPlayWhenReady=false */,\r\n            period0Seq0 /* READY */,\r\n            WINDOW_0 /* BUFFERING */,\r\n            WINDOW_0 /* setPlayWhenReady=true */,\r\n            period0Seq1 /* READY */,\r\n            period0Seq1 /* ENDED */);\r\n    assertThat(listener.getEvents(EVENT_TIMELINE_CHANGED))\r\n        .containsExactly(WINDOW_0 /* prepared */, WINDOW_0 /* reset */, WINDOW_0 /* prepared */);\r\n    assertThat(listener.getEvents(EVENT_LOADING_CHANGED))\r\n        .containsExactly(period0Seq0, period0Seq0, period0Seq1, period0Seq1);\r\n    assertThat(listener.getEvents(EVENT_TRACKS_CHANGED))\r\n        .containsExactly(\r\n            period0Seq0 /* prepared */, WINDOW_0 /* reset */, period0Seq1 /* prepared */);\r\n    assertThat(listener.getEvents(EVENT_LOAD_STARTED))\r\n        .containsExactly(\r\n            WINDOW_0 /* manifest */,\r\n            period0Seq0 /* media */,\r\n            WINDOW_0 /* manifest */,\r\n            period0Seq1 /* media */);\r\n    assertThat(listener.getEvents(EVENT_LOAD_COMPLETED))\r\n        .containsExactly(\r\n            WINDOW_0 /* manifest */,\r\n            period0Seq0 /* media */,\r\n            WINDOW_0 /* manifest */,\r\n            period0Seq1 /* media */);\r\n    assertThat(listener.getEvents(EVENT_DOWNSTREAM_FORMAT_CHANGED))\r\n        .containsExactly(period0Seq0, period0Seq1);\r\n    assertThat(listener.getEvents(EVENT_MEDIA_PERIOD_CREATED))\r\n        .containsExactly(period0Seq0, period0Seq1);\r\n    assertThat(listener.getEvents(EVENT_MEDIA_PERIOD_RELEASED)).containsExactly(period0Seq0);\r\n    assertThat(listener.getEvents(EVENT_READING_STARTED)).containsExactly(period0Seq0, period0Seq1);\r\n    assertThat(listener.getEvents(EVENT_DECODER_ENABLED)).containsExactly(period0Seq0, period0Seq1);\r\n    assertThat(listener.getEvents(EVENT_DECODER_INIT)).containsExactly(period0Seq0, period0Seq1);\r\n    assertThat(listener.getEvents(EVENT_DECODER_FORMAT_CHANGED))\r\n        .containsExactly(period0Seq0, period0Seq1);\r\n    assertThat(listener.getEvents(EVENT_DECODER_DISABLED)).containsExactly(period0Seq0);\r\n    assertThat(listener.getEvents(EVENT_DROPPED_VIDEO_FRAMES)).containsExactly(period0Seq1);\r\n    assertThat(listener.getEvents(EVENT_VIDEO_SIZE_CHANGED))\r\n        .containsExactly(period0Seq0, period0Seq1);\r\n    assertThat(listener.getEvents(EVENT_RENDERED_FIRST_FRAME))\r\n        .containsExactly(period0Seq0, period0Seq1);\r\n    listener.assertNoMoreEvents();', 91, 18, NULL, '2019-02-28 17:01:03', '2019-02-28 17:01:03', NULL),
(356, 'testReprepareAfterError', 'MediaSource mediaSource =\r\n        new FakeMediaSource(SINGLE_PERIOD_TIMELINE, /* manifest= */ null, Builder.VIDEO_FORMAT);\r\n    ActionSchedule actionSchedule =\r\n        new ActionSchedule.Builder(\"AnalyticsCollectorTest\")\r\n            .waitForPlaybackState(Player.STATE_READY)\r\n            .throwPlaybackException(ExoPlaybackException.createForSource(new IOException()))\r\n            .waitForPlaybackState(Player.STATE_IDLE)\r\n            .prepareSource(mediaSource, /* resetPosition= */ false, /* resetState= */ false)\r\n            .waitForPlaybackState(Player.STATE_ENDED)\r\n            .build();\r\n    TestAnalyticsListener listener = runAnalyticsTest(mediaSource, actionSchedule);\r\n\r\n    populateEventIds(SINGLE_PERIOD_TIMELINE);\r\n    assertThat(listener.getEvents(EVENT_PLAYER_STATE_CHANGED))\r\n        .containsExactly(\r\n            WINDOW_0 /* setPlayWhenReady=true */,\r\n            WINDOW_0 /* BUFFERING */,\r\n            period0Seq0 /* READY */,\r\n            WINDOW_0 /* IDLE */,\r\n            WINDOW_0 /* BUFFERING */,\r\n            period0Seq0 /* READY */,\r\n            period0Seq0 /* ENDED */);\r\n    assertThat(listener.getEvents(EVENT_TIMELINE_CHANGED))\r\n        .containsExactly(WINDOW_0 /* prepared */, WINDOW_0 /* prepared */);\r\n    assertThat(listener.getEvents(EVENT_LOADING_CHANGED))\r\n        .containsExactly(period0Seq0, period0Seq0, period0Seq0, period0Seq0);\r\n    assertThat(listener.getEvents(EVENT_PLAYER_ERROR)).containsExactly(WINDOW_0);\r\n    assertThat(listener.getEvents(EVENT_TRACKS_CHANGED)).containsExactly(period0Seq0, period0Seq0);\r\n    assertThat(listener.getEvents(EVENT_LOAD_STARTED))\r\n        .containsExactly(\r\n            WINDOW_0 /* manifest */,\r\n            period0Seq0 /* media */,\r\n            WINDOW_0 /* manifest */,\r\n            period0Seq0 /* media */);\r\n    assertThat(listener.getEvents(EVENT_LOAD_COMPLETED))\r\n        .containsExactly(\r\n            WINDOW_0 /* manifest */,\r\n            period0Seq0 /* media */,\r\n            WINDOW_0 /* manifest */,\r\n            period0Seq0 /* media */);\r\n    assertThat(listener.getEvents(EVENT_DOWNSTREAM_FORMAT_CHANGED))\r\n        .containsExactly(period0Seq0, period0Seq0);\r\n    assertThat(listener.getEvents(EVENT_MEDIA_PERIOD_CREATED))\r\n        .containsExactly(period0Seq0, period0Seq0);\r\n    assertThat(listener.getEvents(EVENT_MEDIA_PERIOD_RELEASED)).containsExactly(period0Seq0);\r\n    assertThat(listener.getEvents(EVENT_READING_STARTED)).containsExactly(period0Seq0, period0Seq0);\r\n    assertThat(listener.getEvents(EVENT_DECODER_ENABLED)).containsExactly(period0Seq0, period0Seq0);\r\n    assertThat(listener.getEvents(EVENT_DECODER_INIT)).containsExactly(period0Seq0, period0Seq0);\r\n    assertThat(listener.getEvents(EVENT_DECODER_FORMAT_CHANGED))\r\n        .containsExactly(period0Seq0, period0Seq0);\r\n    assertThat(listener.getEvents(EVENT_DECODER_DISABLED)).containsExactly(period0Seq0);\r\n    assertThat(listener.getEvents(EVENT_DROPPED_VIDEO_FRAMES))\r\n        .containsExactly(period0Seq0, period0Seq0);\r\n    assertThat(listener.getEvents(EVENT_VIDEO_SIZE_CHANGED))\r\n        .containsExactly(period0Seq0, period0Seq0);\r\n    assertThat(listener.getEvents(EVENT_RENDERED_FIRST_FRAME))\r\n        .containsExactly(period0Seq0, period0Seq0);\r\n    listener.assertNoMoreEvents();', 91, 19, NULL, '2019-02-28 17:01:27', '2019-02-28 17:01:27', NULL),
(357, 'testDynamicTimelineChange', 'MediaSource childMediaSource =\r\n        new FakeMediaSource(SINGLE_PERIOD_TIMELINE, /* manifest= */ null, Builder.VIDEO_FORMAT);\r\n    final ConcatenatingMediaSource concatenatedMediaSource =\r\n        new ConcatenatingMediaSource(childMediaSource, childMediaSource);\r\n    long periodDurationMs =\r\n        SINGLE_PERIOD_TIMELINE.getWindow(/* windowIndex= */ 0, new Window()).getDurationMs();\r\n    ActionSchedule actionSchedule =\r\n        new ActionSchedule.Builder(\"AnalyticsCollectorTest\")\r\n            .pause()\r\n            .waitForPlaybackState(Player.STATE_READY)\r\n            // Ensure second period is already being read from.\r\n            .playUntilPosition(/* windowIndex= */ 0, /* positionMs= */ periodDurationMs)\r\n            .executeRunnable(\r\n                () ->\r\n                    concatenatedMediaSource.moveMediaSource(\r\n                        /* currentIndex= */ 0, /* newIndex= */ 1))\r\n            .waitForTimelineChanged()\r\n            .play()\r\n            .build();\r\n    TestAnalyticsListener listener = runAnalyticsTest(concatenatedMediaSource, actionSchedule);\r\n\r\n    populateEventIds(listener.lastReportedTimeline);\r\n    assertThat(listener.getEvents(EVENT_PLAYER_STATE_CHANGED))\r\n        .containsExactly(\r\n            WINDOW_0 /* setPlayWhenReady=true */,\r\n            WINDOW_0 /* BUFFERING */,\r\n            WINDOW_0 /* setPlayWhenReady=false */,\r\n            window0Period1Seq0 /* READY */,\r\n            window0Period1Seq0 /* setPlayWhenReady=true */,\r\n            window0Period1Seq0 /* setPlayWhenReady=false */,\r\n            period1Seq0 /* setPlayWhenReady=true */,\r\n            period1Seq0 /* BUFFERING */,\r\n            period1Seq0 /* ENDED */);\r\n    assertThat(listener.getEvents(EVENT_TIMELINE_CHANGED)).containsExactly(WINDOW_0, period1Seq0);\r\n    assertThat(listener.getEvents(EVENT_LOADING_CHANGED))\r\n        .containsExactly(\r\n            window0Period1Seq0, window0Period1Seq0, window0Period1Seq0, window0Period1Seq0);\r\n    assertThat(listener.getEvents(EVENT_TRACKS_CHANGED)).containsExactly(window0Period1Seq0);\r\n    assertThat(listener.getEvents(EVENT_LOAD_STARTED))\r\n        .containsExactly(\r\n            WINDOW_0 /* manifest */,\r\n            window0Period1Seq0 /* media */,\r\n            window1Period0Seq1 /* media */);\r\n    assertThat(listener.getEvents(EVENT_LOAD_COMPLETED))\r\n        .containsExactly(\r\n            WINDOW_0 /* manifest */,\r\n            window0Period1Seq0 /* media */,\r\n            window1Period0Seq1 /* media */);\r\n    assertThat(listener.getEvents(EVENT_DOWNSTREAM_FORMAT_CHANGED))\r\n        .containsExactly(window0Period1Seq0, window1Period0Seq1);\r\n    assertThat(listener.getEvents(EVENT_MEDIA_PERIOD_CREATED))\r\n        .containsExactly(window0Period1Seq0, window1Period0Seq1);\r\n    assertThat(listener.getEvents(EVENT_MEDIA_PERIOD_RELEASED)).containsExactly(window1Period0Seq1);\r\n    assertThat(listener.getEvents(EVENT_READING_STARTED))\r\n        .containsExactly(window0Period1Seq0, window1Period0Seq1);\r\n    assertThat(listener.getEvents(EVENT_DECODER_ENABLED))\r\n        .containsExactly(window0Period1Seq0, window0Period1Seq0);\r\n    assertThat(listener.getEvents(EVENT_DECODER_INIT))\r\n        .containsExactly(window0Period1Seq0, window1Period0Seq1);\r\n    assertThat(listener.getEvents(EVENT_DECODER_FORMAT_CHANGED))\r\n        .containsExactly(window0Period1Seq0, window1Period0Seq1);\r\n    assertThat(listener.getEvents(EVENT_DECODER_DISABLED)).containsExactly(window0Period1Seq0);\r\n    assertThat(listener.getEvents(EVENT_DROPPED_VIDEO_FRAMES)).containsExactly(window0Period1Seq0);\r\n    assertThat(listener.getEvents(EVENT_VIDEO_SIZE_CHANGED)).containsExactly(window0Period1Seq0);\r\n    assertThat(listener.getEvents(EVENT_RENDERED_FIRST_FRAME)).containsExactly(window0Period1Seq0);\r\n    listener.assertNoMoreEvents();', 91, 18, NULL, '2019-02-28 17:01:48', '2019-02-28 17:01:48', NULL),
(358, 'testNotifyExternalEvents', 'MediaSource mediaSource = new FakeMediaSource(SINGLE_PERIOD_TIMELINE, /* manifest= */ null);\r\n    ActionSchedule actionSchedule =\r\n        new ActionSchedule.Builder(\"AnalyticsCollectorTest\")\r\n            .pause()\r\n            .waitForPlaybackState(Player.STATE_READY)\r\n            .executeRunnable(\r\n                new PlayerRunnable() {\r\n                  @Override\r\n                  public void run(SimpleExoPlayer player) {\r\n                    player.getAnalyticsCollector().notifySeekStarted();\r\n                  }\r\n                })\r\n            .seek(/* positionMs= */ 0)\r\n            .play()\r\n            .build();\r\n    TestAnalyticsListener listener = runAnalyticsTest(mediaSource, actionSchedule);\r\n\r\n    populateEventIds(SINGLE_PERIOD_TIMELINE);\r\n    assertThat(listener.getEvents(EVENT_SEEK_STARTED)).containsExactly(period0);\r\n    assertThat(listener.getEvents(EVENT_SEEK_PROCESSED)).containsExactly(period0);', 91, 2, NULL, '2019-02-28 17:02:08', '2019-02-28 17:02:08', NULL),
(359, 'testParseTrueHdSyncframeAudioSampleCount_nonSyncframe', 'assertThat(Ac3Util.parseTrueHdSyncframeAudioSampleCount(TRUEHD_NON_SYNCFRAME_HEADER))\r\n        .isEqualTo(0);', 92, 1, NULL, '2019-02-28 17:03:23', '2019-02-28 17:03:23', NULL),
(360, 'testParseTrueHdSyncframeAudioSampleCount_syncframe', 'assertThat(Ac3Util.parseTrueHdSyncframeAudioSampleCount(TRUEHD_SYNCFRAME_HEADER))\r\n        .isEqualTo(TRUEHD_SYNCFRAME_SAMPLE_COUNT);', 92, 1, NULL, '2019-02-28 17:03:34', '2019-02-28 17:03:34', NULL);
INSERT INTO `test_codes` (`id`, `method_name`, `method_body`, `test_code_class_id`, `assert_count`, `deleted_at`, `created_at`, `updated_at`, `source_codes`) VALUES
(361, 'setAudioAttributes_withNullUsage_doesNotManageAudioFocus', '// Ensure that NULL audio attributes -> don\'t manage audio focus\r\n    assertThat(\r\n            audioFocusManager.setAudioAttributes(\r\n                /* audioAttributes= */ null, /* playWhenReady= */ false, Player.STATE_IDLE))\r\n        .isEqualTo(PLAYER_COMMAND_DO_NOT_PLAY);\r\n    assertThat(\r\n            audioFocusManager.setAudioAttributes(\r\n                /* audioAttributes= */ null, /* playWhenReady= */ true, Player.STATE_READY))\r\n        .isEqualTo(PLAYER_COMMAND_PLAY_WHEN_READY);\r\n    ShadowAudioManager.AudioFocusRequest request =\r\n        Shadows.shadowOf(audioManager).getLastAudioFocusRequest();\r\n    assertThat(request).isNull();', 93, 3, NULL, '2019-02-28 17:04:46', '2019-02-28 17:04:46', NULL),
(362, 'setAudioAttributes_withNullUsage_releasesAudioFocus', '// Create attributes and request audio focus.\r\n    AudioAttributes media = new AudioAttributes.Builder().setUsage(C.USAGE_MEDIA).build();\r\n    Shadows.shadowOf(audioManager)\r\n        .setNextFocusRequestResponse(AudioManager.AUDIOFOCUS_REQUEST_GRANTED);\r\n    assertThat(\r\n            audioFocusManager.setAudioAttributes(\r\n                media, /* playWhenReady= */ true, Player.STATE_READY))\r\n        .isEqualTo(PLAYER_COMMAND_PLAY_WHEN_READY);\r\n    ShadowAudioManager.AudioFocusRequest request =\r\n        Shadows.shadowOf(audioManager).getLastAudioFocusRequest();\r\n    assertThat(request.durationHint).isEqualTo(AudioManager.AUDIOFOCUS_GAIN);\r\n\r\n    // Ensure that setting null audio attributes with audio focus releases audio focus.\r\n    assertThat(\r\n            audioFocusManager.setAudioAttributes(\r\n                /* audioAttributes= */ null, /* playWhenReady= */ true, Player.STATE_READY))\r\n        .isEqualTo(PLAYER_COMMAND_PLAY_WHEN_READY);\r\n    AudioManager.OnAudioFocusChangeListener lastRequest =\r\n        Shadows.shadowOf(audioManager).getLastAbandonedAudioFocusListener();\r\n    assertThat(lastRequest).isNotNull();', 93, 4, NULL, '2019-02-28 17:05:07', '2019-02-28 17:05:07', NULL),
(363, 'setAudioAttributes_withUsageAlarm_throwsIllegalArgumentException', '// Ensure that audio attributes that map to AUDIOFOCUS_GAIN_TRANSIENT* throw\r\n    AudioAttributes alarm = new AudioAttributes.Builder().setUsage(C.USAGE_ALARM).build();\r\n    try {\r\n      audioFocusManager.setAudioAttributes(alarm, /* playWhenReady= */ false, Player.STATE_IDLE);\r\n      fail();\r\n    } catch (IllegalArgumentException e) {\r\n      // Expected\r\n    }', 93, 0, NULL, '2019-02-28 17:09:40', '2019-02-28 17:09:40', NULL),
(364, 'setAudioAttributes_withUsageMedia_usesAudioFocusGain', '// Ensure setting media type audio attributes requests AUDIOFOCUS_GAIN.\r\n    AudioAttributes media = new AudioAttributes.Builder().setUsage(C.USAGE_MEDIA).build();\r\n    Shadows.shadowOf(audioManager)\r\n        .setNextFocusRequestResponse(AudioManager.AUDIOFOCUS_REQUEST_GRANTED);\r\n\r\n    assertThat(\r\n            audioFocusManager.setAudioAttributes(\r\n                media, /* playWhenReady= */ true, Player.STATE_READY))\r\n        .isEqualTo(PLAYER_COMMAND_PLAY_WHEN_READY);\r\n    ShadowAudioManager.AudioFocusRequest request =\r\n        Shadows.shadowOf(audioManager).getLastAudioFocusRequest();\r\n    assertThat(request.durationHint).isEqualTo(AudioManager.AUDIOFOCUS_GAIN);', 93, 2, NULL, '2019-02-28 17:09:56', '2019-02-28 17:09:56', NULL),
(365, 'setAudioAttributes_inStateEnded_requestsAudioFocus', '// Ensure setting audio attributes when player is in STATE_ENDED requests audio focus.\r\n    AudioAttributes media = new AudioAttributes.Builder().setUsage(C.USAGE_MEDIA).build();\r\n    Shadows.shadowOf(audioManager)\r\n        .setNextFocusRequestResponse(AudioManager.AUDIOFOCUS_REQUEST_GRANTED);\r\n\r\n    assertThat(\r\n            audioFocusManager.setAudioAttributes(\r\n                media, /* playWhenReady= */ true, Player.STATE_ENDED))\r\n        .isEqualTo(PLAYER_COMMAND_PLAY_WHEN_READY);\r\n    ShadowAudioManager.AudioFocusRequest request =\r\n        Shadows.shadowOf(audioManager).getLastAudioFocusRequest();\r\n    assertThat(request.durationHint).isEqualTo(AudioManager.AUDIOFOCUS_GAIN);', 93, 2, NULL, '2019-02-28 17:10:08', '2019-02-28 17:10:08', NULL),
(366, 'handlePrepare_afterSetAudioAttributes_setsPlayerCommandPlayWhenReady', '// Ensure that when playWhenReady is true while the player is IDLE, audio focus is only\r\n    // requested after calling handlePrepare.\r\n    AudioAttributes media = new AudioAttributes.Builder().setUsage(C.USAGE_MEDIA).build();\r\n\r\n    Shadows.shadowOf(audioManager)\r\n        .setNextFocusRequestResponse(AudioManager.AUDIOFOCUS_REQUEST_GRANTED);\r\n\r\n    assertThat(\r\n            audioFocusManager.setAudioAttributes(\r\n                media, /* playWhenReady= */ true, Player.STATE_IDLE))\r\n        .isEqualTo(PLAYER_COMMAND_PLAY_WHEN_READY);\r\n    assertThat(Shadows.shadowOf(audioManager).getLastAudioFocusRequest()).isNull();\r\n    assertThat(audioFocusManager.handlePrepare(/* playWhenReady= */ true))\r\n        .isEqualTo(PLAYER_COMMAND_PLAY_WHEN_READY);', 93, 3, NULL, '2019-02-28 17:16:16', '2019-02-28 17:16:16', NULL),
(367, 'handleSetPlayWhenReady_afterSetAudioAttributes_setsPlayerCommandPlayWhenReady', '// Ensure that audio focus is not requested until playWhenReady is true.\r\n    AudioAttributes media = new AudioAttributes.Builder().setUsage(C.USAGE_MEDIA).build();\r\n\r\n    Shadows.shadowOf(audioManager)\r\n        .setNextFocusRequestResponse(AudioManager.AUDIOFOCUS_REQUEST_GRANTED);\r\n\r\n    assertThat(audioFocusManager.handlePrepare(/* playWhenReady= */ false))\r\n        .isEqualTo(PLAYER_COMMAND_DO_NOT_PLAY);\r\n    assertThat(Shadows.shadowOf(audioManager).getLastAudioFocusRequest()).isNull();\r\n    assertThat(\r\n            audioFocusManager.setAudioAttributes(\r\n                media, /* playWhenReady= */ false, Player.STATE_READY))\r\n        .isEqualTo(PLAYER_COMMAND_DO_NOT_PLAY);\r\n    assertThat(Shadows.shadowOf(audioManager).getLastAudioFocusRequest()).isNull();\r\n    assertThat(\r\n            audioFocusManager.handleSetPlayWhenReady(/* playWhenReady= */ true, Player.STATE_READY))\r\n        .isEqualTo(PLAYER_COMMAND_PLAY_WHEN_READY);', 93, 5, NULL, '2019-02-28 17:17:06', '2019-02-28 17:17:06', NULL),
(368, 'onAudioFocusChange_withDuckEnabled_volumeReducedAndRestored', '// Ensure that the volume multiplier is adjusted when audio focus is lost to\r\n    // AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK, and returns to the default value after focus is\r\n    // regained.\r\n    AudioAttributes media = new AudioAttributes.Builder().setUsage(C.USAGE_MEDIA).build();\r\n\r\n    Shadows.shadowOf(audioManager)\r\n        .setNextFocusRequestResponse(AudioManager.AUDIOFOCUS_REQUEST_GRANTED);\r\n    assertThat(\r\n            audioFocusManager.setAudioAttributes(\r\n                media, /* playWhenReady= */ true, Player.STATE_READY))\r\n        .isEqualTo(PLAYER_COMMAND_PLAY_WHEN_READY);\r\n\r\n    ShadowAudioManager.AudioFocusRequest request =\r\n        Shadows.shadowOf(audioManager).getLastAudioFocusRequest();\r\n    request.listener.onAudioFocusChange(AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK);\r\n    assertThat(testPlayerControl.lastVolumeMultiplier).isLessThan(1.0f);\r\n    assertThat(testPlayerControl.lastPlayerCommand).isEqualTo(NO_COMMAND_RECEIVED);\r\n    request.listener.onAudioFocusChange(AudioManager.AUDIOFOCUS_GAIN);\r\n    assertThat(testPlayerControl.lastVolumeMultiplier).isEqualTo(1.0f);', 93, 4, NULL, '2019-02-28 17:26:14', '2019-02-28 17:26:14', NULL),
(369, 'onAudioFocusChange_withPausedWhenDucked_sendsCommandWaitForCallback', '// Ensure that the player is commanded to pause when audio focus is lost with\r\n    // AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK and the content type is CONTENT_TYPE_SPEECH.\r\n    AudioAttributes media =\r\n        new AudioAttributes.Builder()\r\n            .setUsage(C.USAGE_MEDIA)\r\n            .setContentType(C.CONTENT_TYPE_SPEECH)\r\n            .build();\r\n\r\n    Shadows.shadowOf(audioManager)\r\n        .setNextFocusRequestResponse(AudioManager.AUDIOFOCUS_REQUEST_GRANTED);\r\n    assertThat(\r\n            audioFocusManager.setAudioAttributes(\r\n                media, /* playWhenReady= */ true, Player.STATE_READY))\r\n        .isEqualTo(PLAYER_COMMAND_PLAY_WHEN_READY);\r\n\r\n    ShadowAudioManager.AudioFocusRequest request =\r\n        Shadows.shadowOf(audioManager).getLastAudioFocusRequest();\r\n    request.listener.onAudioFocusChange(AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK);\r\n    assertThat(testPlayerControl.lastPlayerCommand).isEqualTo(PLAYER_COMMAND_WAIT_FOR_CALLBACK);\r\n    assertThat(testPlayerControl.lastVolumeMultiplier).isEqualTo(1.0f);\r\n    request.listener.onAudioFocusChange(AudioManager.AUDIOFOCUS_GAIN);\r\n    assertThat(testPlayerControl.lastPlayerCommand).isEqualTo(PLAYER_COMMAND_PLAY_WHEN_READY);', 93, 4, NULL, '2019-02-28 17:26:35', '2019-02-28 17:26:35', NULL),
(370, 'onAudioFocusChange_withTransientLost_sendsCommandWaitForCallback', '// Ensure that the player is commanded to pause when audio focus is lost with\r\n    // AUDIOFOCUS_LOSS_TRANSIENT.\r\n    AudioAttributes media = new AudioAttributes.Builder().setUsage(C.USAGE_MEDIA).build();\r\n\r\n    Shadows.shadowOf(audioManager)\r\n        .setNextFocusRequestResponse(AudioManager.AUDIOFOCUS_REQUEST_GRANTED);\r\n    assertThat(\r\n            audioFocusManager.setAudioAttributes(\r\n                media, /* playWhenReady= */ true, Player.STATE_READY))\r\n        .isEqualTo(PLAYER_COMMAND_PLAY_WHEN_READY);\r\n\r\n    ShadowAudioManager.AudioFocusRequest request =\r\n        Shadows.shadowOf(audioManager).getLastAudioFocusRequest();\r\n    request.listener.onAudioFocusChange(AudioManager.AUDIOFOCUS_LOSS_TRANSIENT);\r\n    assertThat(testPlayerControl.lastVolumeMultiplier).isEqualTo(1.0f);\r\n    assertThat(testPlayerControl.lastPlayerCommand).isEqualTo(PLAYER_COMMAND_WAIT_FOR_CALLBACK);', 93, 3, NULL, '2019-02-28 17:26:56', '2019-02-28 17:26:56', NULL),
(371, 'onAudioFocusChange_withAudioFocusLost_sendsDoNotPlayAndAbandondsFocus', '// Ensure that AUDIOFOCUS_LOSS causes AudioFocusManager to pause playback and abandon audio\r\n    // focus.\r\n    AudioAttributes media =\r\n        new AudioAttributes.Builder()\r\n            .setUsage(C.USAGE_MEDIA)\r\n            .setContentType(C.CONTENT_TYPE_SPEECH)\r\n            .build();\r\n\r\n    Shadows.shadowOf(audioManager)\r\n        .setNextFocusRequestResponse(AudioManager.AUDIOFOCUS_REQUEST_GRANTED);\r\n    assertThat(\r\n            audioFocusManager.setAudioAttributes(\r\n                media, /* playWhenReady= */ true, Player.STATE_READY))\r\n        .isEqualTo(PLAYER_COMMAND_PLAY_WHEN_READY);\r\n    assertThat(Shadows.shadowOf(audioManager).getLastAbandonedAudioFocusListener()).isNull();\r\n\r\n    ShadowAudioManager.AudioFocusRequest request =\r\n        Shadows.shadowOf(audioManager).getLastAudioFocusRequest();\r\n    request.listener.onAudioFocusChange(AudioManager.AUDIOFOCUS_LOSS);\r\n    assertThat(testPlayerControl.lastPlayerCommand).isEqualTo(PLAYER_COMMAND_DO_NOT_PLAY);\r\n    assertThat(Shadows.shadowOf(audioManager).getLastAbandonedAudioFocusListener())\r\n        .isEqualTo(request.listener);', 93, 4, NULL, '2019-02-28 17:27:10', '2019-02-28 17:27:10', NULL),
(372, 'handleStop_withAudioFocus_abandonsAudioFocus', '// Ensure that handleStop causes AudioFocusManager to abandon audio focus.\r\n    AudioAttributes media =\r\n        new AudioAttributes.Builder()\r\n            .setUsage(C.USAGE_MEDIA)\r\n            .setContentType(C.CONTENT_TYPE_SPEECH)\r\n            .build();\r\n\r\n    Shadows.shadowOf(audioManager)\r\n        .setNextFocusRequestResponse(AudioManager.AUDIOFOCUS_REQUEST_GRANTED);\r\n    assertThat(\r\n            audioFocusManager.setAudioAttributes(\r\n                media, /* playWhenReady= */ true, Player.STATE_READY))\r\n        .isEqualTo(PLAYER_COMMAND_PLAY_WHEN_READY);\r\n    assertThat(Shadows.shadowOf(audioManager).getLastAbandonedAudioFocusListener()).isNull();\r\n\r\n    ShadowAudioManager.AudioFocusRequest request =\r\n        Shadows.shadowOf(audioManager).getLastAudioFocusRequest();\r\n    audioFocusManager.handleStop();\r\n    assertThat(Shadows.shadowOf(audioManager).getLastAbandonedAudioFocusListener())\r\n        .isEqualTo(request.listener);', 93, 3, NULL, '2019-02-28 17:27:50', '2019-02-28 17:27:50', NULL),
(373, 'handleStop_withoutAudioFocus_stillAbandonsFocus', '// Ensure that handleStop causes AudioFocusManager to call through to abandon audio focus\r\n    // even if focus wasn\'t requested.\r\n    AudioAttributes media =\r\n        new AudioAttributes.Builder()\r\n            .setUsage(C.USAGE_MEDIA)\r\n            .setContentType(C.CONTENT_TYPE_SPEECH)\r\n            .build();\r\n\r\n    Shadows.shadowOf(audioManager)\r\n        .setNextFocusRequestResponse(AudioManager.AUDIOFOCUS_REQUEST_GRANTED);\r\n    assertThat(\r\n            audioFocusManager.setAudioAttributes(\r\n                media, /* playWhenReady= */ false, Player.STATE_READY))\r\n        .isEqualTo(PLAYER_COMMAND_DO_NOT_PLAY);\r\n    assertThat(Shadows.shadowOf(audioManager).getLastAbandonedAudioFocusListener()).isNull();\r\n    ShadowAudioManager.AudioFocusRequest request =\r\n        Shadows.shadowOf(audioManager).getLastAudioFocusRequest();\r\n    assertThat(request).isNull();\r\n\r\n    audioFocusManager.handleStop();\r\n    assertThat(Shadows.shadowOf(audioManager).getLastAbandonedAudioFocusListener()).isNotNull();', 93, 4, NULL, '2019-02-28 17:28:16', '2019-02-28 17:28:16', NULL),
(374, 'handleStop_withoutHandlingAudioFocus_isNoOp', '// Ensure that handleStop is a no-op if audio focus isn\'t handled.\r\n    Shadows.shadowOf(audioManager)\r\n        .setNextFocusRequestResponse(AudioManager.AUDIOFOCUS_REQUEST_GRANTED);\r\n    assertThat(\r\n            audioFocusManager.setAudioAttributes(\r\n                /* audioAttributes= */ null, /* playWhenReady= */ false, Player.STATE_READY))\r\n        .isEqualTo(PLAYER_COMMAND_DO_NOT_PLAY);\r\n    assertThat(Shadows.shadowOf(audioManager).getLastAbandonedAudioFocusListener()).isNull();\r\n    ShadowAudioManager.AudioFocusRequest request =\r\n        Shadows.shadowOf(audioManager).getLastAudioFocusRequest();\r\n    assertThat(request).isNull();\r\n\r\n    audioFocusManager.handleStop();\r\n    assertThat(Shadows.shadowOf(audioManager).getLastAbandonedAudioFocusListener()).isNull();', 93, 4, NULL, '2019-02-28 17:28:30', '2019-02-28 17:32:56', NULL),
(375, 'testEnabledProcessor_isActive', '// Given an enabled processor.\r\n    silenceSkippingAudioProcessor.setEnabled(true);\r\n\r\n    // When configuring it.\r\n    boolean reconfigured =\r\n        silenceSkippingAudioProcessor.configure(\r\n            TEST_SIGNAL_SAMPLE_RATE_HZ, TEST_SIGNAL_CHANNEL_COUNT, C.ENCODING_PCM_16BIT);\r\n    silenceSkippingAudioProcessor.flush();\r\n\r\n    // It\'s active.\r\n    assertThat(reconfigured).isTrue();\r\n    assertThat(silenceSkippingAudioProcessor.isActive()).isTrue();', 94, 2, NULL, '2019-02-28 17:37:13', '2019-02-28 17:37:13', NULL),
(376, 'testDisabledProcessor_isNotActive', '// Given a disabled processor.\r\n    silenceSkippingAudioProcessor.setEnabled(false);\r\n\r\n    // When configuring it.\r\n    silenceSkippingAudioProcessor.configure(\r\n        TEST_SIGNAL_SAMPLE_RATE_HZ, TEST_SIGNAL_CHANNEL_COUNT, C.ENCODING_PCM_16BIT);\r\n\r\n    // It\'s not active.\r\n    assertThat(silenceSkippingAudioProcessor.isActive()).isFalse();', 94, 1, NULL, '2019-02-28 17:37:44', '2019-02-28 17:37:44', NULL),
(377, 'testDefaultProcessor_isNotEnabled', '// Given a processor in its default state.\r\n    // When reconfigured.\r\n    silenceSkippingAudioProcessor.configure(\r\n        TEST_SIGNAL_SAMPLE_RATE_HZ, TEST_SIGNAL_CHANNEL_COUNT, C.ENCODING_PCM_16BIT);\r\n\r\n    // It\'s not active.\r\n    assertThat(silenceSkippingAudioProcessor.isActive()).isFalse();', 94, 1, NULL, '2019-02-28 17:43:27', '2019-02-28 17:43:27', NULL),
(378, 'testChangingSampleRate_requiresReconfiguration', '// Given an enabled processor and configured processor.\r\n    silenceSkippingAudioProcessor.setEnabled(true);\r\n    boolean reconfigured =\r\n        silenceSkippingAudioProcessor.configure(\r\n            TEST_SIGNAL_SAMPLE_RATE_HZ, TEST_SIGNAL_CHANNEL_COUNT, C.ENCODING_PCM_16BIT);\r\n    if (reconfigured) {\r\n      silenceSkippingAudioProcessor.flush();\r\n    }\r\n\r\n    // When reconfiguring it with a different sample rate.\r\n    reconfigured =\r\n        silenceSkippingAudioProcessor.configure(\r\n            TEST_SIGNAL_SAMPLE_RATE_HZ * 2, TEST_SIGNAL_CHANNEL_COUNT, C.ENCODING_PCM_16BIT);\r\n\r\n    // It\'s reconfigured.\r\n    assertThat(reconfigured).isTrue();\r\n    assertThat(silenceSkippingAudioProcessor.isActive()).isTrue();', 94, 2, NULL, '2019-02-28 17:45:56', '2019-02-28 17:45:56', NULL),
(379, 'testReconfiguringWithSameSampleRate_doesNotRequireReconfiguration', '// Given an enabled processor and configured processor.\r\n    silenceSkippingAudioProcessor.setEnabled(true);\r\n    boolean reconfigured =\r\n        silenceSkippingAudioProcessor.configure(\r\n            TEST_SIGNAL_SAMPLE_RATE_HZ, TEST_SIGNAL_CHANNEL_COUNT, C.ENCODING_PCM_16BIT);\r\n    assertThat(reconfigured).isTrue();\r\n    silenceSkippingAudioProcessor.flush();\r\n\r\n    // When reconfiguring it with the same sample rate.\r\n    reconfigured =\r\n        silenceSkippingAudioProcessor.configure(\r\n            TEST_SIGNAL_SAMPLE_RATE_HZ, TEST_SIGNAL_CHANNEL_COUNT, C.ENCODING_PCM_16BIT);\r\n\r\n    // It\'s not reconfigured but it is active.\r\n    assertThat(reconfigured).isFalse();\r\n    assertThat(silenceSkippingAudioProcessor.isActive()).isTrue();', 94, 3, NULL, '2019-02-28 17:46:09', '2019-02-28 17:46:09', NULL),
(380, 'testSkipInSilentSignal_skipsEverything', '// Given a signal with only noise.\r\n    InputBufferProvider inputBufferProvider =\r\n        getInputBufferProviderForAlternatingSilenceAndNoise(\r\n            TEST_SIGNAL_SAMPLE_RATE_HZ,\r\n            TEST_SIGNAL_CHANNEL_COUNT,\r\n            TEST_SIGNAL_SILENCE_DURATION_MS,\r\n            /* noiseDurationMs= */ 0,\r\n            TEST_SIGNAL_FRAME_COUNT);\r\n\r\n    // When processing the entire signal.\r\n    silenceSkippingAudioProcessor.setEnabled(true);\r\n    boolean reconfigured =\r\n        silenceSkippingAudioProcessor.configure(\r\n            TEST_SIGNAL_SAMPLE_RATE_HZ, TEST_SIGNAL_CHANNEL_COUNT, C.ENCODING_PCM_16BIT);\r\n    silenceSkippingAudioProcessor.flush();\r\n    assertThat(reconfigured).isTrue();\r\n    assertThat(silenceSkippingAudioProcessor.isActive()).isTrue();\r\n    long totalOutputFrames =\r\n        process(silenceSkippingAudioProcessor, inputBufferProvider, INPUT_BUFFER_SIZE);\r\n\r\n    // The entire signal is skipped.\r\n    assertThat(totalOutputFrames).isEqualTo(0);\r\n    assertThat(silenceSkippingAudioProcessor.getSkippedFrames()).isEqualTo(TEST_SIGNAL_FRAME_COUNT);', 94, 4, NULL, '2019-02-28 17:47:05', '2019-02-28 17:47:05', NULL),
(381, 'testSkipInNoisySignal_skipsNothing', '// Given a signal with only silence.\r\n    InputBufferProvider inputBufferProvider =\r\n        getInputBufferProviderForAlternatingSilenceAndNoise(\r\n            TEST_SIGNAL_SAMPLE_RATE_HZ,\r\n            TEST_SIGNAL_CHANNEL_COUNT,\r\n            /* silenceDurationMs= */ 0,\r\n            TEST_SIGNAL_NOISE_DURATION_MS,\r\n            TEST_SIGNAL_FRAME_COUNT);\r\n\r\n    // When processing the entire signal.\r\n    SilenceSkippingAudioProcessor silenceSkippingAudioProcessor =\r\n        new SilenceSkippingAudioProcessor();\r\n    silenceSkippingAudioProcessor.setEnabled(true);\r\n    boolean reconfigured =\r\n        silenceSkippingAudioProcessor.configure(\r\n            TEST_SIGNAL_SAMPLE_RATE_HZ, TEST_SIGNAL_CHANNEL_COUNT, C.ENCODING_PCM_16BIT);\r\n    silenceSkippingAudioProcessor.flush();\r\n    assertThat(reconfigured).isTrue();\r\n    assertThat(silenceSkippingAudioProcessor.isActive()).isTrue();\r\n    long totalOutputFrames =\r\n        process(silenceSkippingAudioProcessor, inputBufferProvider, INPUT_BUFFER_SIZE);\r\n\r\n    // None of the signal is skipped.\r\n    assertThat(totalOutputFrames).isEqualTo(TEST_SIGNAL_FRAME_COUNT);\r\n    assertThat(silenceSkippingAudioProcessor.getSkippedFrames()).isEqualTo(0)', 94, 4, NULL, '2019-02-28 17:47:42', '2019-02-28 17:47:42', NULL),
(382, 'testSkipInAlternatingTestSignal_hasCorrectOutputAndSkippedFrameCounts', '// Given a signal that alternates between silence and noise.\r\n    InputBufferProvider inputBufferProvider =\r\n        getInputBufferProviderForAlternatingSilenceAndNoise(\r\n            TEST_SIGNAL_SAMPLE_RATE_HZ,\r\n            TEST_SIGNAL_CHANNEL_COUNT,\r\n            TEST_SIGNAL_SILENCE_DURATION_MS,\r\n            TEST_SIGNAL_NOISE_DURATION_MS,\r\n            TEST_SIGNAL_FRAME_COUNT);\r\n\r\n    // When processing the entire signal.\r\n    SilenceSkippingAudioProcessor silenceSkippingAudioProcessor =\r\n        new SilenceSkippingAudioProcessor();\r\n    silenceSkippingAudioProcessor.setEnabled(true);\r\n    boolean reconfigured =\r\n        silenceSkippingAudioProcessor.configure(\r\n            TEST_SIGNAL_SAMPLE_RATE_HZ, TEST_SIGNAL_CHANNEL_COUNT, C.ENCODING_PCM_16BIT);\r\n    silenceSkippingAudioProcessor.flush();\r\n    assertThat(reconfigured).isTrue();\r\n    assertThat(silenceSkippingAudioProcessor.isActive()).isTrue();\r\n    long totalOutputFrames =\r\n        process(silenceSkippingAudioProcessor, inputBufferProvider, INPUT_BUFFER_SIZE);\r\n\r\n    // The right number of frames are skipped/output.\r\n    assertThat(totalOutputFrames).isEqualTo(57980);\r\n    assertThat(silenceSkippingAudioProcessor.getSkippedFrames()).isEqualTo(42020);', 94, 4, NULL, '2019-02-28 17:48:04', '2019-02-28 17:48:04', NULL),
(383, 'testSkipWithSmallerInputBufferSize_hasCorrectOutputAndSkippedFrameCounts', '// Given a signal that alternates between silence and noise.\r\n    InputBufferProvider inputBufferProvider =\r\n        getInputBufferProviderForAlternatingSilenceAndNoise(\r\n            TEST_SIGNAL_SAMPLE_RATE_HZ,\r\n            TEST_SIGNAL_CHANNEL_COUNT,\r\n            TEST_SIGNAL_SILENCE_DURATION_MS,\r\n            TEST_SIGNAL_NOISE_DURATION_MS,\r\n            TEST_SIGNAL_FRAME_COUNT);\r\n\r\n    // When processing the entire signal with a smaller input buffer size.\r\n    SilenceSkippingAudioProcessor silenceSkippingAudioProcessor =\r\n        new SilenceSkippingAudioProcessor();\r\n    silenceSkippingAudioProcessor.setEnabled(true);\r\n    boolean reconfigured =\r\n        silenceSkippingAudioProcessor.configure(\r\n            TEST_SIGNAL_SAMPLE_RATE_HZ, TEST_SIGNAL_CHANNEL_COUNT, C.ENCODING_PCM_16BIT);\r\n    silenceSkippingAudioProcessor.flush();\r\n    assertThat(reconfigured).isTrue();\r\n    assertThat(silenceSkippingAudioProcessor.isActive()).isTrue();\r\n    long totalOutputFrames =\r\n        process(silenceSkippingAudioProcessor, inputBufferProvider, /* inputBufferSize= */ 80);\r\n\r\n    // The right number of frames are skipped/output.\r\n    assertThat(totalOutputFrames).isEqualTo(57980);\r\n    assertThat(silenceSkippingAudioProcessor.getSkippedFrames()).isEqualTo(42020);', 94, 4, NULL, '2019-02-28 17:48:24', '2019-02-28 17:48:24', NULL),
(384, 'testSkipWithLargerInputBufferSize_hasCorrectOutputAndSkippedFrameCounts', '// Given a signal that alternates between silence and noise.\r\n    InputBufferProvider inputBufferProvider =\r\n        getInputBufferProviderForAlternatingSilenceAndNoise(\r\n            TEST_SIGNAL_SAMPLE_RATE_HZ,\r\n            TEST_SIGNAL_CHANNEL_COUNT,\r\n            TEST_SIGNAL_SILENCE_DURATION_MS,\r\n            TEST_SIGNAL_NOISE_DURATION_MS,\r\n            TEST_SIGNAL_FRAME_COUNT);\r\n\r\n    // When processing the entire signal with a larger input buffer size.\r\n    SilenceSkippingAudioProcessor silenceSkippingAudioProcessor =\r\n        new SilenceSkippingAudioProcessor();\r\n    silenceSkippingAudioProcessor.setEnabled(true);\r\n    boolean reconfigured =\r\n        silenceSkippingAudioProcessor.configure(\r\n            TEST_SIGNAL_SAMPLE_RATE_HZ, TEST_SIGNAL_CHANNEL_COUNT, C.ENCODING_PCM_16BIT);\r\n    silenceSkippingAudioProcessor.flush();\r\n    assertThat(reconfigured).isTrue();\r\n    assertThat(silenceSkippingAudioProcessor.isActive()).isTrue();\r\n    long totalOutputFrames =\r\n        process(silenceSkippingAudioProcessor, inputBufferProvider, /* inputBufferSize= */ 120);\r\n\r\n    // The right number of frames are skipped/output.\r\n    assertThat(totalOutputFrames).isEqualTo(57980);\r\n    assertThat(silenceSkippingAudioProcessor.getSkippedFrames()).isEqualTo(42020);', 94, 4, NULL, '2019-02-28 17:48:39', '2019-02-28 17:48:39', NULL),
(385, 'testSkipThenFlush_resetsSkippedFrameCount', '// Given a signal that alternates between silence and noise.\r\n    InputBufferProvider inputBufferProvider =\r\n        getInputBufferProviderForAlternatingSilenceAndNoise(\r\n            TEST_SIGNAL_SAMPLE_RATE_HZ,\r\n            TEST_SIGNAL_CHANNEL_COUNT,\r\n            TEST_SIGNAL_SILENCE_DURATION_MS,\r\n            TEST_SIGNAL_NOISE_DURATION_MS,\r\n            TEST_SIGNAL_FRAME_COUNT);\r\n\r\n    // When processing the entire signal then flushing.\r\n    SilenceSkippingAudioProcessor silenceSkippingAudioProcessor =\r\n        new SilenceSkippingAudioProcessor();\r\n    silenceSkippingAudioProcessor.setEnabled(true);\r\n    boolean reconfigured =\r\n        silenceSkippingAudioProcessor.configure(\r\n            TEST_SIGNAL_SAMPLE_RATE_HZ, TEST_SIGNAL_CHANNEL_COUNT, C.ENCODING_PCM_16BIT);\r\n    silenceSkippingAudioProcessor.flush();\r\n    assertThat(reconfigured).isTrue();\r\n    assertThat(silenceSkippingAudioProcessor.isActive()).isTrue();\r\n    process(silenceSkippingAudioProcessor, inputBufferProvider, INPUT_BUFFER_SIZE);\r\n    silenceSkippingAudioProcessor.flush();\r\n\r\n    // The skipped frame count is zero.\r\n    assertThat(silenceSkippingAudioProcessor.getSkippedFrames()).isEqualTo(0);', 94, 3, NULL, '2019-02-28 17:50:51', '2019-02-28 17:50:51', NULL),
(386, 'testSupportsFormatAtApi19', 'assertThat(audioRenderer.supportsFormat(FORMAT))\r\n        .isEqualTo(ADAPTIVE_NOT_SEAMLESS | TUNNELING_NOT_SUPPORTED | FORMAT_HANDLED);', 95, 1, NULL, '2019-02-28 17:52:45', '2019-02-28 17:52:45', NULL),
(387, 'testSupportsFormatAtApi21', '// From API 21, tunneling is supported.\r\n    assertThat(audioRenderer.supportsFormat(FORMAT))\r\n        .isEqualTo(ADAPTIVE_NOT_SEAMLESS | TUNNELING_SUPPORTED | FORMAT_HANDLED);', 95, 1, NULL, '2019-02-28 17:52:56', '2019-02-28 17:52:56', NULL),
(388, 'testImmediatelyReadEndOfStreamPlaysAudioSinkToEndOfStream', 'audioRenderer.enable(\r\n        RendererConfiguration.DEFAULT,\r\n        new Format[] {FORMAT},\r\n        new FakeSampleStream(FORMAT, /* eventDispatcher= */ null, /* shouldOutputSample= */ false),\r\n        0,\r\n        false,\r\n        0);\r\n    audioRenderer.setCurrentStreamFinal();\r\n    when(mockAudioSink.isEnded()).thenReturn(true);\r\n    while (!audioRenderer.isEnded()) {\r\n      audioRenderer.render(0, 0);\r\n    }\r\n    verify(mockAudioSink, times(1)).playToEndOfStream();\r\n    audioRenderer.disable();\r\n    verify(mockAudioSink, times(1)).release();', 95, 0, NULL, '2019-02-28 17:54:03', '2019-02-28 17:54:03', NULL),
(389, 'testReconfigureWithSameSampleRate', '// When configured for resampling from 44.1 kHz to 48 kHz, the output sample rate is correct.\r\n    sonicAudioProcessor.setOutputSampleRateHz(48000);\r\n    sonicAudioProcessor.configure(44100, 2, C.ENCODING_PCM_16BIT);\r\n    assertThat(sonicAudioProcessor.getOutputSampleRateHz()).isEqualTo(48000);\r\n    assertThat(sonicAudioProcessor.isActive()).isTrue();\r\n    // When reconfigured with 48 kHz input, there is no resampling.\r\n    sonicAudioProcessor.configure(48000, 2, C.ENCODING_PCM_16BIT);\r\n    assertThat(sonicAudioProcessor.getOutputSampleRateHz()).isEqualTo(48000);\r\n    assertThat(sonicAudioProcessor.isActive()).isFalse();\r\n    // When reconfigure with 44.1 kHz input, resampling is enabled again.\r\n    sonicAudioProcessor.configure(44100, 2, C.ENCODING_PCM_16BIT);\r\n    assertThat(sonicAudioProcessor.getOutputSampleRateHz()).isEqualTo(48000);\r\n    assertThat(sonicAudioProcessor.isActive()).isTrue();', 96, 6, NULL, '2019-02-28 17:57:22', '2019-02-28 17:57:22', NULL),
(390, 'testNoSampleRateChange', '// Configure for resampling 44.1 kHz to 48 kHz.\r\n    sonicAudioProcessor.setOutputSampleRateHz(48000);\r\n    sonicAudioProcessor.configure(44100, 2, C.ENCODING_PCM_16BIT);\r\n    // Reconfigure to not modify the sample rate.\r\n    sonicAudioProcessor.setOutputSampleRateHz(SonicAudioProcessor.SAMPLE_RATE_NO_CHANGE);\r\n    sonicAudioProcessor.configure(22050, 2, C.ENCODING_PCM_16BIT);\r\n    // The sample rate is unmodified, and the audio processor is not active.\r\n    assertThat(sonicAudioProcessor.getOutputSampleRateHz()).isEqualTo(22050);\r\n    assertThat(sonicAudioProcessor.isActive()).isFalse();', 96, 2, NULL, '2019-02-28 17:57:37', '2019-02-28 17:57:37', NULL),
(391, 'testBecomesActiveAfterConfigure', 'sonicAudioProcessor.configure(44100, 2, C.ENCODING_PCM_16BIT);\r\n    // Set a new sample rate.\r\n    sonicAudioProcessor.setOutputSampleRateHz(22050);\r\n    // The new sample rate is not active yet.\r\n    assertThat(sonicAudioProcessor.isActive()).isFalse();\r\n    assertThat(sonicAudioProcessor.getOutputSampleRateHz()).isEqualTo(44100);', 96, 2, NULL, '2019-02-28 17:58:34', '2019-02-28 17:58:34', NULL),
(392, 'testSampleRateChangeBecomesActiveAfterConfigure', '// Configure for resampling 44.1 kHz to 48 kHz.\r\n    sonicAudioProcessor.setOutputSampleRateHz(48000);\r\n    sonicAudioProcessor.configure(44100, 2, C.ENCODING_PCM_16BIT);\r\n    // Set a new sample rate, which isn\'t active yet.\r\n    sonicAudioProcessor.setOutputSampleRateHz(22050);\r\n    assertThat(sonicAudioProcessor.getOutputSampleRateHz()).isEqualTo(48000);\r\n    // The new sample rate takes effect on reconfiguration.\r\n    sonicAudioProcessor.configure(44100, 2, C.ENCODING_PCM_16BIT);\r\n    assertThat(sonicAudioProcessor.getOutputSampleRateHz()).isEqualTo(22050);', 96, 2, NULL, '2019-02-28 17:58:51', '2019-02-28 17:58:51', NULL),
(393, 'testIsActiveWithSpeedChange', 'sonicAudioProcessor.setSpeed(1.5f);\r\n    sonicAudioProcessor.configure(44100, 2, C.ENCODING_PCM_16BIT);\r\n    sonicAudioProcessor.flush();\r\n    assertThat(sonicAudioProcessor.isActive()).isTrue();', 96, 1, NULL, '2019-02-28 17:59:52', '2019-02-28 17:59:52', NULL),
(394, 'testIsActiveWithPitchChange', 'sonicAudioProcessor.setPitch(1.5f);\r\n    sonicAudioProcessor.configure(44100, 2, C.ENCODING_PCM_16BIT);\r\n    sonicAudioProcessor.flush();\r\n    assertThat(sonicAudioProcessor.isActive()).isTrue();', 96, 1, NULL, '2019-02-28 18:05:06', '2019-02-28 18:05:06', NULL),
(395, 'testIsNotActiveWithNoChange', 'sonicAudioProcessor.configure(44100, 2, C.ENCODING_PCM_16BIT);\r\n    assertThat(sonicAudioProcessor.isActive()).isFalse();', 96, 1, NULL, '2019-02-28 18:05:19', '2019-02-28 18:05:19', NULL),
(396, 'testDoesNotSupportNon16BitInput', 'try {\r\n      sonicAudioProcessor.configure(44100, 2, C.ENCODING_PCM_8BIT);\r\n      fail();\r\n    } catch (AudioProcessor.UnhandledFormatException e) {\r\n      // Expected.\r\n    }\r\n    try {\r\n      sonicAudioProcessor.configure(44100, 2, C.ENCODING_PCM_24BIT);\r\n      fail();\r\n    } catch (AudioProcessor.UnhandledFormatException e) {\r\n      // Expected.\r\n    }\r\n    try {\r\n      sonicAudioProcessor.configure(44100, 2, C.ENCODING_PCM_32BIT);\r\n      fail();\r\n    } catch (AudioProcessor.UnhandledFormatException e) {\r\n      // Expected.\r\n    }', 96, 0, NULL, '2019-02-28 18:05:47', '2019-02-28 18:05:47', NULL),
(397, 'testAdjustSingleKeyResponseDataV26', '// Everything but the keys should be removed. Within each key only the k, kid and kty parameters\r\n    // should remain. Any \"-\" and \"_\" characters in the k and kid values should be replaced with \"+\"\r\n    // and \"/\".\r\n    byte[] expected =\r\n        Util.getUtf8Bytes(\r\n            \"{\"\r\n                + \"\\\"keys\\\":[\"\r\n                + \"{\"\r\n                + \"\\\"k\\\":\\\"abc/def+\\\",\\\"kid\\\":\\\"ab/cde+f\\\",\\\"kty\\\":\\\"o_c-t\\\"\"\r\n                + \"}\"\r\n                + \"]\"\r\n                + \"}\");\r\n    assertThat(ClearKeyUtil.adjustResponseData(SINGLE_KEY_RESPONSE)).isEqualTo(expected);', 97, 1, NULL, '2019-02-28 18:08:11', '2019-02-28 18:08:11', NULL),
(398, 'testAdjustMultiKeyResponseDataV26', '// Everything but the keys should be removed. Within each key only the k, kid and kty parameters\r\n    // should remain. Any \"-\" and \"_\" characters in the k and kid values should be replaced with \"+\"\r\n    // and \"/\".\r\n    byte[] expected =\r\n        Util.getUtf8Bytes(\r\n            \"{\"\r\n                + \"\\\"keys\\\":[\"\r\n                + \"{\"\r\n                + \"\\\"k\\\":\\\"abc/def+\\\",\\\"kid\\\":\\\"ab/cde+f\\\",\\\"kty\\\":\\\"oct\\\"\"\r\n                + \"},{\"\r\n                + \"\\\"k\\\":\\\"ghi/jkl+\\\",\\\"kid\\\":\\\"gh/ijk+l\\\",\\\"kty\\\":\\\"oct\\\"\"\r\n                + \"}\"\r\n                + \"]\"\r\n                + \"}\");\r\n    assertThat(ClearKeyUtil.adjustResponseData(MULTI_KEY_RESPONSE)).isEqualTo(expected);', 97, 1, NULL, '2019-02-28 18:08:28', '2019-02-28 18:08:28', NULL),
(399, 'testAdjustResponseDataV27', '// Response should be unchanged.\r\n    assertThat(ClearKeyUtil.adjustResponseData(SINGLE_KEY_RESPONSE)).isEqualTo(SINGLE_KEY_RESPONSE);', 97, 1, NULL, '2019-02-28 18:08:42', '2019-02-28 18:08:42', NULL),
(400, 'testAdjustRequestDataV26', '// We expect \"+\" and \"/\" to be replaced with \"-\" and \"_\" respectively, for \"kids\".\r\n    byte[] expected =\r\n        Util.getUtf8Bytes(\r\n            \"{\"\r\n                + \"\\\"kids\\\":[\"\r\n                + \"\\\"abc-def_\\\",\"\r\n                + \"\\\"ab-cde_f\\\"\"\r\n                + \"],\"\r\n                + \"\\\"type\\\":\\\"temporary\\\"\"\r\n                + \"}\");\r\n    assertThat(ClearKeyUtil.adjustRequestData(KEY_REQUEST)).isEqualTo(expected);', 97, 1, NULL, '2019-02-28 18:08:55', '2019-02-28 18:08:55', NULL),
(401, 'testAdjustRequestDataV27', '// Request should be unchanged.\r\n    assertThat(ClearKeyUtil.adjustRequestData(KEY_REQUEST)).isEqualTo(KEY_REQUEST);', 97, 1, NULL, '2019-02-28 18:09:08', '2019-02-28 18:09:08', NULL),
(402, 'testParcelable', 'DrmInitData drmInitDataToParcel = new DrmInitData(DATA_1, DATA_2);\r\n\r\n    Parcel parcel = Parcel.obtain();\r\n    drmInitDataToParcel.writeToParcel(parcel, 0);\r\n    parcel.setDataPosition(0);\r\n\r\n    DrmInitData drmInitDataFromParcel = DrmInitData.CREATOR.createFromParcel(parcel);\r\n    assertThat(drmInitDataFromParcel).isEqualTo(drmInitDataToParcel);\r\n\r\n    parcel.recycle();', 98, 1, NULL, '2019-02-28 18:13:08', '2019-02-28 18:13:08', NULL),
(403, 'testEquals', 'DrmInitData drmInitData = new DrmInitData(DATA_1, DATA_2);\r\n\r\n    // Basic non-referential equality test.\r\n    DrmInitData testInitData = new DrmInitData(DATA_1, DATA_2);\r\n    assertThat(testInitData).isEqualTo(drmInitData);\r\n    assertThat(testInitData.hashCode()).isEqualTo(drmInitData.hashCode());\r\n\r\n    // Basic non-referential equality test with non-referential scheme data.\r\n    testInitData = new DrmInitData(DATA_1B, DATA_2B);\r\n    assertThat(testInitData).isEqualTo(drmInitData);\r\n    assertThat(testInitData.hashCode()).isEqualTo(drmInitData.hashCode());\r\n\r\n    // Passing the scheme data in reverse order shouldn\'t affect equality.\r\n    testInitData = new DrmInitData(DATA_2, DATA_1);\r\n    assertThat(testInitData).isEqualTo(drmInitData);\r\n    assertThat(testInitData.hashCode()).isEqualTo(drmInitData.hashCode());\r\n\r\n    // Ditto.\r\n    testInitData = new DrmInitData(DATA_2B, DATA_1B);\r\n    assertThat(testInitData).isEqualTo(drmInitData);\r\n    assertThat(testInitData.hashCode()).isEqualTo(drmInitData.hashCode());\r\n\r\n    // Different number of tuples should affect equality.\r\n    testInitData = new DrmInitData(DATA_1);\r\n    assertThat(drmInitData).isNotEqualTo(testInitData);\r\n\r\n    // Different data in one of the tuples should affect equality.\r\n    testInitData = new DrmInitData(DATA_1, DATA_UNIVERSAL);\r\n    assertThat(testInitData).isNotEqualTo(drmInitData);', 98, 10, NULL, '2019-02-28 18:14:15', '2019-02-28 18:14:15', NULL),
(404, 'testGetByUuid', '// Basic matching.\r\n    DrmInitData testInitData = new DrmInitData(DATA_1, DATA_2);\r\n    assertThat(testInitData.get(WIDEVINE_UUID)).isEqualTo(DATA_1);\r\n    assertThat(testInitData.get(PLAYREADY_UUID)).isEqualTo(DATA_2);\r\n    assertThat(testInitData.get(UUID_NIL)).isNull();\r\n\r\n    // Basic matching including universal data.\r\n    testInitData = new DrmInitData(DATA_1, DATA_2, DATA_UNIVERSAL);\r\n    assertThat(testInitData.get(WIDEVINE_UUID)).isEqualTo(DATA_1);\r\n    assertThat(testInitData.get(PLAYREADY_UUID)).isEqualTo(DATA_2);\r\n    assertThat(testInitData.get(UUID_NIL)).isEqualTo(DATA_UNIVERSAL);\r\n\r\n    // Passing the scheme data in reverse order shouldn\'t affect equality.\r\n    testInitData = new DrmInitData(DATA_UNIVERSAL, DATA_2, DATA_1);\r\n    assertThat(testInitData.get(WIDEVINE_UUID)).isEqualTo(DATA_1);\r\n    assertThat(testInitData.get(PLAYREADY_UUID)).isEqualTo(DATA_2);\r\n    assertThat(testInitData.get(UUID_NIL)).isEqualTo(DATA_UNIVERSAL);\r\n\r\n    // Universal data should be returned in the absence of a specific match.\r\n    testInitData = new DrmInitData(DATA_1, DATA_UNIVERSAL);\r\n    assertThat(testInitData.get(WIDEVINE_UUID)).isEqualTo(DATA_1);\r\n    assertThat(testInitData.get(PLAYREADY_UUID)).isEqualTo(DATA_UNIVERSAL);\r\n    assertThat(testInitData.get(UUID_NIL)).isEqualTo(DATA_UNIVERSAL);', 98, 12, NULL, '2019-02-28 18:15:02', '2019-02-28 18:15:02', NULL),
(405, 'testGetByIndex', 'DrmInitData testInitData = new DrmInitData(DATA_1, DATA_2);\r\n    assertThat(getAllSchemeData(testInitData)).containsAllOf(DATA_1, DATA_2);', 98, 1, NULL, '2019-02-28 18:16:11', '2019-02-28 18:16:11', NULL),
(406, 'testSchemeDatasWithSameUuid', 'DrmInitData testInitData = new DrmInitData(DATA_1, DATA_1B);\r\n    assertThat(testInitData.schemeDataCount).isEqualTo(2);\r\n    // Deprecated get method should return first entry.\r\n    assertThat(testInitData.get(WIDEVINE_UUID)).isEqualTo(DATA_1);\r\n    // Test retrieval of first and second entry.\r\n    assertThat(testInitData.get(0)).isEqualTo(DATA_1);\r\n    assertThat(testInitData.get(1)).isEqualTo(DATA_1B);', 98, 4, NULL, '2019-02-28 18:16:49', '2019-02-28 18:16:49', NULL),
(407, 'testSchemeDataMatches', 'assertThat(DATA_1.matches(WIDEVINE_UUID)).isTrue();\r\n    assertThat(DATA_1.matches(PLAYREADY_UUID)).isFalse();\r\n    assertThat(DATA_2.matches(UUID_NIL)).isFalse();\r\n\r\n    assertThat(DATA_2.matches(WIDEVINE_UUID)).isFalse();\r\n    assertThat(DATA_2.matches(PLAYREADY_UUID)).isTrue();\r\n    assertThat(DATA_2.matches(UUID_NIL)).isFalse();\r\n\r\n    assertThat(DATA_UNIVERSAL.matches(WIDEVINE_UUID)).isTrue();\r\n    assertThat(DATA_UNIVERSAL.matches(PLAYREADY_UUID)).isTrue();\r\n    assertThat(DATA_UNIVERSAL.matches(UUID_NIL)).isTrue();', 98, 9, NULL, '2019-02-28 18:17:34', '2019-02-28 18:17:34', NULL),
(408, 'testDownloadRenewReleaseKey', 'setStubLicenseAndPlaybackDurationValues(1000, 200);\r\n\r\n    byte[] keySetId = {2, 5, 8};\r\n    setStubKeySetId(keySetId);\r\n\r\n    byte[] offlineLicenseKeySetId = offlineLicenseHelper.downloadLicense(newDrmInitData());\r\n\r\n    assertOfflineLicenseKeySetIdEqual(keySetId, offlineLicenseKeySetId);\r\n\r\n    byte[] keySetId2 = {6, 7, 0, 1, 4};\r\n    setStubKeySetId(keySetId2);\r\n\r\n    byte[] offlineLicenseKeySetId2 = offlineLicenseHelper.renewLicense(offlineLicenseKeySetId);\r\n\r\n    assertOfflineLicenseKeySetIdEqual(keySetId2, offlineLicenseKeySetId2);\r\n\r\n    offlineLicenseHelper.releaseLicense(offlineLicenseKeySetId2);', 99, 2, NULL, '2019-02-28 18:19:58', '2019-02-28 18:19:58', NULL),
(409, 'testDownloadLicenseFailsIfNullInitData', 'try {\r\n      offlineLicenseHelper.downloadLicense(null);\r\n      fail();\r\n    } catch (IllegalArgumentException e) {\r\n      // Expected.\r\n    }', 99, 0, NULL, '2019-02-28 18:21:24', '2019-02-28 18:21:24', NULL),
(410, 'testDownloadLicenseFailsIfNoKeySetIdIsReturned', 'setStubLicenseAndPlaybackDurationValues(1000, 200);\r\n\r\n    byte[] offlineLicenseKeySetId = offlineLicenseHelper.downloadLicense(newDrmInitData());\r\n\r\n    assertThat(offlineLicenseKeySetId).isNull();', 99, 1, NULL, '2019-02-28 18:21:51', '2019-02-28 18:21:51', NULL),
(411, 'testDownloadLicenseDoesNotFailIfDurationNotAvailable', 'setDefaultStubKeySetId();\r\n\r\n    byte[] offlineLicenseKeySetId = offlineLicenseHelper.downloadLicense(newDrmInitData());\r\n\r\n    assertThat(offlineLicenseKeySetId).isNotNull();', 99, 1, NULL, '2019-02-28 18:22:25', '2019-02-28 18:22:25', NULL),
(412, 'testGetLicenseDurationRemainingSec', 'long licenseDuration = 1000;\r\n    int playbackDuration = 200;\r\n    setStubLicenseAndPlaybackDurationValues(licenseDuration, playbackDuration);\r\n    setDefaultStubKeySetId();\r\n\r\n    byte[] offlineLicenseKeySetId = offlineLicenseHelper.downloadLicense(newDrmInitData());\r\n\r\n    Pair<Long, Long> licenseDurationRemainingSec =\r\n        offlineLicenseHelper.getLicenseDurationRemainingSec(offlineLicenseKeySetId);\r\n\r\n    assertThat(licenseDurationRemainingSec.first).isEqualTo(licenseDuration);\r\n    assertThat(licenseDurationRemainingSec.second).isEqualTo(playbackDuration);', 99, 2, NULL, '2019-02-28 18:23:12', '2019-02-28 18:23:12', NULL),
(413, 'testGetLicenseDurationRemainingSecExpiredLicense', 'long licenseDuration = 0;\r\n    int playbackDuration = 0;\r\n    setStubLicenseAndPlaybackDurationValues(licenseDuration, playbackDuration);\r\n    setDefaultStubKeySetId();\r\n\r\n    byte[] offlineLicenseKeySetId = offlineLicenseHelper.downloadLicense(newDrmInitData());\r\n\r\n    Pair<Long, Long> licenseDurationRemainingSec =\r\n        offlineLicenseHelper.getLicenseDurationRemainingSec(offlineLicenseKeySetId);\r\n\r\n    assertThat(licenseDurationRemainingSec.first).isEqualTo(licenseDuration);\r\n    assertThat(licenseDurationRemainingSec.second).isEqualTo(playbackDuration);', 99, 2, NULL, '2019-02-28 18:23:33', '2019-02-28 18:23:33', NULL),
(414, 'testAmrExtractorReads_returnSeekableSeekMap_forNarrowBandAmr', 'String fileName = NARROW_BAND_AMR_FILE;\r\n    Uri fileUri = TestUtil.buildAssetUri(fileName);\r\n    expectedTrackOutput =\r\n        TestUtil.extractAllSamplesFromFile(\r\n                createAmrExtractor(), RuntimeEnvironment.application, fileName)\r\n            .trackOutputs\r\n            .get(0);\r\n\r\n    AmrExtractor extractor = createAmrExtractor();\r\n    SeekMap seekMap =\r\n        TestUtil.extractSeekMap(extractor, new FakeExtractorOutput(), dataSource, fileUri);\r\n\r\n    assertThat(seekMap).isNotNull();\r\n    assertThat(seekMap.getDurationUs()).isEqualTo(NARROW_BAND_FILE_DURATION_US);\r\n    assertThat(seekMap.isSeekable()).isTrue();', 100, 3, NULL, '2019-02-28 18:33:57', '2019-02-28 18:33:57', NULL),
(415, 'testSeeking_handlesSeekingToPositionInFile_extractsCorrectFrame_forNarrowBandAmr', 'String fileName = NARROW_BAND_AMR_FILE;\r\n    Uri fileUri = TestUtil.buildAssetUri(fileName);\r\n    expectedTrackOutput =\r\n        TestUtil.extractAllSamplesFromFile(\r\n                createAmrExtractor(), RuntimeEnvironment.application, fileName)\r\n            .trackOutputs\r\n            .get(0);\r\n\r\n    AmrExtractor extractor = createAmrExtractor();\r\n\r\n    FakeExtractorOutput extractorOutput = new FakeExtractorOutput();\r\n    SeekMap seekMap = TestUtil.extractSeekMap(extractor, extractorOutput, dataSource, fileUri);\r\n    FakeTrackOutput trackOutput = extractorOutput.trackOutputs.get(0);\r\n\r\n    long targetSeekTimeUs = 980_000;\r\n    int extractedFrameIndex =\r\n        TestUtil.seekToTimeUs(\r\n            extractor, seekMap, targetSeekTimeUs, dataSource, trackOutput, fileUri);\r\n\r\n    assertThat(extractedFrameIndex).isNotEqualTo(-1);\r\n    assertFirstFrameAfterSeekContainTargetSeekTime(\r\n        trackOutput, targetSeekTimeUs, extractedFrameIndex);', 100, 2, NULL, '2019-02-28 18:34:26', '2019-02-28 18:34:26', NULL),
(416, 'testSeeking_handlesSeekToEoF_extractsLastFrame_forNarrowBandAmr', 'String fileName = NARROW_BAND_AMR_FILE;\r\n    Uri fileUri = TestUtil.buildAssetUri(fileName);\r\n    expectedTrackOutput =\r\n        TestUtil.extractAllSamplesFromFile(\r\n                createAmrExtractor(), RuntimeEnvironment.application, fileName)\r\n            .trackOutputs\r\n            .get(0);\r\n    AmrExtractor extractor = createAmrExtractor();\r\n\r\n    FakeExtractorOutput extractorOutput = new FakeExtractorOutput();\r\n    SeekMap seekMap = TestUtil.extractSeekMap(extractor, extractorOutput, dataSource, fileUri);\r\n    FakeTrackOutput trackOutput = extractorOutput.trackOutputs.get(0);\r\n\r\n    long targetSeekTimeUs = seekMap.getDurationUs();\r\n\r\n    int extractedFrameIndex =\r\n        TestUtil.seekToTimeUs(\r\n            extractor, seekMap, targetSeekTimeUs, dataSource, trackOutput, fileUri);\r\n\r\n    assertThat(extractedFrameIndex).isNotEqualTo(-1);\r\n    assertFirstFrameAfterSeekContainTargetSeekTime(\r\n        trackOutput, targetSeekTimeUs, extractedFrameIndex);', 100, 2, NULL, '2019-02-28 18:34:40', '2019-02-28 18:34:40', NULL),
(417, 'testSeeking_handlesSeekingBackward_extractsCorrectFrames_forNarrowBandAmr', 'String fileName = NARROW_BAND_AMR_FILE;\r\n    Uri fileUri = TestUtil.buildAssetUri(fileName);\r\n    expectedTrackOutput =\r\n        TestUtil.extractAllSamplesFromFile(\r\n                createAmrExtractor(), RuntimeEnvironment.application, fileName)\r\n            .trackOutputs\r\n            .get(0);\r\n    AmrExtractor extractor = createAmrExtractor();\r\n\r\n    FakeExtractorOutput extractorOutput = new FakeExtractorOutput();\r\n    SeekMap seekMap = TestUtil.extractSeekMap(extractor, extractorOutput, dataSource, fileUri);\r\n    FakeTrackOutput trackOutput = extractorOutput.trackOutputs.get(0);\r\n\r\n    long firstSeekTimeUs = 980_000;\r\n    TestUtil.seekToTimeUs(extractor, seekMap, firstSeekTimeUs, dataSource, trackOutput, fileUri);\r\n\r\n    long targetSeekTimeUs = 0;\r\n    int extractedFrameIndex =\r\n        TestUtil.seekToTimeUs(\r\n            extractor, seekMap, targetSeekTimeUs, dataSource, trackOutput, fileUri);\r\n\r\n    assertThat(extractedFrameIndex).isNotEqualTo(-1);\r\n    assertFirstFrameAfterSeekContainTargetSeekTime(\r\n        trackOutput, targetSeekTimeUs, extractedFrameIndex);', 100, 2, NULL, '2019-02-28 18:34:54', '2019-02-28 18:34:54', NULL),
(418, 'testSeeking_handlesSeekingForward_extractsCorrectFrames_forNarrowBandAmr', 'String fileName = NARROW_BAND_AMR_FILE;\r\n    Uri fileUri = TestUtil.buildAssetUri(fileName);\r\n    expectedTrackOutput =\r\n        TestUtil.extractAllSamplesFromFile(\r\n                createAmrExtractor(), RuntimeEnvironment.application, fileName)\r\n            .trackOutputs\r\n            .get(0);\r\n    AmrExtractor extractor = createAmrExtractor();\r\n\r\n    FakeExtractorOutput extractorOutput = new FakeExtractorOutput();\r\n    SeekMap seekMap = TestUtil.extractSeekMap(extractor, extractorOutput, dataSource, fileUri);\r\n    FakeTrackOutput trackOutput = extractorOutput.trackOutputs.get(0);\r\n\r\n    long firstSeekTimeUs = 980_000;\r\n    TestUtil.seekToTimeUs(extractor, seekMap, firstSeekTimeUs, dataSource, trackOutput, fileUri);\r\n\r\n    long targetSeekTimeUs = 1_200_000;\r\n    int extractedFrameIndex =\r\n        TestUtil.seekToTimeUs(\r\n            extractor, seekMap, targetSeekTimeUs, dataSource, trackOutput, fileUri);\r\n\r\n    assertThat(extractedFrameIndex).isNotEqualTo(-1);\r\n    assertFirstFrameAfterSeekContainTargetSeekTime(\r\n        trackOutput, targetSeekTimeUs, extractedFrameIndex);', 100, 2, NULL, '2019-02-28 18:35:09', '2019-02-28 18:35:09', NULL),
(419, 'testSeeking_handlesRandomSeeks_extractsCorrectFrames_forNarrowBandAmr', 'String fileName = NARROW_BAND_AMR_FILE;\r\n    Uri fileUri = TestUtil.buildAssetUri(fileName);\r\n    expectedTrackOutput =\r\n        TestUtil.extractAllSamplesFromFile(\r\n                createAmrExtractor(), RuntimeEnvironment.application, fileName)\r\n            .trackOutputs\r\n            .get(0);\r\n    AmrExtractor extractor = createAmrExtractor();\r\n\r\n    FakeExtractorOutput extractorOutput = new FakeExtractorOutput();\r\n    SeekMap seekMap = TestUtil.extractSeekMap(extractor, extractorOutput, dataSource, fileUri);\r\n    FakeTrackOutput trackOutput = extractorOutput.trackOutputs.get(0);\r\n\r\n    long numSeek = 100;\r\n    for (long i = 0; i < numSeek; i++) {\r\n      long targetSeekTimeUs = random.nextInt(NARROW_BAND_FILE_DURATION_US + 1);\r\n      int extractedFrameIndex =\r\n          TestUtil.seekToTimeUs(\r\n              extractor, seekMap, targetSeekTimeUs, dataSource, trackOutput, fileUri);\r\n\r\n      assertThat(extractedFrameIndex).isNotEqualTo(-1);\r\n      assertFirstFrameAfterSeekContainTargetSeekTime(\r\n          trackOutput, targetSeekTimeUs, extractedFrameIndex);\r\n    }', 100, 200, NULL, '2019-02-28 18:35:46', '2019-02-28 18:35:46', NULL);
INSERT INTO `test_codes` (`id`, `method_name`, `method_body`, `test_code_class_id`, `assert_count`, `deleted_at`, `created_at`, `updated_at`, `source_codes`) VALUES
(420, 'testAmrExtractorReads_returnSeekableSeekMap_forWideBandAmr', 'String fileName = WIDE_BAND_AMR_FILE;\r\n    Uri fileUri = TestUtil.buildAssetUri(fileName);\r\n    expectedTrackOutput =\r\n        TestUtil.extractAllSamplesFromFile(\r\n                createAmrExtractor(), RuntimeEnvironment.application, fileName)\r\n            .trackOutputs\r\n            .get(0);\r\n\r\n    AmrExtractor extractor = createAmrExtractor();\r\n    SeekMap seekMap =\r\n        TestUtil.extractSeekMap(extractor, new FakeExtractorOutput(), dataSource, fileUri);\r\n\r\n    assertThat(seekMap).isNotNull();\r\n    assertThat(seekMap.getDurationUs()).isEqualTo(WIDE_BAND_FILE_DURATION_US);\r\n    assertThat(seekMap.isSeekable()).isTrue();', 100, 3, NULL, '2019-02-28 18:36:03', '2019-02-28 18:36:03', NULL),
(421, 'testSeeking_handlesSeekingToPositionInFile_extractsCorrectFrame_forWideBandAmr', 'String fileName = WIDE_BAND_AMR_FILE;\r\n    Uri fileUri = TestUtil.buildAssetUri(fileName);\r\n    expectedTrackOutput =\r\n        TestUtil.extractAllSamplesFromFile(\r\n                createAmrExtractor(), RuntimeEnvironment.application, fileName)\r\n            .trackOutputs\r\n            .get(0);\r\n\r\n    AmrExtractor extractor = createAmrExtractor();\r\n\r\n    FakeExtractorOutput extractorOutput = new FakeExtractorOutput();\r\n    SeekMap seekMap = TestUtil.extractSeekMap(extractor, extractorOutput, dataSource, fileUri);\r\n    FakeTrackOutput trackOutput = extractorOutput.trackOutputs.get(0);\r\n\r\n    long targetSeekTimeUs = 980_000;\r\n    int extractedFrameIndex =\r\n        TestUtil.seekToTimeUs(\r\n            extractor, seekMap, targetSeekTimeUs, dataSource, trackOutput, fileUri);\r\n\r\n    assertThat(extractedFrameIndex).isNotEqualTo(-1);\r\n    assertFirstFrameAfterSeekContainTargetSeekTime(\r\n        trackOutput, targetSeekTimeUs, extractedFrameIndex);', 100, 2, NULL, '2019-02-28 18:36:17', '2019-02-28 18:36:17', NULL),
(422, 'testSeeking_handlesSeekToEoF_extractsLastFrame_forWideBandAmr', 'String fileName = WIDE_BAND_AMR_FILE;\r\n    Uri fileUri = TestUtil.buildAssetUri(fileName);\r\n    expectedTrackOutput =\r\n        TestUtil.extractAllSamplesFromFile(\r\n                createAmrExtractor(), RuntimeEnvironment.application, fileName)\r\n            .trackOutputs\r\n            .get(0);\r\n    AmrExtractor extractor = createAmrExtractor();\r\n\r\n    FakeExtractorOutput extractorOutput = new FakeExtractorOutput();\r\n    SeekMap seekMap = TestUtil.extractSeekMap(extractor, extractorOutput, dataSource, fileUri);\r\n    FakeTrackOutput trackOutput = extractorOutput.trackOutputs.get(0);\r\n\r\n    long targetSeekTimeUs = seekMap.getDurationUs();\r\n\r\n    int extractedFrameIndex =\r\n        TestUtil.seekToTimeUs(\r\n            extractor, seekMap, targetSeekTimeUs, dataSource, trackOutput, fileUri);\r\n\r\n    assertThat(extractedFrameIndex).isNotEqualTo(-1);\r\n    assertFirstFrameAfterSeekContainTargetSeekTime(\r\n        trackOutput, targetSeekTimeUs, extractedFrameIndex);', 100, 2, NULL, '2019-02-28 18:36:30', '2019-02-28 18:36:30', NULL),
(423, 'testSeeking_handlesSeekingBackward_extractsCorrectFrames_forWideBandAmr', 'String fileName = WIDE_BAND_AMR_FILE;\r\n    Uri fileUri = TestUtil.buildAssetUri(fileName);\r\n    expectedTrackOutput =\r\n        TestUtil.extractAllSamplesFromFile(\r\n                createAmrExtractor(), RuntimeEnvironment.application, fileName)\r\n            .trackOutputs\r\n            .get(0);\r\n    AmrExtractor extractor = createAmrExtractor();\r\n\r\n    FakeExtractorOutput extractorOutput = new FakeExtractorOutput();\r\n    SeekMap seekMap = TestUtil.extractSeekMap(extractor, extractorOutput, dataSource, fileUri);\r\n    FakeTrackOutput trackOutput = extractorOutput.trackOutputs.get(0);\r\n\r\n    long firstSeekTimeUs = 980_000;\r\n    TestUtil.seekToTimeUs(extractor, seekMap, firstSeekTimeUs, dataSource, trackOutput, fileUri);\r\n\r\n    long targetSeekTimeUs = 0;\r\n    int extractedFrameIndex =\r\n        TestUtil.seekToTimeUs(\r\n            extractor, seekMap, targetSeekTimeUs, dataSource, trackOutput, fileUri);\r\n\r\n    assertThat(extractedFrameIndex).isNotEqualTo(-1);\r\n    assertFirstFrameAfterSeekContainTargetSeekTime(\r\n        trackOutput, targetSeekTimeUs, extractedFrameIndex);', 100, 2, NULL, '2019-02-28 18:36:42', '2019-02-28 18:36:42', NULL),
(424, 'testSeeking_handlesSeekingForward_extractsCorrectFrames_forWideBandAmr', 'String fileName = WIDE_BAND_AMR_FILE;\r\n    Uri fileUri = TestUtil.buildAssetUri(fileName);\r\n    expectedTrackOutput =\r\n        TestUtil.extractAllSamplesFromFile(\r\n                createAmrExtractor(), RuntimeEnvironment.application, fileName)\r\n            .trackOutputs\r\n            .get(0);\r\n    AmrExtractor extractor = createAmrExtractor();\r\n\r\n    FakeExtractorOutput extractorOutput = new FakeExtractorOutput();\r\n    SeekMap seekMap = TestUtil.extractSeekMap(extractor, extractorOutput, dataSource, fileUri);\r\n    FakeTrackOutput trackOutput = extractorOutput.trackOutputs.get(0);\r\n\r\n    long firstSeekTimeUs = 980_000;\r\n    TestUtil.seekToTimeUs(extractor, seekMap, firstSeekTimeUs, dataSource, trackOutput, fileUri);\r\n\r\n    long targetSeekTimeUs = 1_200_000;\r\n    int extractedFrameIndex =\r\n        TestUtil.seekToTimeUs(\r\n            extractor, seekMap, targetSeekTimeUs, dataSource, trackOutput, fileUri);\r\n\r\n    assertThat(extractedFrameIndex).isNotEqualTo(-1);\r\n    assertFirstFrameAfterSeekContainTargetSeekTime(\r\n        trackOutput, targetSeekTimeUs, extractedFrameIndex);', 100, 2, NULL, '2019-02-28 18:36:54', '2019-02-28 18:36:54', NULL),
(425, 'testSeeking_handlesRandomSeeks_extractsCorrectFrames_forWideBandAmr', 'String fileName = WIDE_BAND_AMR_FILE;\r\n    Uri fileUri = TestUtil.buildAssetUri(fileName);\r\n    expectedTrackOutput =\r\n        TestUtil.extractAllSamplesFromFile(\r\n                createAmrExtractor(), RuntimeEnvironment.application, fileName)\r\n            .trackOutputs\r\n            .get(0);\r\n    AmrExtractor extractor = createAmrExtractor();\r\n\r\n    FakeExtractorOutput extractorOutput = new FakeExtractorOutput();\r\n    SeekMap seekMap = TestUtil.extractSeekMap(extractor, extractorOutput, dataSource, fileUri);\r\n    FakeTrackOutput trackOutput = extractorOutput.trackOutputs.get(0);\r\n\r\n    long numSeek = 100;\r\n    for (long i = 0; i < numSeek; i++) {\r\n      long targetSeekTimeUs = random.nextInt(NARROW_BAND_FILE_DURATION_US + 1);\r\n      int extractedFrameIndex =\r\n          TestUtil.seekToTimeUs(\r\n              extractor, seekMap, targetSeekTimeUs, dataSource, trackOutput, fileUri);\r\n\r\n      assertThat(extractedFrameIndex).isNotEqualTo(-1);\r\n      assertFirstFrameAfterSeekContainTargetSeekTime(\r\n          trackOutput, targetSeekTimeUs, extractedFrameIndex);\r\n    }', 100, 200, NULL, '2019-02-28 18:37:12', '2019-02-28 18:37:12', NULL),
(426, 'testSniff_nonAmrSignature_returnFalse', 'AmrExtractor amrExtractor = setupAmrExtractorWithOutput();\r\n    FakeExtractorInput input = fakeExtractorInputWithData(Util.getUtf8Bytes(\"0#!AMR\\n123\"));\r\n\r\n    boolean result = amrExtractor.sniff(input);\r\n    assertThat(result).isFalse();', 101, 1, NULL, '2019-02-28 18:39:34', '2019-02-28 18:39:34', NULL),
(427, 'testRead_nonAmrSignature_throwParserException', 'AmrExtractor amrExtractor = setupAmrExtractorWithOutput();\r\n    FakeExtractorInput input = fakeExtractorInputWithData(Util.getUtf8Bytes(\"0#!AMR-WB\\n\"));\r\n\r\n    try {\r\n      amrExtractor.read(input, new PositionHolder());\r\n      fail();\r\n    } catch (ParserException e) {\r\n      // expected\r\n    }', 101, 0, NULL, '2019-02-28 18:39:50', '2019-02-28 18:39:50', NULL),
(428, 'testRead_amrNb_returnParserException_forInvalidFrameType', 'AmrExtractor amrExtractor = setupAmrExtractorWithOutput();\r\n\r\n    // Frame type 12-14 for narrow band is reserved for future usage.\r\n    byte[] amrFrame = newNarrowBandAmrFrameWithType(12);\r\n    byte[] data = joinData(amrSignatureNb(), amrFrame);\r\n    FakeExtractorInput input = fakeExtractorInputWithData(data);\r\n\r\n    try {\r\n      amrExtractor.read(input, new PositionHolder());\r\n      fail();\r\n    } catch (ParserException e) {\r\n      // expected\r\n    }', 101, 0, NULL, '2019-02-28 18:40:03', '2019-02-28 18:40:03', NULL),
(429, 'testRead_amrWb_returnParserException_forInvalidFrameType', 'AmrExtractor amrExtractor = setupAmrExtractorWithOutput();\r\n\r\n    // Frame type 10-13 for wide band is reserved for future usage.\r\n    byte[] amrFrame = newWideBandAmrFrameWithType(13);\r\n    byte[] data = joinData(amrSignatureWb(), amrFrame);\r\n    FakeExtractorInput input = fakeExtractorInputWithData(data);\r\n\r\n    try {\r\n      amrExtractor.read(input, new PositionHolder());\r\n      fail();\r\n    } catch (ParserException e) {\r\n      // expected\r\n    }', 101, 0, NULL, '2019-02-28 18:40:16', '2019-02-28 18:40:16', NULL),
(430, 'testRead_amrNb_returnEndOfInput_ifInputEncountersEoF', 'AmrExtractor amrExtractor = setupAmrExtractorWithOutput();\r\n\r\n    byte[] amrFrame = newNarrowBandAmrFrameWithType(3);\r\n    byte[] data = joinData(amrSignatureNb(), amrFrame);\r\n    FakeExtractorInput input = fakeExtractorInputWithData(data);\r\n\r\n    // Read 1st frame, which will put the input at EoF.\r\n    amrExtractor.read(input, new PositionHolder());\r\n\r\n    int result = amrExtractor.read(input, new PositionHolder());\r\n    assertThat(result).isEqualTo(Extractor.RESULT_END_OF_INPUT);', 101, 1, NULL, '2019-02-28 18:40:30', '2019-02-28 18:40:30', NULL),
(431, 'testRead_amrWb_returnEndOfInput_ifInputEncountersEoF', 'AmrExtractor amrExtractor = setupAmrExtractorWithOutput();\r\n\r\n    byte[] amrFrame = newWideBandAmrFrameWithType(5);\r\n    byte[] data = joinData(amrSignatureWb(), amrFrame);\r\n    FakeExtractorInput input = fakeExtractorInputWithData(data);\r\n\r\n    // Read 1st frame, which will put the input at EoF.\r\n    amrExtractor.read(input, new PositionHolder());\r\n\r\n    int result = amrExtractor.read(input, new PositionHolder());\r\n    assertThat(result).isEqualTo(Extractor.RESULT_END_OF_INPUT);', 101, 1, NULL, '2019-02-28 18:40:42', '2019-02-28 18:40:42', NULL),
(432, 'testRead_amrNb_returnParserException_forInvalidFrameHeader', 'AmrExtractor amrExtractor = setupAmrExtractorWithOutput();\r\n\r\n    byte[] invalidHeaderFrame = newNarrowBandAmrFrameWithType(4);\r\n\r\n    // The padding bits are at bit-1 positions in the following pattern: 1000 0011\r\n    // Padding bits must be 0.\r\n    invalidHeaderFrame[0] = (byte) (invalidHeaderFrame[0] | 0b01111101);\r\n\r\n    byte[] data = joinData(amrSignatureNb(), invalidHeaderFrame);\r\n    FakeExtractorInput input = fakeExtractorInputWithData(data);\r\n\r\n    try {\r\n      amrExtractor.read(input, new PositionHolder());\r\n      fail();\r\n    } catch (ParserException e) {\r\n      // expected\r\n    }', 101, 0, NULL, '2019-02-28 18:40:56', '2019-02-28 18:40:56', NULL),
(433, 'testRead_amrWb_returnParserException_forInvalidFrameHeader', 'AmrExtractor amrExtractor = setupAmrExtractorWithOutput();\r\n\r\n    byte[] invalidHeaderFrame = newWideBandAmrFrameWithType(6);\r\n\r\n    // The padding bits are at bit-1 positions in the following pattern: 1000 0011\r\n    // Padding bits must be 0.\r\n    invalidHeaderFrame[0] = (byte) (invalidHeaderFrame[0] | 0b01111110);\r\n\r\n    byte[] data = joinData(amrSignatureWb(), invalidHeaderFrame);\r\n    FakeExtractorInput input = fakeExtractorInputWithData(data);\r\n\r\n    try {\r\n      amrExtractor.read(input, new PositionHolder());\r\n      fail();\r\n    } catch (ParserException e) {\r\n      // expected\r\n    }', 101, 0, NULL, '2019-02-28 18:41:07', '2019-02-28 18:41:07', NULL),
(434, 'testExtractingNarrowBandSamples', 'ExtractorAsserts.assertBehavior(\r\n        createAmrExtractorFactory(/* withSeeking= */ false), \"amr/sample_nb.amr\");', 101, 1, NULL, '2019-02-28 18:43:54', '2019-02-28 18:43:54', NULL),
(435, 'testExtractingWideBandSamples', 'ExtractorAsserts.assertBehavior(\r\n        createAmrExtractorFactory(/* withSeeking= */ false), \"amr/sample_wb.amr\");', 101, 1, NULL, '2019-02-28 18:44:06', '2019-02-28 18:44:06', NULL),
(436, 'testExtractingNarrowBandSamples_withSeeking', 'ExtractorAsserts.assertBehavior(\r\n        createAmrExtractorFactory(/* withSeeking= */ true), \"amr/sample_nb_cbr.amr\");', 101, 1, NULL, '2019-02-28 18:44:19', '2019-02-28 18:44:19', NULL),
(437, 'testExtractingWideBandSamples_withSeeking', 'ExtractorAsserts.assertBehavior(\r\n        createAmrExtractorFactory(/* withSeeking= */ true), \"amr/sample_wb_cbr.amr\");', 101, 1, NULL, '2019-02-28 18:44:33', '2019-02-28 18:44:33', NULL),
(438, 'testSample', 'ExtractorAsserts.assertBehavior(FlvExtractor::new, \"flv/sample.flv\");', 102, 1, NULL, '2019-02-28 18:45:59', '2019-02-28 18:45:59', NULL),
(439, 'testMasterElement', 'ExtractorInput input = createTestInput(0x1A, 0x45, 0xDF, 0xA3, 0x84, 0x42, 0x85, 0x81, 0x01);\r\n    TestOutput expected = new TestOutput();\r\n    expected.startMasterElement(TestOutput.ID_EBML, 5, 4);\r\n    expected.integerElement(TestOutput.ID_DOC_TYPE_READ_VERSION, 1);\r\n    expected.endMasterElement(TestOutput.ID_EBML);\r\n    assertEvents(input, expected.events);', 103, 4, NULL, '2019-03-01 02:41:07', '2019-03-01 02:41:07', NULL),
(440, 'testMasterElementEmpty', 'ExtractorInput input = createTestInput(0x18, 0x53, 0x80, 0x67, 0x80);\r\n    TestOutput expected = new TestOutput();\r\n    expected.startMasterElement(TestOutput.ID_SEGMENT, 5, 0);\r\n    expected.endMasterElement(TestOutput.ID_SEGMENT);\r\n    assertEvents(input, expected.events);', 103, 4, NULL, '2019-03-01 02:41:29', '2019-03-01 02:41:29', NULL),
(441, 'testUnsignedIntegerElement', '// 0xFE is chosen because for signed integers it should be interpreted as -2\r\n    ExtractorInput input = createTestInput(0x42, 0xF7, 0x81, 0xFE);\r\n    TestOutput expected = new TestOutput();\r\n    expected.integerElement(TestOutput.ID_EBML_READ_VERSION, 254);\r\n    assertEvents(input, expected.events);', 103, 4, NULL, '2019-03-01 02:41:43', '2019-03-01 02:41:43', NULL),
(442, 'testUnsignedIntegerElementLarge', 'ExtractorInput input =\r\n        createTestInput(0x42, 0xF7, 0x88, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);\r\n    TestOutput expected = new TestOutput();\r\n    expected.integerElement(TestOutput.ID_EBML_READ_VERSION, Long.MAX_VALUE);\r\n    assertEvents(input, expected.events);', 103, 4, NULL, '2019-03-01 02:42:09', '2019-03-01 02:42:09', NULL),
(443, 'testUnsignedIntegerElementTooLargeBecomesNegative', 'ExtractorInput input =\r\n        createTestInput(0x42, 0xF7, 0x88, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);\r\n    TestOutput expected = new TestOutput();\r\n    expected.integerElement(TestOutput.ID_EBML_READ_VERSION, -1);\r\n    assertEvents(input, expected.events);', 103, 4, NULL, '2019-03-01 02:42:32', '2019-03-01 02:42:32', NULL),
(444, 'testStringElement', 'ExtractorInput input = createTestInput(0x42, 0x82, 0x86, 0x41, 0x62, 0x63, 0x31, 0x32, 0x33);\r\n    TestOutput expected = new TestOutput();\r\n    expected.stringElement(TestOutput.ID_DOC_TYPE, \"Abc123\");\r\n    assertEvents(input, expected.events);', 103, 4, NULL, '2019-03-01 02:42:53', '2019-03-01 02:42:53', NULL),
(445, 'testStringElementWithZeroPadding', 'ExtractorInput input = createTestInput(0x42, 0x82, 0x86, 0x41, 0x62, 0x63, 0x00, 0x00, 0x00);\r\n    TestOutput expected = new TestOutput();\r\n    expected.stringElement(TestOutput.ID_DOC_TYPE, \"Abc\");\r\n    assertEvents(input, expected.events);', 103, 4, NULL, '2019-03-01 02:43:12', '2019-03-01 02:43:12', NULL),
(446, 'testStringElementEmpty', 'ExtractorInput input = createTestInput(0x42, 0x82, 0x80);\r\n    TestOutput expected = new TestOutput();\r\n    expected.stringElement(TestOutput.ID_DOC_TYPE, \"\");\r\n    assertEvents(input, expected.events);', 103, 4, NULL, '2019-03-01 02:43:24', '2019-03-01 02:43:24', NULL),
(447, 'testFloatElementFourBytes', 'ExtractorInput input =\r\n        createTestInput(0x44, 0x89, 0x84, 0x3F, 0x80, 0x00, 0x00);\r\n    TestOutput expected = new TestOutput();\r\n    expected.floatElement(TestOutput.ID_DURATION, 1.0);\r\n    assertEvents(input, expected.events);', 103, 4, NULL, '2019-03-01 02:43:37', '2019-03-01 02:43:37', NULL),
(448, 'testFloatElementEightBytes', 'ExtractorInput input =\r\n        createTestInput(0x44, 0x89, 0x88, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);\r\n    TestOutput expected = new TestOutput();\r\n    expected.floatElement(TestOutput.ID_DURATION, -2.0);\r\n    assertEvents(input, expected.events);', 103, 4, NULL, '2019-03-01 02:43:54', '2019-03-01 02:43:54', NULL),
(449, 'testBinaryElement', 'ExtractorInput input =\r\n        createTestInput(0xA3, 0x88, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08);\r\n    TestOutput expected = new TestOutput();\r\n    expected.binaryElement(TestOutput.ID_SIMPLE_BLOCK, 8,\r\n        createTestInput(0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08));\r\n    assertEvents(input, expected.events);', 103, 11, NULL, '2019-03-01 02:45:02', '2019-03-01 02:45:02', NULL),
(450, 'testMkvSample', 'ExtractorAsserts.assertBehavior(MatroskaExtractor::new, \"mkv/sample.mkv\");', 104, 1, NULL, '2019-03-01 02:50:47', '2019-03-01 02:50:47', NULL),
(451, 'testWebmSubsampleEncryption', 'ExtractorAsserts.assertBehavior(\r\n        MatroskaExtractor::new, \"mkv/subsample_encrypted_noaltref.webm\");', 104, 1, NULL, '2019-03-01 02:50:59', '2019-03-01 02:50:59', NULL),
(452, 'testWebmSubsampleEncryptionWithAltrefFrames', 'ExtractorAsserts.assertBehavior(MatroskaExtractor::new, \"mkv/subsample_encrypted_altref.webm\");', 104, 1, NULL, '2019-03-01 02:51:11', '2019-03-01 02:51:11', NULL),
(453, 'testReadVarintEndOfInputAtStart', 'VarintReader reader = new VarintReader();\r\n    // Build an input with no data.\r\n    ExtractorInput input = new FakeExtractorInput.Builder()\r\n        .setSimulateUnknownLength(true)\r\n        .build();\r\n    // End of input allowed.\r\n    long result = reader.readUnsignedVarint(input, true, false, 8);\r\n    assertThat(result).isEqualTo(RESULT_END_OF_INPUT);\r\n    // End of input not allowed.\r\n    try {\r\n      reader.readUnsignedVarint(input, false, false, 8);\r\n      fail();\r\n    } catch (EOFException e) {\r\n      // Expected.\r\n    }', 105, 1, NULL, '2019-03-01 02:53:14', '2019-03-01 02:53:14', NULL),
(454, 'testReadVarintExceedsMaximumAllowedLength', 'VarintReader reader = new VarintReader();\r\n    ExtractorInput input = new FakeExtractorInput.Builder()\r\n        .setData(DATA_8_BYTE_0)\r\n        .setSimulateUnknownLength(true)\r\n        .build();\r\n    long result = reader.readUnsignedVarint(input, false, true, 4);\r\n    assertThat(result).isEqualTo(RESULT_MAX_LENGTH_EXCEEDED);', 105, 1, NULL, '2019-03-01 02:53:28', '2019-03-01 02:53:28', NULL),
(455, 'testReadVarint', 'VarintReader reader = new VarintReader();\r\n    testReadVarint(reader, true, DATA_1_BYTE_0, 1, 0);\r\n    testReadVarint(reader, true, DATA_2_BYTE_0, 2, 0);\r\n    testReadVarint(reader, true, DATA_3_BYTE_0, 3, 0);\r\n    testReadVarint(reader, true, DATA_4_BYTE_0, 4, 0);\r\n    testReadVarint(reader, true, DATA_5_BYTE_0, 5, 0);\r\n    testReadVarint(reader, true, DATA_6_BYTE_0, 6, 0);\r\n    testReadVarint(reader, true, DATA_7_BYTE_0, 7, 0);\r\n    testReadVarint(reader, true, DATA_8_BYTE_0, 8, 0);\r\n    testReadVarint(reader, true, DATA_1_BYTE_64, 1, 64);\r\n    testReadVarint(reader, true, DATA_2_BYTE_64, 2, 64);\r\n    testReadVarint(reader, true, DATA_3_BYTE_64, 3, 64);\r\n    testReadVarint(reader, true, DATA_4_BYTE_64, 4, 64);\r\n    testReadVarint(reader, true, DATA_5_BYTE_64, 5, 64);\r\n    testReadVarint(reader, true, DATA_6_BYTE_64, 6, 64);\r\n    testReadVarint(reader, true, DATA_7_BYTE_64, 7, 64);\r\n    testReadVarint(reader, true, DATA_8_BYTE_64, 8, 64);\r\n    testReadVarint(reader, true, DATA_1_BYTE_MAX, 1, VALUE_1_BYTE_MAX);\r\n    testReadVarint(reader, true, DATA_2_BYTE_MAX, 2, VALUE_2_BYTE_MAX);\r\n    testReadVarint(reader, true, DATA_3_BYTE_MAX, 3, VALUE_3_BYTE_MAX);\r\n    testReadVarint(reader, true, DATA_4_BYTE_MAX, 4, VALUE_4_BYTE_MAX);\r\n    testReadVarint(reader, true, DATA_5_BYTE_MAX, 5, VALUE_5_BYTE_MAX);\r\n    testReadVarint(reader, true, DATA_6_BYTE_MAX, 6, VALUE_6_BYTE_MAX);\r\n    testReadVarint(reader, true, DATA_7_BYTE_MAX, 7, VALUE_7_BYTE_MAX);\r\n    testReadVarint(reader, true, DATA_8_BYTE_MAX, 8, VALUE_8_BYTE_MAX);\r\n    testReadVarint(reader, false, DATA_1_BYTE_MAX, 1, VALUE_1_BYTE_MAX_WITH_MASK);\r\n    testReadVarint(reader, false, DATA_2_BYTE_MAX, 2, VALUE_2_BYTE_MAX_WITH_MASK);\r\n    testReadVarint(reader, false, DATA_3_BYTE_MAX, 3, VALUE_3_BYTE_MAX_WITH_MASK);\r\n    testReadVarint(reader, false, DATA_4_BYTE_MAX, 4, VALUE_4_BYTE_MAX_WITH_MASK);\r\n    testReadVarint(reader, false, DATA_5_BYTE_MAX, 5, VALUE_5_BYTE_MAX_WITH_MASK);\r\n    testReadVarint(reader, false, DATA_6_BYTE_MAX, 6, VALUE_6_BYTE_MAX_WITH_MASK);\r\n    testReadVarint(reader, false, DATA_7_BYTE_MAX, 7, VALUE_7_BYTE_MAX_WITH_MASK);\r\n    testReadVarint(reader, false, DATA_8_BYTE_MAX, 8, VALUE_8_BYTE_MAX_WITH_MASK);', 105, 64, NULL, '2019-03-01 02:54:19', '2019-03-01 02:54:19', NULL),
(456, 'testReadVarintFlaky', 'VarintReader reader = new VarintReader();\r\n    testReadVarintFlaky(reader, true, DATA_1_BYTE_0, 1, 0);\r\n    testReadVarintFlaky(reader, true, DATA_2_BYTE_0, 2, 0);\r\n    testReadVarintFlaky(reader, true, DATA_3_BYTE_0, 3, 0);\r\n    testReadVarintFlaky(reader, true, DATA_4_BYTE_0, 4, 0);\r\n    testReadVarintFlaky(reader, true, DATA_5_BYTE_0, 5, 0);\r\n    testReadVarintFlaky(reader, true, DATA_6_BYTE_0, 6, 0);\r\n    testReadVarintFlaky(reader, true, DATA_7_BYTE_0, 7, 0);\r\n    testReadVarintFlaky(reader, true, DATA_8_BYTE_0, 8, 0);\r\n    testReadVarintFlaky(reader, true, DATA_1_BYTE_64, 1, 64);\r\n    testReadVarintFlaky(reader, true, DATA_2_BYTE_64, 2, 64);\r\n    testReadVarintFlaky(reader, true, DATA_3_BYTE_64, 3, 64);\r\n    testReadVarintFlaky(reader, true, DATA_4_BYTE_64, 4, 64);\r\n    testReadVarintFlaky(reader, true, DATA_5_BYTE_64, 5, 64);\r\n    testReadVarintFlaky(reader, true, DATA_6_BYTE_64, 6, 64);\r\n    testReadVarintFlaky(reader, true, DATA_7_BYTE_64, 7, 64);\r\n    testReadVarintFlaky(reader, true, DATA_8_BYTE_64, 8, 64);\r\n    testReadVarintFlaky(reader, true, DATA_1_BYTE_MAX, 1, VALUE_1_BYTE_MAX);\r\n    testReadVarintFlaky(reader, true, DATA_2_BYTE_MAX, 2, VALUE_2_BYTE_MAX);\r\n    testReadVarintFlaky(reader, true, DATA_3_BYTE_MAX, 3, VALUE_3_BYTE_MAX);\r\n    testReadVarintFlaky(reader, true, DATA_4_BYTE_MAX, 4, VALUE_4_BYTE_MAX);\r\n    testReadVarintFlaky(reader, true, DATA_5_BYTE_MAX, 5, VALUE_5_BYTE_MAX);\r\n    testReadVarintFlaky(reader, true, DATA_6_BYTE_MAX, 6, VALUE_6_BYTE_MAX);\r\n    testReadVarintFlaky(reader, true, DATA_7_BYTE_MAX, 7, VALUE_7_BYTE_MAX);\r\n    testReadVarintFlaky(reader, true, DATA_8_BYTE_MAX, 8, VALUE_8_BYTE_MAX);\r\n    testReadVarintFlaky(reader, false, DATA_1_BYTE_MAX, 1, VALUE_1_BYTE_MAX_WITH_MASK);\r\n    testReadVarintFlaky(reader, false, DATA_2_BYTE_MAX, 2, VALUE_2_BYTE_MAX_WITH_MASK);\r\n    testReadVarintFlaky(reader, false, DATA_3_BYTE_MAX, 3, VALUE_3_BYTE_MAX_WITH_MASK);\r\n    testReadVarintFlaky(reader, false, DATA_4_BYTE_MAX, 4, VALUE_4_BYTE_MAX_WITH_MASK);\r\n    testReadVarintFlaky(reader, false, DATA_5_BYTE_MAX, 5, VALUE_5_BYTE_MAX_WITH_MASK);\r\n    testReadVarintFlaky(reader, false, DATA_6_BYTE_MAX, 6, VALUE_6_BYTE_MAX_WITH_MASK);\r\n    testReadVarintFlaky(reader, false, DATA_7_BYTE_MAX, 7, VALUE_7_BYTE_MAX_WITH_MASK);\r\n    testReadVarintFlaky(reader, false, DATA_8_BYTE_MAX, 8, VALUE_8_BYTE_MAX_WITH_MASK);', 105, 64, NULL, '2019-03-01 02:54:41', '2019-03-01 02:54:41', NULL),
(457, 'testMp3Sample', 'ExtractorAsserts.assertBehavior(Mp3Extractor::new, \"mp3/bear.mp3\");', 106, 1, NULL, '2019-03-01 02:55:55', '2019-03-01 02:55:55', NULL),
(458, 'testTrimmedMp3Sample', 'ExtractorAsserts.assertBehavior(Mp3Extractor::new, \"mp3/play-trimmed.mp3\");', 106, 1, NULL, '2019-03-01 02:56:08', '2019-03-01 02:56:08', NULL),
(459, 'testGetTimeUsBeforeFirstAudioFrame', 'assertThat(seeker.getTimeUs(-1)).isEqualTo(0);\r\n    assertThat(seekerWithInputLength.getTimeUs(-1)).isEqualTo(0);', 107, 2, NULL, '2019-03-01 02:57:59', '2019-03-01 02:57:59', NULL),
(460, 'testGetTimeUsAtFirstAudioFrame', 'assertThat(seeker.getTimeUs(XING_FRAME_POSITION + xingFrameSize)).isEqualTo(0);\r\n    assertThat(seekerWithInputLength.getTimeUs(XING_FRAME_POSITION + xingFrameSize)).isEqualTo(0);', 107, 2, NULL, '2019-03-01 02:58:14', '2019-03-01 02:58:14', NULL),
(461, 'testGetTimeUsAtEndOfStream', 'assertThat(seeker.getTimeUs(STREAM_LENGTH))\r\n        .isEqualTo(STREAM_DURATION_US);\r\n    assertThat(\r\n        seekerWithInputLength.getTimeUs(STREAM_LENGTH))\r\n        .isEqualTo(STREAM_DURATION_US);', 107, 2, NULL, '2019-03-01 02:58:27', '2019-03-01 02:58:27', NULL),
(462, 'testGetSeekPointsAtStartOfStream', 'SeekPoints seekPoints = seeker.getSeekPoints(0);\r\n    SeekPoint seekPoint = seekPoints.first;\r\n    assertThat(seekPoint).isEqualTo(seekPoints.second);\r\n    assertThat(seekPoint.timeUs).isEqualTo(0);\r\n    assertThat(seekPoint.position).isEqualTo(XING_FRAME_POSITION + xingFrameSize);', 107, 3, NULL, '2019-03-01 02:58:44', '2019-03-01 02:58:44', NULL),
(463, 'testGetSeekPointsAtEndOfStream', 'SeekPoints seekPoints = seeker.getSeekPoints(STREAM_DURATION_US);\r\n    SeekPoint seekPoint = seekPoints.first;\r\n    assertThat(seekPoint).isEqualTo(seekPoints.second);\r\n    assertThat(seekPoint.timeUs).isEqualTo(STREAM_DURATION_US);\r\n    assertThat(seekPoint.position).isEqualTo(STREAM_LENGTH - 1);', 107, 3, NULL, '2019-03-01 02:58:57', '2019-03-01 02:58:57', NULL),
(464, 'testGetTimeForAllPositions', 'for (int offset = xingFrameSize; offset < DATA_SIZE_BYTES; offset++) {\r\n      int position = XING_FRAME_POSITION + offset;\r\n      // Test seeker.\r\n      long timeUs = seeker.getTimeUs(position);\r\n      SeekPoints seekPoints = seeker.getSeekPoints(timeUs);\r\n      SeekPoint seekPoint = seekPoints.first;\r\n      assertThat(seekPoint).isEqualTo(seekPoints.second);\r\n      assertThat(seekPoint.position).isEqualTo(position);\r\n      // Test seekerWithInputLength.\r\n      timeUs = seekerWithInputLength.getTimeUs(position);\r\n      seekPoints = seekerWithInputLength.getSeekPoints(timeUs);\r\n      seekPoint = seekPoints.first;\r\n      assertThat(seekPoint).isEqualTo(seekPoints.second);\r\n      assertThat(seekPoint.position).isEqualTo(position);\r\n    }', 107, 3794020, NULL, '2019-03-01 03:02:41', '2019-03-01 03:02:41', NULL),
(465, 'testParseCommonEncryptionSinfFromParentIgnoresUnknownSchemeType', 'byte[] cencSinf = new byte[] {\r\n        0, 0, 0, 24, 115, 105, 110, 102, // size (4), \'sinf\' (4)\r\n        0, 0, 0, 16, 115, 99, 104, 109, // size (4), \'schm\' (4)\r\n        0, 0, 0, 0, 88, 88, 88, 88}; // version (1), flags (3), \'xxxx\' (4)\r\n    assertThat(AtomParsers.parseCommonEncryptionSinfFromParent(\r\n        new ParsableByteArray(cencSinf), 0, cencSinf.length)).isNull();', 108, 1, NULL, '2019-03-01 03:05:59', '2019-03-01 03:05:59', NULL),
(466, 'testStz2Parsing4BitFieldSize', 'verifyStz2Parsing(new Atom.LeafAtom(Atom.TYPE_stsz, new ParsableByteArray(FOUR_BIT_STZ2)));', 108, 8, NULL, '2019-03-01 03:09:53', '2019-03-01 03:09:53', NULL),
(467, 'testStz2Parsing8BitFieldSize', 'verifyStz2Parsing(new Atom.LeafAtom(Atom.TYPE_stsz, new ParsableByteArray(EIGHT_BIT_STZ2)));', 108, 10, NULL, '2019-03-01 03:10:07', '2019-03-01 03:10:07', NULL),
(468, 'testStz2Parsing16BitFieldSize', 'verifyStz2Parsing(new Atom.LeafAtom(Atom.TYPE_stsz, new ParsableByteArray(SIXTEEN_BIT_STZ2)));', 108, 18, NULL, '2019-03-01 03:10:20', '2019-03-01 03:10:20', NULL),
(469, 'testSample', 'ExtractorAsserts.assertBehavior(\r\n        getExtractorFactory(Collections.emptyList()), \"mp4/sample_fragmented.mp4\");', 109, 1, NULL, '2019-03-01 03:12:35', '2019-03-01 03:12:35', NULL),
(470, 'testSampleSeekable', 'ExtractorAsserts.assertBehavior(\r\n        getExtractorFactory(Collections.emptyList()), \"mp4/sample_fragmented_seekable.mp4\");', 109, 1, NULL, '2019-03-01 03:12:58', '2019-03-01 03:12:58', NULL),
(471, 'testSampleWithSeiPayloadParsing', '// Enabling the CEA-608 track enables SEI payload parsing.\r\n    ExtractorFactory extractorFactory =\r\n        getExtractorFactory(\r\n            Collections.singletonList(\r\n                Format.createTextSampleFormat(null, MimeTypes.APPLICATION_CEA608, 0, null)));\r\n    ExtractorAsserts.assertBehavior(extractorFactory, \"mp4/sample_fragmented_sei.mp4\");', 109, 1, NULL, '2019-03-01 03:13:11', '2019-03-01 03:13:11', NULL),
(472, 'testParcelable', 'MdtaMetadataEntry mdtaMetadataEntryToParcel =\r\n        new MdtaMetadataEntry(\"test\", new byte[] {1, 2}, 3, 4);\r\n\r\n    Parcel parcel = Parcel.obtain();\r\n    mdtaMetadataEntryToParcel.writeToParcel(parcel, 0);\r\n    parcel.setDataPosition(0);\r\n\r\n    MdtaMetadataEntry mdtaMetadataEntryFromParcel =\r\n        MdtaMetadataEntry.CREATOR.createFromParcel(parcel);\r\n    assertThat(mdtaMetadataEntryFromParcel).isEqualTo(mdtaMetadataEntryToParcel);\r\n\r\n    parcel.recycle();', 110, 1, NULL, '2019-03-01 03:14:37', '2019-03-01 03:14:37', NULL),
(473, 'testMp4Sample', 'ExtractorAsserts.assertBehavior(Mp4Extractor::new, \"mp4/sample.mp4\");', 111, 1, NULL, '2019-03-01 03:15:33', '2019-03-01 03:15:33', NULL),
(474, 'testBuildPsshAtom', 'byte[] schemeData = new byte[]{0, 1, 2, 3, 4, 5};\r\n    byte[] psshAtom = PsshAtomUtil.buildPsshAtom(C.WIDEVINE_UUID, schemeData);\r\n    // Read the PSSH atom back and assert its content is as expected.\r\n    ParsableByteArray parsablePsshAtom = new ParsableByteArray(psshAtom);\r\n    assertThat(parsablePsshAtom.readUnsignedIntToInt()).isEqualTo(psshAtom.length); // length\r\n    assertThat(parsablePsshAtom.readInt()).isEqualTo(TYPE_pssh); // type\r\n    int fullAtomInt = parsablePsshAtom.readInt(); // version + flags\r\n    assertThat(parseFullAtomVersion(fullAtomInt)).isEqualTo(0);\r\n    assertThat(parseFullAtomFlags(fullAtomInt)).isEqualTo(0);\r\n    UUID systemId = new UUID(parsablePsshAtom.readLong(), parsablePsshAtom.readLong());\r\n    assertThat(systemId).isEqualTo(WIDEVINE_UUID);\r\n    assertThat(parsablePsshAtom.readUnsignedIntToInt()).isEqualTo(schemeData.length);\r\n    byte[] psshSchemeData = new byte[schemeData.length];\r\n    parsablePsshAtom.readBytes(psshSchemeData, 0, schemeData.length);\r\n    assertThat(psshSchemeData).isEqualTo(schemeData);', 112, 7, NULL, '2019-03-01 03:16:42', '2019-03-01 03:16:42', NULL),
(475, 'testSetupWithUnsetEndPositionFails', 'try {\r\n      new DefaultOggSeeker(\r\n          /* startPosition= */ 0,\r\n          /* endPosition= */ C.LENGTH_UNSET,\r\n          /* streamReader= */ new TestStreamReader(),\r\n          /* firstPayloadPageSize= */ 1,\r\n          /* firstPayloadPageGranulePosition= */ 1,\r\n          /* firstPayloadPageIsLastPage= */ false);\r\n      fail();\r\n    } catch (IllegalArgumentException e) {\r\n      // ignored\r\n    }', 113, 0, NULL, '2019-03-01 03:18:49', '2019-03-01 03:18:49', NULL),
(476, 'testSeeking', 'Random random = new Random(0);\r\n    for (int i = 0; i < 100; i++) {\r\n      testSeeking(random);\r\n    }', 113, 100, NULL, '2019-03-01 03:19:10', '2019-03-01 03:19:10', NULL),
(477, 'testSkipToNextPage', 'FakeExtractorInput extractorInput = OggTestData.createInput(\r\n        TestUtil.joinByteArrays(\r\n            TestUtil.buildTestData(4000, random),\r\n            new byte[] {\'O\', \'g\', \'g\', \'S\'},\r\n            TestUtil.buildTestData(4000, random)\r\n        ), false);\r\n    skipToNextPage(extractorInput);\r\n    assertThat(extractorInput.getPosition()).isEqualTo(4000);', 114, 1, NULL, '2019-03-01 03:21:25', '2019-03-01 03:21:25', NULL),
(478, 'testSkipToNextPageOverlap', 'FakeExtractorInput extractorInput = OggTestData.createInput(\r\n        TestUtil.joinByteArrays(\r\n            TestUtil.buildTestData(2046, random),\r\n            new byte[] {\'O\', \'g\', \'g\', \'S\'},\r\n            TestUtil.buildTestData(4000, random)\r\n        ), false);\r\n    skipToNextPage(extractorInput);\r\n    assertThat(extractorInput.getPosition()).isEqualTo(2046);', 114, 1, NULL, '2019-03-01 03:21:38', '2019-03-01 03:21:38', NULL),
(479, 'testSkipToNextPageInputShorterThanPeekLength', 'FakeExtractorInput extractorInput = OggTestData.createInput(\r\n        TestUtil.joinByteArrays(\r\n            new byte[] {\'x\', \'O\', \'g\', \'g\', \'S\'}\r\n        ), false);\r\n    skipToNextPage(extractorInput);\r\n    assertThat(extractorInput.getPosition()).isEqualTo(1);', 114, 1, NULL, '2019-03-01 03:21:49', '2019-03-01 03:21:49', NULL),
(480, 'testSkipToNextPageNoMatch', 'FakeExtractorInput extractorInput = OggTestData.createInput(\r\n        new byte[] {\'g\', \'g\', \'S\', \'O\', \'g\', \'g\'}, false);\r\n    try {\r\n      skipToNextPage(extractorInput);\r\n      fail();\r\n    } catch (EOFException e) {\r\n      // expected\r\n    }', 114, 0, NULL, '2019-03-01 03:22:08', '2019-03-01 03:22:08', NULL),
(481, 'testOpus', 'ExtractorAsserts.assertBehavior(OGG_EXTRACTOR_FACTORY, \"ogg/bear.opus\");', 115, 1, NULL, '2019-03-01 03:23:52', '2019-03-01 03:23:52', NULL),
(482, 'testFlac', 'ExtractorAsserts.assertBehavior(OGG_EXTRACTOR_FACTORY, \"ogg/bear_flac.ogg\");', 115, 1, NULL, '2019-03-01 03:24:02', '2019-03-01 03:24:02', NULL),
(483, 'testFlacNoSeektable', 'ExtractorAsserts.assertBehavior(OGG_EXTRACTOR_FACTORY, \"ogg/bear_flac_noseektable.ogg\");', 115, 1, NULL, '2019-03-01 03:24:16', '2019-03-01 03:24:16', NULL),
(484, 'testVorbis', 'ExtractorAsserts.assertBehavior(OGG_EXTRACTOR_FACTORY, \"ogg/bear_vorbis.ogg\");', 115, 1, NULL, '2019-03-01 03:24:31', '2019-03-01 03:24:31', NULL),
(485, 'testSniffVorbis', 'byte[] data =\r\n        TestUtil.joinByteArrays(\r\n            OggTestData.buildOggHeader(0x02, 0, 1000, 1),\r\n            TestUtil.createByteArray(7), // Laces\r\n            new byte[] {0x01, \'v\', \'o\', \'r\', \'b\', \'i\', \'s\'});\r\n    assertThat(sniff(data)).isTrue();', 115, 1, NULL, '2019-03-01 03:25:51', '2019-03-01 03:25:51', NULL),
(486, 'testSniffFlac', 'byte[] data =\r\n        TestUtil.joinByteArrays(\r\n            OggTestData.buildOggHeader(0x02, 0, 1000, 1),\r\n            TestUtil.createByteArray(5), // Laces\r\n            new byte[] {0x7F, \'F\', \'L\', \'A\', \'C\'});\r\n    assertThat(sniff(data)).isTrue();', 115, 1, NULL, '2019-03-01 03:26:04', '2019-03-01 03:26:04', NULL),
(487, 'testSniffFailsOpusFile', 'byte[] data =\r\n        TestUtil.joinByteArrays(\r\n            OggTestData.buildOggHeader(0x02, 0, 1000, 0x00), new byte[] {\'O\', \'p\', \'u\', \'s\'});\r\n    assertThat(sniff(data)).isFalse();', 115, 1, NULL, '2019-03-01 03:26:19', '2019-03-01 03:26:19', NULL),
(488, 'testSniffFailsInvalidOggHeader', 'byte[] data = OggTestData.buildOggHeader(0x00, 0, 1000, 0x00);\r\n    assertThat(sniff(data)).isFalse();', 115, 1, NULL, '2019-03-01 03:27:13', '2019-03-01 03:27:13', NULL),
(489, 'testSniffInvalidHeader', 'byte[] data =\r\n        TestUtil.joinByteArrays(\r\n            OggTestData.buildOggHeader(0x02, 0, 1000, 1),\r\n            TestUtil.createByteArray(7), // Laces\r\n            new byte[] {0x7F, \'X\', \'o\', \'r\', \'b\', \'i\', \'s\'});\r\n    assertThat(sniff(data)).isFalse();', 115, 1, NULL, '2019-03-01 03:27:25', '2019-03-01 03:27:25', NULL),
(490, 'testSniffFailsEOF', 'byte[] data = OggTestData.buildOggHeader(0x02, 0, 1000, 0x00);\r\n    assertThat(sniff(data)).isFalse();', 115, 1, NULL, '2019-03-01 03:27:36', '2019-03-01 03:27:36', NULL),
(491, 'testReadPacketsWithEmptyPage', 'byte[] firstPacket = TestUtil.buildTestData(8, random);\r\n    byte[] secondPacket = TestUtil.buildTestData(272, random);\r\n    byte[] thirdPacket = TestUtil.buildTestData(256, random);\r\n    byte[] fourthPacket = TestUtil.buildTestData(271, random);\r\n\r\n    FakeExtractorInput input =\r\n        OggTestData.createInput(\r\n            TestUtil.joinByteArrays(\r\n                // First page with a single packet.\r\n                OggTestData.buildOggHeader(0x02, 0, 1000, 0x01),\r\n                TestUtil.createByteArray(0x08), // Laces\r\n                firstPacket,\r\n                // Second page with a single packet.\r\n                OggTestData.buildOggHeader(0x00, 16, 1001, 0x02),\r\n                TestUtil.createByteArray(0xFF, 0x11), // Laces\r\n                secondPacket,\r\n                // Third page with zero packets.\r\n                OggTestData.buildOggHeader(0x00, 16, 1002, 0x00),\r\n                // Fourth page with two packets.\r\n                OggTestData.buildOggHeader(0x04, 128, 1003, 0x04),\r\n                TestUtil.createByteArray(0xFF, 0x01, 0xFF, 0x10), // Laces\r\n                thirdPacket,\r\n                fourthPacket),\r\n            true);\r\n\r\n    assertReadPacket(input, firstPacket);\r\n    assertThat((oggPacket.getPageHeader().type & 0x02) == 0x02).isTrue();\r\n    assertThat((oggPacket.getPageHeader().type & 0x04) == 0x04).isFalse();\r\n    assertThat(oggPacket.getPageHeader().type).isEqualTo(0x02);\r\n    assertThat(oggPacket.getPageHeader().headerSize).isEqualTo(27 + 1);\r\n    assertThat(oggPacket.getPageHeader().bodySize).isEqualTo(8);\r\n    assertThat(oggPacket.getPageHeader().revision).isEqualTo(0x00);\r\n    assertThat(oggPacket.getPageHeader().pageSegmentCount).isEqualTo(1);\r\n    assertThat(oggPacket.getPageHeader().pageSequenceNumber).isEqualTo(1000);\r\n    assertThat(oggPacket.getPageHeader().streamSerialNumber).isEqualTo(4096);\r\n    assertThat(oggPacket.getPageHeader().granulePosition).isEqualTo(0);\r\n\r\n    assertReadPacket(input, secondPacket);\r\n    assertThat((oggPacket.getPageHeader().type & 0x02) == 0x02).isFalse();\r\n    assertThat((oggPacket.getPageHeader().type & 0x04) == 0x04).isFalse();\r\n    assertThat(oggPacket.getPageHeader().type).isEqualTo(0);\r\n    assertThat(oggPacket.getPageHeader().headerSize).isEqualTo(27 + 2);\r\n    assertThat(oggPacket.getPageHeader().bodySize).isEqualTo(255 + 17);\r\n    assertThat(oggPacket.getPageHeader().pageSegmentCount).isEqualTo(2);\r\n    assertThat(oggPacket.getPageHeader().pageSequenceNumber).isEqualTo(1001);\r\n    assertThat(oggPacket.getPageHeader().granulePosition).isEqualTo(16);\r\n\r\n    assertReadPacket(input, thirdPacket);\r\n    assertThat((oggPacket.getPageHeader().type & 0x02) == 0x02).isFalse();\r\n    assertThat((oggPacket.getPageHeader().type & 0x04) == 0x04).isTrue();\r\n    assertThat(oggPacket.getPageHeader().type).isEqualTo(4);\r\n    assertThat(oggPacket.getPageHeader().headerSize).isEqualTo(27 + 4);\r\n    assertThat(oggPacket.getPageHeader().bodySize).isEqualTo(255 + 1 + 255 + 16);\r\n    assertThat(oggPacket.getPageHeader().pageSegmentCount).isEqualTo(4);\r\n    // Page 1002 is empty, so current page is 1003.\r\n    assertThat(oggPacket.getPageHeader().pageSequenceNumber).isEqualTo(1003);\r\n    assertThat(oggPacket.getPageHeader().granulePosition).isEqualTo(128);\r\n\r\n    assertReadPacket(input, fourthPacket);\r\n\r\n    assertReadEof(input);', 116, 35, NULL, '2019-03-01 03:31:18', '2019-03-01 03:31:18', NULL),
(492, 'testReadPacketWithZeroSizeTerminator', 'byte[] firstPacket = TestUtil.buildTestData(255, random);\r\n    byte[] secondPacket = TestUtil.buildTestData(8, random);\r\n\r\n    FakeExtractorInput input =\r\n        OggTestData.createInput(\r\n            TestUtil.joinByteArrays(\r\n                OggTestData.buildOggHeader(0x06, 0, 1000, 0x04),\r\n                TestUtil.createByteArray(0xFF, 0x00, 0x00, 0x08), // Laces.\r\n                firstPacket,\r\n                secondPacket),\r\n            true);\r\n\r\n    assertReadPacket(input, firstPacket);\r\n    assertReadPacket(input, secondPacket);\r\n    assertReadEof(input);', 116, 5, NULL, '2019-03-01 03:31:41', '2019-03-01 03:31:41', NULL),
(493, 'testReadContinuedPacketOverTwoPages', 'byte[] firstPacket = TestUtil.buildTestData(518);\r\n\r\n    FakeExtractorInput input =\r\n        OggTestData.createInput(\r\n            TestUtil.joinByteArrays(\r\n                // First page.\r\n                OggTestData.buildOggHeader(0x02, 0, 1000, 0x02),\r\n                TestUtil.createByteArray(0xFF, 0xFF), // Laces.\r\n                Arrays.copyOf(firstPacket, 510),\r\n                // Second page (continued packet).\r\n                OggTestData.buildOggHeader(0x05, 10, 1001, 0x01),\r\n                TestUtil.createByteArray(0x08), // Laces.\r\n                Arrays.copyOfRange(firstPacket, 510, 510 + 8)),\r\n            true);\r\n\r\n    assertReadPacket(input, firstPacket);\r\n    assertThat((oggPacket.getPageHeader().type & 0x04) == 0x04).isTrue();\r\n    assertThat((oggPacket.getPageHeader().type & 0x02) == 0x02).isFalse();\r\n    assertThat(oggPacket.getPageHeader().pageSequenceNumber).isEqualTo(1001);\r\n\r\n    assertReadEof(input);', 116, 6, NULL, '2019-03-01 03:32:03', '2019-03-01 03:32:03', NULL),
(494, 'testReadContinuedPacketOverFourPages', 'byte[] firstPacket = TestUtil.buildTestData(1028);\r\n\r\n    FakeExtractorInput input =\r\n        OggTestData.createInput(\r\n            TestUtil.joinByteArrays(\r\n                // First page.\r\n                OggTestData.buildOggHeader(0x02, 0, 1000, 0x02),\r\n                TestUtil.createByteArray(0xFF, 0xFF), // Laces.\r\n                Arrays.copyOf(firstPacket, 510),\r\n                // Second page (continued packet).\r\n                OggTestData.buildOggHeader(0x01, 10, 1001, 0x01),\r\n                TestUtil.createByteArray(0xFF), // Laces.\r\n                Arrays.copyOfRange(firstPacket, 510, 510 + 255),\r\n                // Third page (continued packet).\r\n                OggTestData.buildOggHeader(0x01, 10, 1002, 0x01),\r\n                TestUtil.createByteArray(0xFF), // Laces.\r\n                Arrays.copyOfRange(firstPacket, 510 + 255, 510 + 255 + 255),\r\n                // Fourth page (continued packet).\r\n                OggTestData.buildOggHeader(0x05, 10, 1003, 0x01),\r\n                TestUtil.createByteArray(0x08), // Laces.\r\n                Arrays.copyOfRange(firstPacket, 510 + 255 + 255, 510 + 255 + 255 + 8)),\r\n            true);\r\n\r\n    assertReadPacket(input, firstPacket);\r\n    assertThat((oggPacket.getPageHeader().type & 0x04) == 0x04).isTrue();\r\n    assertThat((oggPacket.getPageHeader().type & 0x02) == 0x02).isFalse();\r\n    assertThat(oggPacket.getPageHeader().pageSequenceNumber).isEqualTo(1003);\r\n\r\n    assertReadEof(input);', 116, 6, NULL, '2019-03-01 03:32:24', '2019-03-01 03:32:24', NULL),
(495, 'testReadDiscardContinuedPacketAtStart', 'byte[] pageBody = TestUtil.buildTestData(256 + 8);\r\n\r\n    FakeExtractorInput input =\r\n        OggTestData.createInput(\r\n            TestUtil.joinByteArrays(\r\n                // Page with a continued packet at start.\r\n                OggTestData.buildOggHeader(0x01, 10, 1001, 0x03),\r\n                TestUtil.createByteArray(255, 1, 8), // Laces.\r\n                pageBody),\r\n            true);\r\n\r\n    // Expect the first partial packet to be discarded.\r\n    assertReadPacket(input, Arrays.copyOfRange(pageBody, 256, 256 + 8));\r\n    assertReadEof(input);', 116, 3, NULL, '2019-03-01 03:32:40', '2019-03-01 03:32:40', NULL),
(496, 'testReadZeroSizedPacketsAtEndOfStream', 'byte[] firstPacket = TestUtil.buildTestData(8, random);\r\n    byte[] secondPacket = TestUtil.buildTestData(8, random);\r\n    byte[] thirdPacket = TestUtil.buildTestData(8, random);\r\n\r\n    FakeExtractorInput input =\r\n        OggTestData.createInput(\r\n            TestUtil.joinByteArrays(\r\n                OggTestData.buildOggHeader(0x02, 0, 1000, 0x01),\r\n                TestUtil.createByteArray(0x08), // Laces.\r\n                firstPacket,\r\n                OggTestData.buildOggHeader(0x04, 0, 1001, 0x03),\r\n                TestUtil.createByteArray(0x08, 0x00, 0x00), // Laces.\r\n                secondPacket,\r\n                OggTestData.buildOggHeader(0x04, 0, 1002, 0x03),\r\n                TestUtil.createByteArray(0x08, 0x00, 0x00), // Laces.\r\n                thirdPacket),\r\n            true);\r\n\r\n    assertReadPacket(input, firstPacket);\r\n    assertReadPacket(input, secondPacket);\r\n    assertReadPacket(input, thirdPacket);\r\n    assertReadEof(input);', 116, 7, NULL, '2019-03-01 03:33:01', '2019-03-01 03:33:01', NULL),
(497, 'testParseRealFile', 'byte[] data = TestUtil.getByteArray(RuntimeEnvironment.application, TEST_FILE);\r\n    FakeExtractorInput input = new FakeExtractorInput.Builder().setData(data).build();\r\n    int packetCounter = 0;\r\n    while (readPacket(input)) {\r\n      packetCounter++;\r\n    }\r\n    assertThat(packetCounter).isEqualTo(277);', 116, 1, NULL, '2019-03-01 03:33:26', '2019-03-01 03:33:26', NULL),
(498, 'testPopulatePageHeader', '.buildOggHeader(0x01, 123456, 4, 2),\r\n        TestUtil.createByteArray(2, 2)\r\n    ), true);\r\n    OggPageHeader header = new OggPageHeader();\r\n    populatePageHeader(input, header, false);\r\n\r\n    assertThat(header.type).isEqualTo(0x01);\r\n    assertThat(header.headerSize).isEqualTo(27 + 2);\r\n    assertThat(header.bodySize).isEqualTo(4);\r\n    assertThat(header.pageSegmentCount).isEqualTo(2);\r\n    assertThat(header.granulePosition).isEqualTo(123456);\r\n    assertThat(header.pageSequenceNumber).isEqualTo(4);\r\n    assertThat(header.streamSerialNumber).isEqualTo(0x1000);\r\n    assertThat(header.pageChecksum).isEqualTo(0x100000);\r\n    assertThat(header.revision).isEqualTo(0);', 117, 9, NULL, '2019-03-01 03:35:47', '2019-03-01 03:35:47', NULL),
(499, 'testPopulatePageHeaderQuiteOnExceptionLessThan27Bytes', 'FakeExtractorInput input = OggTestData.createInput(TestUtil.createByteArray(2, 2), false);\r\n    OggPageHeader header = new OggPageHeader();\r\n    assertThat(populatePageHeader(input, header, true)).isFalse();', 117, 1, NULL, '2019-03-01 03:36:01', '2019-03-01 03:36:01', NULL),
(500, 'testPopulatePageHeaderQuiteOnExceptionNotOgg', 'byte[] headerBytes = TestUtil.joinByteArrays(\r\n        OggTestData.buildOggHeader(0x01, 123456, 4, 2),\r\n        TestUtil.createByteArray(2, 2)\r\n    );\r\n    // change from \'O\' to \'o\'\r\n    headerBytes[0] = \'o\';\r\n    FakeExtractorInput input = OggTestData.createInput(headerBytes, false);\r\n    OggPageHeader header = new OggPageHeader();\r\n    assertThat(populatePageHeader(input, header, true)).isFalse();', 117, 1, NULL, '2019-03-01 03:36:13', '2019-03-01 03:36:13', NULL),
(501, 'testPopulatePageHeaderQuiteOnExceptionWrongRevision', 'byte[] headerBytes = TestUtil.joinByteArrays(\r\n        OggTestData.buildOggHeader(0x01, 123456, 4, 2),\r\n        TestUtil.createByteArray(2, 2)\r\n    );\r\n    // change revision from 0 to 1\r\n    headerBytes[4] = 0x01;\r\n    FakeExtractorInput input = OggTestData.createInput(headerBytes, false);\r\n    OggPageHeader header = new OggPageHeader();\r\n    assertThat(populatePageHeader(input, header, true)).isFalse();', 117, 1, NULL, '2019-03-01 03:36:28', '2019-03-01 03:36:28', NULL),
(502, 'testReadBit', 'VorbisBitArray bitArray = new VorbisBitArray(TestUtil.createByteArray(0x5c, 0x50));\r\n    assertThat(bitArray.readBit()).isFalse();\r\n    assertThat(bitArray.readBit()).isFalse();\r\n    assertThat(bitArray.readBit()).isTrue();\r\n    assertThat(bitArray.readBit()).isTrue();\r\n    assertThat(bitArray.readBit()).isTrue();\r\n    assertThat(bitArray.readBit()).isFalse();\r\n    assertThat(bitArray.readBit()).isTrue();\r\n    assertThat(bitArray.readBit()).isFalse();\r\n    assertThat(bitArray.readBit()).isFalse();\r\n    assertThat(bitArray.readBit()).isFalse();\r\n    assertThat(bitArray.readBit()).isFalse();\r\n    assertThat(bitArray.readBit()).isFalse();\r\n    assertThat(bitArray.readBit()).isTrue();\r\n    assertThat(bitArray.readBit()).isFalse();\r\n    assertThat(bitArray.readBit()).isTrue();\r\n    assertThat(bitArray.readBit()).isFalse();', 118, 16, NULL, '2019-03-01 03:39:55', '2019-03-01 03:39:55', NULL),
(503, 'testSkipBits', 'VorbisBitArray bitArray = new VorbisBitArray(TestUtil.createByteArray(0xF0, 0x0F));\r\n    bitArray.skipBits(10);\r\n    assertThat(bitArray.getPosition()).isEqualTo(10);\r\n    assertThat(bitArray.readBit()).isTrue();\r\n    assertThat(bitArray.readBit()).isTrue();\r\n    assertThat(bitArray.readBit()).isFalse();\r\n    bitArray.skipBits(1);\r\n    assertThat(bitArray.getPosition()).isEqualTo(14);\r\n    assertThat(bitArray.readBit()).isFalse();\r\n    assertThat(bitArray.readBit()).isFalse();', 118, 7, NULL, '2019-03-01 03:40:26', '2019-03-01 03:40:26', NULL),
(504, 'testGetPosition', 'VorbisBitArray bitArray = new VorbisBitArray(TestUtil.createByteArray(0xF0, 0x0F));\r\n    assertThat(bitArray.getPosition()).isEqualTo(0);\r\n    bitArray.readBit();\r\n    assertThat(bitArray.getPosition()).isEqualTo(1);\r\n    bitArray.readBit();\r\n    bitArray.readBit();\r\n    bitArray.skipBits(4);\r\n    assertThat(bitArray.getPosition()).isEqualTo(7);', 118, 3, NULL, '2019-03-01 03:40:43', '2019-03-01 03:40:43', NULL),
(505, 'testSetPosition', 'VorbisBitArray bitArray = new VorbisBitArray(TestUtil.createByteArray(0xF0, 0x0F));\r\n    assertThat(bitArray.getPosition()).isEqualTo(0);\r\n    bitArray.setPosition(4);\r\n    assertThat(bitArray.getPosition()).isEqualTo(4);\r\n    bitArray.setPosition(15);\r\n    assertThat(bitArray.readBit()).isFalse();', 118, 3, NULL, '2019-03-01 03:40:56', '2019-03-01 03:40:56', NULL),
(506, 'testReadInt32', 'VorbisBitArray bitArray = new VorbisBitArray(TestUtil.createByteArray(0xF0, 0x0F, 0xF0, 0x0F));\r\n    assertThat(bitArray.readBits(32)).isEqualTo(0x0FF00FF0);\r\n    bitArray = new VorbisBitArray(TestUtil.createByteArray(0x0F, 0xF0, 0x0F, 0xF0));\r\n    assertThat(bitArray.readBits(32)).isEqualTo(0xF00FF00F);', 118, 2, NULL, '2019-03-01 03:41:15', '2019-03-01 03:41:15', NULL);
INSERT INTO `test_codes` (`id`, `method_name`, `method_body`, `test_code_class_id`, `assert_count`, `deleted_at`, `created_at`, `updated_at`, `source_codes`) VALUES
(507, 'testReadBits', 'VorbisBitArray bitArray = new VorbisBitArray(TestUtil.createByteArray(0x03, 0x22));\r\n    assertThat(bitArray.readBits(2)).isEqualTo(3);\r\n    bitArray.skipBits(6);\r\n    assertThat(bitArray.readBits(2)).isEqualTo(2);\r\n    bitArray.skipBits(2);\r\n    assertThat(bitArray.readBits(2)).isEqualTo(2);\r\n    bitArray.reset();\r\n    assertThat(bitArray.readBits(16)).isEqualTo(0x2203);', 118, 4, NULL, '2019-03-01 03:41:28', '2019-03-01 03:41:28', NULL),
(508, 'testRead4BitsBeyondBoundary', 'VorbisBitArray bitArray = new VorbisBitArray(TestUtil.createByteArray(0x2e, 0x10));\r\n    assertThat(bitArray.readBits(7)).isEqualTo(0x2e);\r\n    assertThat(bitArray.getPosition()).isEqualTo(7);\r\n    assertThat(bitArray.readBits(4)).isEqualTo(0x0);', 118, 3, NULL, '2019-03-01 03:41:42', '2019-03-01 03:41:42', NULL),
(509, 'testReadBitsBeyondByteBoundaries', 'VorbisBitArray bitArray = new VorbisBitArray(TestUtil.createByteArray(0xFF, 0x0F, 0xFF, 0x0F));\r\n    assertThat(bitArray.readBits(32)).isEqualTo(0x0FFF0FFF);\r\n\r\n    bitArray.reset();\r\n    bitArray.skipBits(4);\r\n    assertThat(bitArray.readBits(16)).isEqualTo(0xF0FF);\r\n\r\n    bitArray.reset();\r\n    bitArray.skipBits(6);\r\n    assertThat(bitArray.readBits(12)).isEqualTo(0xc3F);\r\n\r\n    bitArray.reset();\r\n    bitArray.skipBits(6);\r\n    assertThat(bitArray.readBit()).isTrue();\r\n    assertThat(bitArray.readBit()).isTrue();\r\n    assertThat(bitArray.bitsLeft()).isEqualTo(24);\r\n\r\n    bitArray.reset();\r\n    bitArray.skipBits(10);\r\n    assertThat(bitArray.readBits(5)).isEqualTo(3);\r\n    assertThat(bitArray.getPosition()).isEqualTo(15);', 118, 8, NULL, '2019-03-01 03:42:02', '2019-03-01 03:42:02', NULL),
(510, 'testReadBitsIllegalLengths', 'VorbisBitArray bitArray = new VorbisBitArray(TestUtil.createByteArray(0x03, 0x22, 0x30));\r\n\r\n    // reading zero bits gets 0 without advancing position\r\n    // (like a zero-bit read is defined to yield zer0)\r\n    assertThat(bitArray.readBits(0)).isEqualTo(0);\r\n    assertThat(bitArray.getPosition()).isEqualTo(0);\r\n    bitArray.readBit();\r\n    assertThat(bitArray.getPosition()).isEqualTo(1);', 118, 3, NULL, '2019-03-01 03:42:15', '2019-03-01 03:42:15', NULL),
(511, 'testReadBits', 'assertThat(readBits((byte) 0x00, 2, 2)).isEqualTo(0);\r\n    assertThat(readBits((byte) 0x02, 1, 1)).isEqualTo(1);\r\n    assertThat(readBits((byte) 0xF0, 4, 4)).isEqualTo(15);\r\n    assertThat(readBits((byte) 0x80, 1, 7)).isEqualTo(1);', 119, 4, NULL, '2019-03-01 03:47:45', '2019-03-01 03:47:45', NULL),
(512, 'testAppendNumberOfSamples', 'ParsableByteArray buffer = new ParsableByteArray(4);\r\n    buffer.setLimit(0);\r\n    VorbisReader.appendNumberOfSamples(buffer, 0x01234567);\r\n    assertThat(buffer.limit()).isEqualTo(4);\r\n    assertThat(buffer.data[0]).isEqualTo(0x67);\r\n    assertThat(buffer.data[1]).isEqualTo(0x45);\r\n    assertThat(buffer.data[2]).isEqualTo(0x23);\r\n    assertThat(buffer.data[3]).isEqualTo(0x01);', 119, 5, NULL, '2019-03-01 03:48:24', '2019-03-01 03:48:24', NULL),
(513, 'testReadSetupHeadersWithIOExceptions', 'byte[] data = OggTestData.getVorbisHeaderPages();\r\n    ExtractorInput input = new FakeExtractorInput.Builder().setData(data).setSimulateIOErrors(true)\r\n        .setSimulateUnknownLength(true).setSimulatePartialReads(true).build();\r\n\r\n    VorbisReader reader = new VorbisReader();\r\n    VorbisReader.VorbisSetup vorbisSetup = readSetupHeaders(reader, input);\r\n\r\n    assertThat(vorbisSetup.idHeader).isNotNull();\r\n    assertThat(vorbisSetup.commentHeader).isNotNull();\r\n    assertThat(vorbisSetup.setupHeaderData).isNotNull();\r\n    assertThat(vorbisSetup.modes).isNotNull();\r\n\r\n    assertThat(vorbisSetup.commentHeader.length).isEqualTo(45);\r\n    assertThat(vorbisSetup.idHeader.data).hasLength(30);\r\n    assertThat(vorbisSetup.setupHeaderData).hasLength(3597);\r\n\r\n    assertThat(vorbisSetup.idHeader.bitrateMax).isEqualTo(-1);\r\n    assertThat(vorbisSetup.idHeader.bitrateMin).isEqualTo(-1);\r\n    assertThat(vorbisSetup.idHeader.bitrateNominal).isEqualTo(66666);\r\n    assertThat(vorbisSetup.idHeader.blockSize0).isEqualTo(512);\r\n    assertThat(vorbisSetup.idHeader.blockSize1).isEqualTo(1024);\r\n    assertThat(vorbisSetup.idHeader.channels).isEqualTo(2);\r\n    assertThat(vorbisSetup.idHeader.framingFlag).isTrue();\r\n    assertThat(vorbisSetup.idHeader.sampleRate).isEqualTo(22050);\r\n    assertThat(vorbisSetup.idHeader.version).isEqualTo(0);\r\n\r\n    assertThat(vorbisSetup.commentHeader.vendor).isEqualTo(\"Xiph.Org libVorbis I 20030909\");\r\n    assertThat(vorbisSetup.iLogModes).isEqualTo(1);\r\n\r\n    assertThat(vorbisSetup.setupHeaderData[vorbisSetup.setupHeaderData.length - 1])\r\n        .isEqualTo(data[data.length - 1]);\r\n\r\n    assertThat(vorbisSetup.modes[0].blockFlag).isFalse();\r\n    assertThat(vorbisSetup.modes[1].blockFlag).isTrue();', 119, 21, NULL, '2019-03-01 03:49:01', '2019-03-01 03:49:01', NULL),
(514, 'testILog', 'assertThat(iLog(0)).isEqualTo(0);\r\n    assertThat(iLog(1)).isEqualTo(1);\r\n    assertThat(iLog(2)).isEqualTo(2);\r\n    assertThat(iLog(3)).isEqualTo(2);\r\n    assertThat(iLog(4)).isEqualTo(3);\r\n    assertThat(iLog(5)).isEqualTo(3);\r\n    assertThat(iLog(8)).isEqualTo(4);\r\n    assertThat(iLog(-1)).isEqualTo(0);\r\n    assertThat(iLog(-122)).isEqualTo(0);', 120, 9, NULL, '2019-03-01 03:50:17', '2019-03-01 03:50:17', NULL),
(515, 'testReadIdHeader', 'byte[] data = OggTestData.getIdentificationHeaderData();\r\n    ParsableByteArray headerData = new ParsableByteArray(data, data.length);\r\n    VorbisUtil.VorbisIdHeader vorbisIdHeader =\r\n        VorbisUtil.readVorbisIdentificationHeader(headerData);\r\n\r\n    assertThat(vorbisIdHeader.sampleRate).isEqualTo(22050);\r\n    assertThat(vorbisIdHeader.version).isEqualTo(0);\r\n    assertThat(vorbisIdHeader.framingFlag).isTrue();\r\n    assertThat(vorbisIdHeader.channels).isEqualTo(2);\r\n    assertThat(vorbisIdHeader.blockSize0).isEqualTo(512);\r\n    assertThat(vorbisIdHeader.blockSize1).isEqualTo(1024);\r\n    assertThat(vorbisIdHeader.bitrateMax).isEqualTo(-1);\r\n    assertThat(vorbisIdHeader.bitrateMin).isEqualTo(-1);\r\n    assertThat(vorbisIdHeader.bitrateNominal).isEqualTo(66666);\r\n    assertThat(vorbisIdHeader.getApproximateBitrate()).isEqualTo(66666);', 120, 10, NULL, '2019-03-01 03:52:22', '2019-03-01 03:52:22', NULL),
(516, 'testReadCommentHeader', 'byte[] data = OggTestData.getCommentHeaderDataUTF8();\r\n    ParsableByteArray headerData = new ParsableByteArray(data, data.length);\r\n    VorbisUtil.CommentHeader commentHeader = VorbisUtil.readVorbisCommentHeader(headerData);\r\n\r\n    assertThat(commentHeader.vendor).isEqualTo(\"Xiph.Org libVorbis I 20120203 (Omnipresent)\");\r\n    assertThat(commentHeader.comments).hasLength(3);\r\n    assertThat(commentHeader.comments[0]).isEqualTo(\"ALBUM=äö\");\r\n    assertThat(commentHeader.comments[1]).isEqualTo(\"TITLE=A sample song\");\r\n    assertThat(commentHeader.comments[2]).isEqualTo(\"ARTIST=Google\");', 120, 5, NULL, '2019-03-01 03:52:36', '2019-03-01 03:52:36', NULL),
(517, 'testReadVorbisModes', 'byte[] data = OggTestData.getSetupHeaderData();\r\n    ParsableByteArray headerData = new ParsableByteArray(data, data.length);\r\n    VorbisUtil.Mode[] modes = VorbisUtil.readVorbisModes(headerData, 2);\r\n\r\n    assertThat(modes).hasLength(2);\r\n    assertThat(modes[0].blockFlag).isFalse();\r\n    assertThat(modes[0].mapping).isEqualTo(0);\r\n    assertThat(modes[0].transformType).isEqualTo(0);\r\n    assertThat(modes[0].windowType).isEqualTo(0);\r\n    assertThat(modes[1].blockFlag).isTrue();\r\n    assertThat(modes[1].mapping).isEqualTo(1);\r\n    assertThat(modes[1].transformType).isEqualTo(0);\r\n    assertThat(modes[1].windowType).isEqualTo(0);', 120, 9, NULL, '2019-03-01 03:53:00', '2019-03-01 03:53:00', NULL),
(518, 'testVerifyVorbisHeaderCapturePattern', 'ParsableByteArray header = new ParsableByteArray(\r\n        new byte[] {0x01, \'v\', \'o\', \'r\', \'b\', \'i\', \'s\'});\r\n    assertThat(verifyVorbisHeaderCapturePattern(0x01, header, false)).isTrue();', 120, 1, NULL, '2019-03-01 03:53:19', '2019-03-01 03:53:19', NULL),
(519, 'testVerifyVorbisHeaderCapturePatternInvalidHeader', 'ParsableByteArray header = new ParsableByteArray(\r\n        new byte[] {0x01, \'v\', \'o\', \'r\', \'b\', \'i\', \'s\'});\r\n    try {\r\n      VorbisUtil.verifyVorbisHeaderCapturePattern(0x99, header, false);\r\n      fail();\r\n    } catch (ParserException e) {\r\n      assertThat(e.getMessage()).isEqualTo(\"expected header type 99\");\r\n    }', 120, 1, NULL, '2019-03-01 03:53:39', '2019-03-01 03:53:39', NULL),
(520, 'testVerifyVorbisHeaderCapturePatternInvalidHeaderQuite', 'ParsableByteArray header = new ParsableByteArray(\r\n        new byte[] {0x01, \'v\', \'o\', \'r\', \'b\', \'i\', \'s\'});\r\n    assertThat(verifyVorbisHeaderCapturePattern(0x99, header, true)).isFalse();', 120, 1, NULL, '2019-03-01 03:53:52', '2019-03-01 03:53:52', NULL),
(521, 'testVerifyVorbisHeaderCapturePatternInvalidPattern', 'ParsableByteArray header = new ParsableByteArray(\r\n        new byte[] {0x01, \'x\', \'v\', \'o\', \'r\', \'b\', \'i\', \'s\'});\r\n    try {\r\n      VorbisUtil.verifyVorbisHeaderCapturePattern(0x01, header, false);\r\n      fail();\r\n    } catch (ParserException e) {\r\n      assertThat(e.getMessage()).isEqualTo(\"expected characters \'vorbis\'\");\r\n    }', 120, 1, NULL, '2019-03-01 03:54:04', '2019-03-01 03:54:04', NULL),
(522, 'testVerifyVorbisHeaderCapturePatternQuiteInvalidPatternQuite', 'ParsableByteArray header = new ParsableByteArray(\r\n        new byte[] {0x01, \'x\', \'v\', \'o\', \'r\', \'b\', \'i\', \'s\'});\r\n    assertThat(verifyVorbisHeaderCapturePattern(0x01, header, true)).isFalse();', 120, 1, NULL, '2019-03-01 03:54:35', '2019-03-01 03:54:35', NULL),
(523, 'testRawCcSample', 'ExtractorAsserts.assertBehavior(\r\n        () ->\r\n            new RawCcExtractor(\r\n                Format.createTextContainerFormat(\r\n                    /* id= */ null,\r\n                    /* label= */ null,\r\n                    /* containerMimeType= */ null,\r\n                    /* sampleMimeType= */ MimeTypes.APPLICATION_CEA608,\r\n                    /* codecs= */ \"cea608\",\r\n                    /* bitrate= */ Format.NO_VALUE,\r\n                    /* selectionFlags= */ 0,\r\n                    /* language= */ null,\r\n                    /* accessibilityChannel= */ 1)),\r\n        \"rawcc/sample.rawcc\");', 121, 1, NULL, '2019-03-01 04:11:11', '2019-03-01 04:11:11', NULL),
(524, 'testAc3Sample', 'ExtractorAsserts.assertBehavior(Ac3Extractor::new, \"ts/sample.ac3\");', 122, 1, NULL, '2019-03-01 04:12:20', '2019-03-01 04:12:20', NULL),
(525, 'testEAc3Sample', 'ExtractorAsserts.assertBehavior(Ac3Extractor::new, \"ts/sample.eac3\");', 122, 1, NULL, '2019-03-01 04:12:41', '2019-03-01 04:12:41', NULL),
(526, 'testAdtsExtractorReads_returnSeekableSeekMap', 'String fileName = TEST_FILE;\r\n    Uri fileUri = TestUtil.buildAssetUri(fileName);\r\n    expectedTrackOutput =\r\n        TestUtil.extractAllSamplesFromFile(\r\n                createAdtsExtractor(), RuntimeEnvironment.application, fileName)\r\n            .trackOutputs\r\n            .get(0);\r\n\r\n    AdtsExtractor extractor = createAdtsExtractor();\r\n    SeekMap seekMap =\r\n        TestUtil.extractSeekMap(extractor, new FakeExtractorOutput(), dataSource, fileUri);\r\n\r\n    assertThat(seekMap).isNotNull();\r\n    assertThat(seekMap.getDurationUs()).isEqualTo(FILE_DURATION_US);\r\n    assertThat(seekMap.isSeekable()).isTrue();', 123, 3, NULL, '2019-03-01 03:26:38', '2019-03-01 03:26:38', NULL),
(527, 'testSeeking_handlesSeekingToPositionInFile_extractsCorrectSample', 'String fileName = TEST_FILE;\r\n    Uri fileUri = TestUtil.buildAssetUri(fileName);\r\n    expectedTrackOutput =\r\n        TestUtil.extractAllSamplesFromFile(\r\n                createAdtsExtractor(), RuntimeEnvironment.application, fileName)\r\n            .trackOutputs\r\n            .get(0);\r\n\r\n    AdtsExtractor extractor = createAdtsExtractor();\r\n\r\n    FakeExtractorOutput extractorOutput = new FakeExtractorOutput();\r\n    SeekMap seekMap = TestUtil.extractSeekMap(extractor, extractorOutput, dataSource, fileUri);\r\n    FakeTrackOutput trackOutput = extractorOutput.trackOutputs.get(0);\r\n\r\n    long targetSeekTimeUs = 980_000;\r\n    int extractedSampleIndex =\r\n        TestUtil.seekToTimeUs(\r\n            extractor, seekMap, targetSeekTimeUs, dataSource, trackOutput, fileUri);\r\n\r\n    assertThat(extractedSampleIndex).isNotEqualTo(-1);\r\n    assertFirstSampleAfterSeekContainTargetSeekTime(\r\n        trackOutput, targetSeekTimeUs, extractedSampleIndex);', 123, 2, NULL, '2019-03-01 03:26:49', '2019-03-01 03:26:49', NULL),
(528, 'testSeeking_handlesSeekToEoF_extractsLastSample', 'String fileName = TEST_FILE;\r\n    Uri fileUri = TestUtil.buildAssetUri(fileName);\r\n    expectedTrackOutput =\r\n        TestUtil.extractAllSamplesFromFile(\r\n                createAdtsExtractor(), RuntimeEnvironment.application, fileName)\r\n            .trackOutputs\r\n            .get(0);\r\n    AdtsExtractor extractor = createAdtsExtractor();\r\n\r\n    FakeExtractorOutput extractorOutput = new FakeExtractorOutput();\r\n    SeekMap seekMap = TestUtil.extractSeekMap(extractor, extractorOutput, dataSource, fileUri);\r\n    FakeTrackOutput trackOutput = extractorOutput.trackOutputs.get(0);\r\n\r\n    long targetSeekTimeUs = seekMap.getDurationUs();\r\n\r\n    int extractedSampleIndex =\r\n        TestUtil.seekToTimeUs(\r\n            extractor, seekMap, targetSeekTimeUs, dataSource, trackOutput, fileUri);\r\n\r\n    assertThat(extractedSampleIndex).isNotEqualTo(-1);\r\n    assertFirstSampleAfterSeekContainTargetSeekTime(\r\n        trackOutput, targetSeekTimeUs, extractedSampleIndex);', 123, 2, NULL, '2019-03-01 03:27:03', '2019-03-01 03:27:03', NULL),
(529, 'testSeeking_handlesSeekingBackward_extractsCorrectSamples', 'String fileName = TEST_FILE;\r\n    Uri fileUri = TestUtil.buildAssetUri(fileName);\r\n    expectedTrackOutput =\r\n        TestUtil.extractAllSamplesFromFile(\r\n                createAdtsExtractor(), RuntimeEnvironment.application, fileName)\r\n            .trackOutputs\r\n            .get(0);\r\n    AdtsExtractor extractor = createAdtsExtractor();\r\n\r\n    FakeExtractorOutput extractorOutput = new FakeExtractorOutput();\r\n    SeekMap seekMap = TestUtil.extractSeekMap(extractor, extractorOutput, dataSource, fileUri);\r\n    FakeTrackOutput trackOutput = extractorOutput.trackOutputs.get(0);\r\n\r\n    long firstSeekTimeUs = 980_000;\r\n    TestUtil.seekToTimeUs(extractor, seekMap, firstSeekTimeUs, dataSource, trackOutput, fileUri);\r\n\r\n    long targetSeekTimeUs = 0;\r\n    int extractedSampleIndex =\r\n        TestUtil.seekToTimeUs(\r\n            extractor, seekMap, targetSeekTimeUs, dataSource, trackOutput, fileUri);\r\n\r\n    assertThat(extractedSampleIndex).isNotEqualTo(-1);\r\n    assertFirstSampleAfterSeekContainTargetSeekTime(\r\n        trackOutput, targetSeekTimeUs, extractedSampleIndex);', 123, 2, NULL, '2019-03-01 03:27:20', '2019-03-01 03:27:20', NULL),
(530, 'testSeeking_handlesSeekingForward_extractsCorrectSamples', 'String fileName = TEST_FILE;\r\n    Uri fileUri = TestUtil.buildAssetUri(fileName);\r\n    expectedTrackOutput =\r\n        TestUtil.extractAllSamplesFromFile(\r\n                createAdtsExtractor(), RuntimeEnvironment.application, fileName)\r\n            .trackOutputs\r\n            .get(0);\r\n    AdtsExtractor extractor = createAdtsExtractor();\r\n\r\n    FakeExtractorOutput extractorOutput = new FakeExtractorOutput();\r\n    SeekMap seekMap = TestUtil.extractSeekMap(extractor, extractorOutput, dataSource, fileUri);\r\n    FakeTrackOutput trackOutput = extractorOutput.trackOutputs.get(0);\r\n\r\n    long firstSeekTimeUs = 980_000;\r\n    TestUtil.seekToTimeUs(extractor, seekMap, firstSeekTimeUs, dataSource, trackOutput, fileUri);\r\n\r\n    long targetSeekTimeUs = 1_200_000;\r\n    int extractedSampleIndex =\r\n        TestUtil.seekToTimeUs(\r\n            extractor, seekMap, targetSeekTimeUs, dataSource, trackOutput, fileUri);\r\n\r\n    assertThat(extractedSampleIndex).isNotEqualTo(-1);\r\n    assertFirstSampleAfterSeekContainTargetSeekTime(\r\n        trackOutput, targetSeekTimeUs, extractedSampleIndex);', 123, 2, NULL, '2019-03-01 03:27:31', '2019-03-01 03:27:31', NULL),
(531, 'testSeeking_handlesRandomSeeks_extractsCorrectSamples', 'String fileName = TEST_FILE;\r\n    Uri fileUri = TestUtil.buildAssetUri(fileName);\r\n    expectedTrackOutput =\r\n        TestUtil.extractAllSamplesFromFile(\r\n                createAdtsExtractor(), RuntimeEnvironment.application, fileName)\r\n            .trackOutputs\r\n            .get(0);\r\n    AdtsExtractor extractor = createAdtsExtractor();\r\n\r\n    FakeExtractorOutput extractorOutput = new FakeExtractorOutput();\r\n    SeekMap seekMap = TestUtil.extractSeekMap(extractor, extractorOutput, dataSource, fileUri);\r\n    FakeTrackOutput trackOutput = extractorOutput.trackOutputs.get(0);\r\n\r\n    long numSeek = 100;\r\n    for (long i = 0; i < numSeek; i++) {\r\n      long targetSeekTimeUs = random.nextInt(FILE_DURATION_US + 1);\r\n      int extractedSampleIndex =\r\n          TestUtil.seekToTimeUs(\r\n              extractor, seekMap, targetSeekTimeUs, dataSource, trackOutput, fileUri);\r\n\r\n      assertThat(extractedSampleIndex).isNotEqualTo(-1);\r\n      assertFirstSampleAfterSeekContainTargetSeekTime(\r\n          trackOutput, targetSeekTimeUs, extractedSampleIndex);\r\n    }', 123, 200, NULL, '2019-03-01 03:27:56', '2019-03-01 03:27:56', NULL),
(532, 'testSample', 'ExtractorAsserts.assertBehavior(AdtsExtractor::new, \"ts/sample.adts\");', 124, 1, NULL, '2019-03-01 03:29:16', '2019-03-01 03:29:16', NULL),
(533, 'testSample_withSeeking', 'serts.assertBehavior(\r\n        () ->\r\n            new AdtsExtractor(\r\n                /* firstStreamSampleTimestampUs= */ 0,\r\n                /* flags= */ AdtsExtractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING),\r\n        \"ts/sample_cbs.adts\");', 124, 1, NULL, '2019-03-01 03:29:29', '2019-03-01 03:29:29', NULL),
(534, 'testSkipToNextSample', 'for (int i = 1; i <= ID3_DATA_1.length + ID3_DATA_2.length; i++) {\r\n      data.setPosition(i);\r\n      feed();\r\n      // Once the data position set to ID3_DATA_1.length, no more id3 samples are read\r\n      int id3SampleCount = Math.min(i, ID3_DATA_1.length);\r\n      assertSampleCounts(id3SampleCount, i);\r\n    }', 125, 144, NULL, '2019-03-01 03:39:00', '2019-03-01 03:39:00', NULL),
(535, 'testSkipToNextSampleResetsState', 'data =\r\n        new ParsableByteArray(\r\n            TestUtil.joinByteArrays(\r\n                ADTS_HEADER,\r\n                ADTS_CONTENT,\r\n                ADTS_HEADER,\r\n                ADTS_CONTENT,\r\n                // Adts sample missing the first sync byte\r\n                // The Reader should be able to read the next sample.\r\n                Arrays.copyOfRange(ADTS_HEADER, 1, ADTS_HEADER.length),\r\n                ADTS_CONTENT,\r\n                ADTS_HEADER,\r\n                ADTS_CONTENT));\r\n    feed();\r\n    assertSampleCounts(0, 3);\r\n    for (int i = 0; i < 3; i++) {\r\n      adtsOutput.assertSample(\r\n          /* index= */ i,\r\n          /* data= */ ADTS_CONTENT,\r\n          /* timeUs= */ ADTS_SAMPLE_DURATION * i,\r\n          /* flags= */ C.BUFFER_FLAG_KEY_FRAME,\r\n          /* cryptoData= */ null);\r\n    }', 125, 1, NULL, '2019-03-01 03:39:12', '2019-03-01 03:39:12', NULL),
(536, 'testNoData', 'feedLimited(0);\r\n    assertSampleCounts(0, 0);', 125, 1, NULL, '2019-03-01 03:39:47', '2019-03-01 03:39:47', NULL),
(537, 'testNotEnoughDataForIdentifier', 'feedLimited(3 - 1);\r\n    assertSampleCounts(0, 0);', 125, 1, NULL, '2019-03-01 03:39:55', '2019-03-01 03:39:55', NULL),
(538, 'testNotEnoughDataForHeader', 'feedLimited(10 - 1);\r\n    assertSampleCounts(0, 0);', 125, 1, NULL, '2019-03-01 03:40:03', '2019-03-01 03:40:03', NULL),
(539, 'testNotEnoughDataForWholeId3Packet', 'feedLimited(ID3_DATA_1.length - 1);\r\n    assertSampleCounts(0, 0);', 125, 2, NULL, '2019-03-01 03:40:15', '2019-03-01 03:40:54', NULL),
(540, 'testConsumeWholeId3Packet', 'feedLimited(ID3_DATA_1.length);\r\n    assertSampleCounts(1, 0);\r\n    id3Output.assertSample(0, ID3_DATA_1, 0, C.BUFFER_FLAG_KEY_FRAME, null);', 125, 2, NULL, '2019-03-01 03:40:27', '2019-03-01 03:40:58', NULL),
(541, 'testMultiId3Packet', 'feedLimited(ID3_DATA_1.length + ID3_DATA_2.length);\r\n    assertSampleCounts(2, 0);\r\n    id3Output.assertSample(0, ID3_DATA_1, 0, C.BUFFER_FLAG_KEY_FRAME, null);\r\n    id3Output.assertSample(1, ID3_DATA_2, 0, C.BUFFER_FLAG_KEY_FRAME, null);', 125, 3, NULL, '2019-03-01 03:40:51', '2019-03-01 03:40:51', NULL),
(542, 'testMultiPacketConsumed', 'for (int i = 0; i < 10; i++) {\r\n      data.setPosition(0);\r\n      feed();\r\n\r\n      long timeUs = ADTS_SAMPLE_DURATION * i;\r\n      int j = i * 2;\r\n      assertSampleCounts(j + 2, i + 1);\r\n\r\n      id3Output.assertSample(j, ID3_DATA_1, timeUs, C.BUFFER_FLAG_KEY_FRAME, null);\r\n      id3Output.assertSample(j + 1, ID3_DATA_2, timeUs, C.BUFFER_FLAG_KEY_FRAME, null);\r\n      adtsOutput.assertSample(i, ADTS_CONTENT, timeUs, C.BUFFER_FLAG_KEY_FRAME, null);\r\n    }', 125, 50, NULL, '2019-03-01 03:41:41', '2019-03-01 03:41:41', NULL),
(543, 'testAdtsDataOnly', 'data.setPosition(ID3_DATA_1.length + ID3_DATA_2.length);\r\n    feed();\r\n    assertSampleCounts(0, 1);\r\n    adtsOutput.assertSample(0, ADTS_CONTENT, 0, C.BUFFER_FLAG_KEY_FRAME, null);', 125, 2, NULL, '2019-03-01 03:42:04', '2019-03-01 03:42:04', NULL),
(544, 'testIsDurationReadPending_returnFalseByDefault', 'assertThat(tsDurationReader.isDurationReadFinished()).isFalse();', 126, 1, NULL, '2019-03-01 05:29:01', '2019-03-01 05:29:01', NULL),
(545, 'testReadDuration_returnsCorrectDuration', 'FakeExtractorInput input =\r\n        new FakeExtractorInput.Builder()\r\n            .setData(TestUtil.getByteArray(RuntimeEnvironment.application, \"ts/sample.ps\"))\r\n            .build();\r\n\r\n    int result = Extractor.RESULT_CONTINUE;\r\n    while (!tsDurationReader.isDurationReadFinished()) {\r\n      result = tsDurationReader.readDuration(input, seekPositionHolder);\r\n      if (result == Extractor.RESULT_SEEK) {\r\n        input.setPosition((int) seekPositionHolder.position);\r\n      }\r\n    }\r\n    assertThat(result).isNotEqualTo(Extractor.RESULT_END_OF_INPUT);\r\n    assertThat(tsDurationReader.getDurationUs()).isEqualTo(766);', 126, 2, NULL, '2019-03-01 05:29:52', '2019-03-01 05:29:52', NULL),
(546, 'testReadDuration_midStream_returnsCorrectDuration', 'FakeExtractorInput input =\r\n        new FakeExtractorInput.Builder()\r\n            .setData(TestUtil.getByteArray(RuntimeEnvironment.application, \"ts/sample.ps\"))\r\n            .build();\r\n\r\n    input.setPosition(1234);\r\n    int result = Extractor.RESULT_CONTINUE;\r\n    while (!tsDurationReader.isDurationReadFinished()) {\r\n      result = tsDurationReader.readDuration(input, seekPositionHolder);\r\n      if (result == Extractor.RESULT_SEEK) {\r\n        input.setPosition((int) seekPositionHolder.position);\r\n      }\r\n    }\r\n    assertThat(result).isNotEqualTo(Extractor.RESULT_END_OF_INPUT);\r\n    assertThat(tsDurationReader.getDurationUs()).isEqualTo(766);', 126, 2, NULL, '2019-03-01 05:30:05', '2019-03-01 05:30:05', NULL),
(547, 'testPsExtractorReads_nonSeekTableFile_returnSeekableSeekMap', 'PsExtractor extractor = new PsExtractor();\r\n\r\n    SeekMap seekMap = extractSeekMapAndTracks(extractor, new FakeExtractorOutput());\r\n\r\n    assertThat(seekMap).isNotNull();\r\n    assertThat(seekMap.getDurationUs()).isEqualTo(DURATION_US);\r\n    assertThat(seekMap.isSeekable()).isTrue();', 127, 3, NULL, '2019-03-01 05:33:07', '2019-03-01 05:33:07', NULL),
(548, 'testHandlePendingSeek_handlesSeekingToPositionInFile_extractsCorrectFrame', 'PsExtractor extractor = new PsExtractor();\r\n\r\n    FakeExtractorOutput extractorOutput = new FakeExtractorOutput();\r\n    SeekMap seekMap = extractSeekMapAndTracks(extractor, extractorOutput);\r\n    FakeTrackOutput trackOutput = extractorOutput.trackOutputs.get(VIDEO_TRACK_ID);\r\n\r\n    long targetSeekTimeUs = 987_000;\r\n    int extractedFrameIndex = seekToTimeUs(extractor, seekMap, targetSeekTimeUs, trackOutput);\r\n\r\n    assertThat(extractedFrameIndex).isNotEqualTo(-1);\r\n    assertFirstFrameAfterSeekContainsTargetSeekTime(\r\n        trackOutput, targetSeekTimeUs, extractedFrameIndex);', 127, 4, NULL, '2019-03-01 07:20:16', '2019-03-01 07:20:16', NULL),
(549, 'testHandlePendingSeek_handlesSeekToEoF', 'PsExtractor extractor = new PsExtractor();\r\n\r\n    FakeExtractorOutput extractorOutput = new FakeExtractorOutput();\r\n    SeekMap seekMap = extractSeekMapAndTracks(extractor, extractorOutput);\r\n    FakeTrackOutput trackOutput = extractorOutput.trackOutputs.get(VIDEO_TRACK_ID);\r\n\r\n    long targetSeekTimeUs = seekMap.getDurationUs();\r\n\r\n    int extractedFrameIndex = seekToTimeUs(extractor, seekMap, targetSeekTimeUs, trackOutput);\r\n    // Assert that this seek will return a position at end of stream, without any frame.\r\n    assertThat(extractedFrameIndex).isEqualTo(-1);', 127, 1, NULL, '2019-03-01 07:20:32', '2019-03-01 07:20:32', NULL),
(550, 'testHandlePendingSeek_handlesSeekingBackward_extractsCorrectFrame', 'PsExtractor extractor = new PsExtractor();\r\n\r\n    FakeExtractorOutput extractorOutput = new FakeExtractorOutput();\r\n    SeekMap seekMap = extractSeekMapAndTracks(extractor, extractorOutput);\r\n    FakeTrackOutput trackOutput = extractorOutput.trackOutputs.get(VIDEO_TRACK_ID);\r\n\r\n    long firstSeekTimeUs = 987_000;\r\n    seekToTimeUs(extractor, seekMap, firstSeekTimeUs, trackOutput);\r\n\r\n    long targetSeekTimeUs = 0;\r\n    int extractedFrameIndex = seekToTimeUs(extractor, seekMap, targetSeekTimeUs, trackOutput);\r\n\r\n    assertThat(extractedFrameIndex).isNotEqualTo(-1);\r\n    assertFirstFrameAfterSeekContainsTargetSeekTime(\r\n        trackOutput, targetSeekTimeUs, extractedFrameIndex);', 127, 4, NULL, '2019-03-01 07:21:05', '2019-03-01 07:21:05', NULL),
(551, 'testHandlePendingSeek_handlesSeekingForward_extractsCorrectFrame', 'PsExtractor extractor = new PsExtractor();\r\n\r\n    FakeExtractorOutput extractorOutput = new FakeExtractorOutput();\r\n    SeekMap seekMap = extractSeekMapAndTracks(extractor, extractorOutput);\r\n    FakeTrackOutput trackOutput = extractorOutput.trackOutputs.get(VIDEO_TRACK_ID);\r\n\r\n    long firstSeekTimeUs = 987_000;\r\n    seekToTimeUs(extractor, seekMap, firstSeekTimeUs, trackOutput);\r\n\r\n    long targetSeekTimeUs = 1_234_000;\r\n    int extractedFrameIndex = seekToTimeUs(extractor, seekMap, targetSeekTimeUs, trackOutput);\r\n\r\n    assertThat(extractedFrameIndex).isNotEqualTo(-1);\r\n    assertFirstFrameAfterSeekContainsTargetSeekTime(\r\n        trackOutput, targetSeekTimeUs, extractedFrameIndex);', 127, 4, NULL, '2019-03-01 07:21:21', '2019-03-01 07:21:21', NULL),
(552, 'testHandlePendingSeek_handlesRandomSeeks_extractsCorrectFrame', 'PsExtractor extractor = new PsExtractor();\r\n\r\n    FakeExtractorOutput extractorOutput = new FakeExtractorOutput();\r\n    SeekMap seekMap = extractSeekMapAndTracks(extractor, extractorOutput);\r\n    FakeTrackOutput trackOutput = extractorOutput.trackOutputs.get(VIDEO_TRACK_ID);\r\n\r\n    long numSeek = 100;\r\n    for (long i = 0; i < numSeek; i++) {\r\n      long targetSeekTimeUs = random.nextInt(DURATION_US + 1);\r\n      int extractedFrameIndex = seekToTimeUs(extractor, seekMap, targetSeekTimeUs, trackOutput);\r\n\r\n      assertThat(extractedFrameIndex).isNotEqualTo(-1);\r\n      assertFirstFrameAfterSeekContainsTargetSeekTime(\r\n          trackOutput, targetSeekTimeUs, extractedFrameIndex);\r\n    }', 127, 400, NULL, '2019-03-01 07:21:53', '2019-03-01 07:21:53', NULL),
(553, 'testHandlePendingSeek_handlesRandomSeeksAfterReadingFileOnce_extractsCorrectFrame', 'PsExtractor extractor = new PsExtractor();\r\n\r\n    FakeExtractorOutput extractorOutput = new FakeExtractorOutput();\r\n    readInputFileOnce(extractor, extractorOutput);\r\n    SeekMap seekMap = extractorOutput.seekMap;\r\n    FakeTrackOutput trackOutput = extractorOutput.trackOutputs.get(VIDEO_TRACK_ID);\r\n\r\n    long numSeek = 100;\r\n    for (long i = 0; i < numSeek; i++) {\r\n      long targetSeekTimeUs = random.nextInt(DURATION_US + 1);\r\n      int extractedFrameIndex = seekToTimeUs(extractor, seekMap, targetSeekTimeUs, trackOutput);\r\n\r\n      assertThat(extractedFrameIndex).isNotEqualTo(-1);\r\n      assertFirstFrameAfterSeekContainsTargetSeekTime(\r\n          trackOutput, targetSeekTimeUs, extractedFrameIndex);\r\n    }', 127, 400, NULL, '2019-03-01 07:22:07', '2019-03-01 07:22:07', NULL),
(554, 'testSample', 'ExtractorAsserts.assertBehavior(PsExtractor::new, \"ts/sample.ps\");', 128, 1, NULL, '2019-03-01 07:23:05', '2019-03-01 07:23:05', NULL),
(555, 'testSingleOnePacketSection', 'packetPayload[0] = 3;\r\n    insertTableSection(4, (byte) 99, 3);\r\n    reader.consume(new ParsableByteArray(packetPayload), FLAG_PAYLOAD_UNIT_START_INDICATOR);\r\n    assertThat(payloadReader.parsedTableIds).isEqualTo(singletonList(99));', 129, 1, NULL, '2019-03-01 07:24:06', '2019-03-01 07:24:06', NULL),
(556, 'testHeaderSplitAcrossPackets', 'packetPayload[0] = 3; // The first packet includes a pointer_field.\r\n    insertTableSection(4, (byte) 100, 3); // This section header spreads across both packets.\r\n\r\n    ParsableByteArray firstPacket = new ParsableByteArray(packetPayload, 5);\r\n    reader.consume(firstPacket, FLAG_PAYLOAD_UNIT_START_INDICATOR);\r\n    assertThat(payloadReader.parsedTableIds).isEmpty();\r\n\r\n    ParsableByteArray secondPacket = new ParsableByteArray(packetPayload);\r\n    secondPacket.setPosition(5);\r\n    reader.consume(secondPacket, /* flags= */ 0);\r\n    assertThat(payloadReader.parsedTableIds).isEqualTo(singletonList(100));', 129, 2, NULL, '2019-03-01 07:24:58', '2019-03-01 07:25:03', NULL),
(557, 'testFiveSectionsInTwoPackets', 'packetPayload[0] = 0; // The first packet includes a pointer_field.\r\n    insertTableSection(1, (byte) 101, 10);\r\n    insertTableSection(14, (byte) 102, 10);\r\n    insertTableSection(27, (byte) 103, 10);\r\n    packetPayload[40] = 0; // The second packet includes a pointer_field.\r\n    insertTableSection(41, (byte) 104, 10);\r\n    insertTableSection(54, (byte) 105, 10);\r\n\r\n    ParsableByteArray firstPacket = new ParsableByteArray(packetPayload, 40);\r\n    reader.consume(firstPacket, FLAG_PAYLOAD_UNIT_START_INDICATOR);\r\n    assertThat(payloadReader.parsedTableIds).isEqualTo(asList(101, 102, 103));\r\n\r\n    ParsableByteArray secondPacket = new ParsableByteArray(packetPayload);\r\n    secondPacket.setPosition(40);\r\n    reader.consume(secondPacket, FLAG_PAYLOAD_UNIT_START_INDICATOR);\r\n    assertThat(payloadReader.parsedTableIds).isEqualTo(asList(101, 102, 103, 104, 105));', 129, 2, NULL, '2019-03-01 07:25:27', '2019-03-01 07:25:27', NULL),
(558, 'testLongSectionAcrossFourPackets', 'packetPayload[0] = 13; // The first packet includes a pointer_field.\r\n    insertTableSection(1, (byte) 106, 10); // First section. Should be skipped.\r\n    // Second section spread across four packets. Should be consumed.\r\n    insertTableSection(14, (byte) 107, 300);\r\n    packetPayload[300] = 17; // The third packet includes a pointer_field.\r\n    // Third section, at the payload start of the fourth packet. Should be consumed.\r\n    insertTableSection(318, (byte) 108, 10);\r\n\r\n    ParsableByteArray firstPacket = new ParsableByteArray(packetPayload, 100);\r\n    reader.consume(firstPacket, FLAG_PAYLOAD_UNIT_START_INDICATOR);\r\n    assertThat(payloadReader.parsedTableIds).isEmpty();\r\n\r\n    ParsableByteArray secondPacket = new ParsableByteArray(packetPayload, 200);\r\n    secondPacket.setPosition(100);\r\n    reader.consume(secondPacket, /* flags= */ 0);\r\n    assertThat(payloadReader.parsedTableIds).isEmpty();\r\n\r\n    ParsableByteArray thirdPacket = new ParsableByteArray(packetPayload, 300);\r\n    thirdPacket.setPosition(200);\r\n    reader.consume(thirdPacket, /* flags= */ 0);\r\n    assertThat(payloadReader.parsedTableIds).isEmpty();\r\n\r\n    ParsableByteArray fourthPacket = new ParsableByteArray(packetPayload);\r\n    fourthPacket.setPosition(300);\r\n    reader.consume(fourthPacket, FLAG_PAYLOAD_UNIT_START_INDICATOR);\r\n    assertThat(payloadReader.parsedTableIds).isEqualTo(asList(107, 108));', 129, 4, NULL, '2019-03-01 07:25:52', '2019-03-01 07:25:52', NULL),
(559, 'testSeek', 'packetPayload[0] = 13; // The first packet includes a pointer_field.\r\n    insertTableSection(1, (byte) 109, 10); // First section. Should be skipped.\r\n    // Second section spread across four packets. Should be consumed.\r\n    insertTableSection(14, (byte) 110, 300);\r\n    packetPayload[300] = 17; // The third packet includes a pointer_field.\r\n    // Third section, at the payload start of the fourth packet. Should be consumed.\r\n    insertTableSection(318, (byte) 111, 10);\r\n\r\n    ParsableByteArray firstPacket = new ParsableByteArray(packetPayload, 100);\r\n    reader.consume(firstPacket, FLAG_PAYLOAD_UNIT_START_INDICATOR);\r\n    assertThat(payloadReader.parsedTableIds).isEmpty();\r\n\r\n    ParsableByteArray secondPacket = new ParsableByteArray(packetPayload, 200);\r\n    secondPacket.setPosition(100);\r\n    reader.consume(secondPacket, /* flags= */ 0);\r\n    assertThat(payloadReader.parsedTableIds).isEmpty();\r\n\r\n    ParsableByteArray thirdPacket = new ParsableByteArray(packetPayload, 300);\r\n    thirdPacket.setPosition(200);\r\n    reader.consume(thirdPacket, /* flags= */ 0);\r\n    assertThat(payloadReader.parsedTableIds).isEmpty();\r\n\r\n    reader.seek();\r\n\r\n    ParsableByteArray fourthPacket = new ParsableByteArray(packetPayload);\r\n    fourthPacket.setPosition(300);\r\n    reader.consume(fourthPacket, FLAG_PAYLOAD_UNIT_START_INDICATOR);\r\n    assertThat(payloadReader.parsedTableIds).isEqualTo(singletonList(111));', 129, 4, NULL, '2019-03-01 07:27:55', '2019-03-01 07:27:55', NULL),
(560, 'testCrcChecks', 'byte[] correctCrcPat = new byte[] {\r\n        (byte) 0x0, (byte) 0x0, (byte) 0xb0, (byte) 0xd, (byte) 0x0, (byte) 0x1, (byte) 0xc1,\r\n        (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x1, (byte) 0xe1, (byte) 0x0, (byte) 0xe8,\r\n        (byte) 0xf9, (byte) 0x5e, (byte) 0x7d};\r\n    byte[] incorrectCrcPat = Arrays.copyOf(correctCrcPat, correctCrcPat.length);\r\n    // Crc field is incorrect, and should not be passed to the payload reader.\r\n    incorrectCrcPat[16]--;\r\n    reader.consume(new ParsableByteArray(correctCrcPat), FLAG_PAYLOAD_UNIT_START_INDICATOR);\r\n    assertThat(payloadReader.parsedTableIds).isEqualTo(singletonList(0));\r\n    reader.consume(new ParsableByteArray(incorrectCrcPat), FLAG_PAYLOAD_UNIT_START_INDICATOR);\r\n    assertThat(payloadReader.parsedTableIds).isEqualTo(singletonList(0));', 129, 2, NULL, '2019-03-01 07:28:28', '2019-03-01 07:28:28', NULL),
(561, 'testIsDurationReadPending_returnFalseByDefault', 'assertThat(tsDurationReader.isDurationReadFinished()).isFalse();', 130, 1, NULL, '2019-03-01 07:29:47', '2019-03-01 07:29:47', NULL),
(562, 'testReadDuration_returnsCorrectDuration', 'FakeExtractorInput input =\r\n        new FakeExtractorInput.Builder()\r\n            .setData(TestUtil.getByteArray(RuntimeEnvironment.application, \"ts/bbb_2500ms.ts\"))\r\n            .setSimulateIOErrors(false)\r\n            .setSimulateUnknownLength(false)\r\n            .setSimulatePartialReads(false)\r\n            .build();\r\n\r\n    while (!tsDurationReader.isDurationReadFinished()) {\r\n      int result = tsDurationReader.readDuration(input, seekPositionHolder, /* pcrPid= */ 256);\r\n      if (result == Extractor.RESULT_END_OF_INPUT) {\r\n        break;\r\n      }\r\n      if (result == Extractor.RESULT_SEEK) {\r\n        input.setPosition((int) seekPositionHolder.position);\r\n      }\r\n    }\r\n    assertThat(tsDurationReader.getDurationUs() / 1000).isEqualTo(2500);', 130, 1, NULL, '2019-03-01 07:30:35', '2019-03-01 07:30:35', NULL),
(563, 'testReadDuration_midStream_returnsCorrectDuration', 'FakeExtractorInput input =\r\n        new FakeExtractorInput.Builder()\r\n            .setData(TestUtil.getByteArray(RuntimeEnvironment.application, \"ts/bbb_2500ms.ts\"))\r\n            .setSimulateIOErrors(false)\r\n            .setSimulateUnknownLength(false)\r\n            .setSimulatePartialReads(false)\r\n            .build();\r\n\r\n    input.setPosition(1234);\r\n    while (!tsDurationReader.isDurationReadFinished()) {\r\n      int result = tsDurationReader.readDuration(input, seekPositionHolder, /* pcrPid= */ 256);\r\n      if (result == Extractor.RESULT_END_OF_INPUT) {\r\n        break;\r\n      }\r\n      if (result == Extractor.RESULT_SEEK) {\r\n        input.setPosition((int) seekPositionHolder.position);\r\n      }\r\n    }\r\n    assertThat(tsDurationReader.getDurationUs() / 1000).isEqualTo(2500);', 130, 1, NULL, '2019-03-01 07:31:10', '2019-03-01 07:31:10', NULL),
(564, 'testTsExtractorReads_nonSeekTableFile_returnSeekableSeekMap', 'Uri fileUri = TestUtil.buildAssetUri(TEST_FILE);\r\n    TsExtractor extractor = new TsExtractor();\r\n\r\n    SeekMap seekMap =\r\n        TestUtil.extractSeekMap(extractor, new FakeExtractorOutput(), dataSource, fileUri);\r\n\r\n    assertThat(seekMap).isNotNull();\r\n    assertThat(seekMap.getDurationUs()).isEqualTo(DURATION_US);\r\n    assertThat(seekMap.isSeekable()).isTrue();', 130, 3, NULL, '2019-03-01 07:38:54', '2019-03-01 07:38:54', NULL),
(565, 'testHandlePendingSeek_handlesSeekingToPositionInFile_extractsCorrectFrame', 'TsExtractor extractor = new TsExtractor();\r\n    Uri fileUri = TestUtil.buildAssetUri(TEST_FILE);\r\n\r\n    FakeExtractorOutput extractorOutput = new FakeExtractorOutput();\r\n    SeekMap seekMap = TestUtil.extractSeekMap(extractor, extractorOutput, dataSource, fileUri);\r\n    FakeTrackOutput trackOutput = extractorOutput.trackOutputs.get(AUDIO_TRACK_ID);\r\n\r\n    long targetSeekTimeUs = 987_000;\r\n    int extractedFrameIndex =\r\n        TestUtil.seekToTimeUs(\r\n            extractor, seekMap, targetSeekTimeUs, dataSource, trackOutput, fileUri);\r\n\r\n    assertThat(extractedFrameIndex).isNotEqualTo(-1);\r\n    assertFirstFrameAfterSeekContainTargetSeekTime(\r\n        trackOutput, targetSeekTimeUs, extractedFrameIndex);', 130, 4, NULL, '2019-03-01 07:39:30', '2019-03-01 07:39:30', NULL),
(566, 'testHandlePendingSeek_handlesSeekToEoF_extractsLastFrame', 'TsExtractor extractor = new TsExtractor();\r\n    Uri fileUri = TestUtil.buildAssetUri(TEST_FILE);\r\n\r\n    FakeExtractorOutput extractorOutput = new FakeExtractorOutput();\r\n    SeekMap seekMap = TestUtil.extractSeekMap(extractor, extractorOutput, dataSource, fileUri);\r\n    FakeTrackOutput trackOutput = extractorOutput.trackOutputs.get(AUDIO_TRACK_ID);\r\n\r\n    long targetSeekTimeUs = seekMap.getDurationUs();\r\n\r\n    int extractedFrameIndex =\r\n        TestUtil.seekToTimeUs(\r\n            extractor, seekMap, targetSeekTimeUs, dataSource, trackOutput, fileUri);\r\n\r\n    assertThat(extractedFrameIndex).isNotEqualTo(-1);\r\n    assertFirstFrameAfterSeekContainTargetSeekTime(\r\n        trackOutput, targetSeekTimeUs, extractedFrameIndex);', 130, 4, NULL, '2019-03-01 07:39:41', '2019-03-01 07:39:41', NULL),
(567, 'testHandlePendingSeek_handlesSeekingBackward_extractsCorrectFrame', 'TsExtractor extractor = new TsExtractor();\r\n    Uri fileUri = TestUtil.buildAssetUri(TEST_FILE);\r\n\r\n    FakeExtractorOutput extractorOutput = new FakeExtractorOutput();\r\n    SeekMap seekMap = TestUtil.extractSeekMap(extractor, extractorOutput, dataSource, fileUri);\r\n    FakeTrackOutput trackOutput = extractorOutput.trackOutputs.get(AUDIO_TRACK_ID);\r\n\r\n    long firstSeekTimeUs = 987_000;\r\n    TestUtil.seekToTimeUs(extractor, seekMap, firstSeekTimeUs, dataSource, trackOutput, fileUri);\r\n\r\n    long targetSeekTimeUs = 0;\r\n    int extractedFrameIndex =\r\n        TestUtil.seekToTimeUs(\r\n            extractor, seekMap, targetSeekTimeUs, dataSource, trackOutput, fileUri);\r\n\r\n    assertThat(extractedFrameIndex).isNotEqualTo(-1);\r\n    assertFirstFrameAfterSeekContainTargetSeekTime(\r\n        trackOutput, targetSeekTimeUs, extractedFrameIndex);', 130, 4, NULL, '2019-03-01 07:40:02', '2019-03-01 07:40:02', NULL),
(568, 'testHandlePendingSeek_handlesSeekingForward_extractsCorrectFrame', 'TsExtractor extractor = new TsExtractor();\r\n    Uri fileUri = TestUtil.buildAssetUri(TEST_FILE);\r\n\r\n    FakeExtractorOutput extractorOutput = new FakeExtractorOutput();\r\n    SeekMap seekMap = TestUtil.extractSeekMap(extractor, extractorOutput, dataSource, fileUri);\r\n    FakeTrackOutput trackOutput = extractorOutput.trackOutputs.get(AUDIO_TRACK_ID);\r\n\r\n    long firstSeekTimeUs = 987_000;\r\n    TestUtil.seekToTimeUs(extractor, seekMap, firstSeekTimeUs, dataSource, trackOutput, fileUri);\r\n\r\n    long targetSeekTimeUs = 1_234_000;\r\n    int extractedFrameIndex =\r\n        TestUtil.seekToTimeUs(\r\n            extractor, seekMap, targetSeekTimeUs, dataSource, trackOutput, fileUri);\r\n\r\n    assertThat(extractedFrameIndex).isNotEqualTo(-1);\r\n    assertFirstFrameAfterSeekContainTargetSeekTime(\r\n        trackOutput, targetSeekTimeUs, extractedFrameIndex);', 130, 4, NULL, '2019-03-01 07:40:13', '2019-03-01 07:40:13', NULL),
(569, 'testHandlePendingSeek_handlesRandomSeeks_extractsCorrectFrame', 'TsExtractor extractor = new TsExtractor();\r\n    Uri fileUri = TestUtil.buildAssetUri(TEST_FILE);\r\n\r\n    FakeExtractorOutput extractorOutput = new FakeExtractorOutput();\r\n    SeekMap seekMap = TestUtil.extractSeekMap(extractor, extractorOutput, dataSource, fileUri);\r\n    FakeTrackOutput trackOutput = extractorOutput.trackOutputs.get(AUDIO_TRACK_ID);\r\n\r\n    long numSeek = 100;\r\n    for (long i = 0; i < numSeek; i++) {\r\n      long targetSeekTimeUs = random.nextInt(DURATION_US + 1);\r\n      int extractedFrameIndex =\r\n          TestUtil.seekToTimeUs(\r\n              extractor, seekMap, targetSeekTimeUs, dataSource, trackOutput, fileUri);\r\n\r\n      assertThat(extractedFrameIndex).isNotEqualTo(-1);\r\n      assertFirstFrameAfterSeekContainTargetSeekTime(\r\n          trackOutput, targetSeekTimeUs, extractedFrameIndex);\r\n    }', 130, 400, NULL, '2019-03-01 07:40:32', '2019-03-01 07:40:32', NULL),
(570, 'testHandlePendingSeek_handlesRandomSeeksAfterReadingFileOnce_extractsCorrectFrame', 'TsExtractor extractor = new TsExtractor();\r\n    Uri fileUri = TestUtil.buildAssetUri(TEST_FILE);\r\n\r\n    FakeExtractorOutput extractorOutput = new FakeExtractorOutput();\r\n    readInputFileOnce(extractor, extractorOutput, fileUri);\r\n    SeekMap seekMap = extractorOutput.seekMap;\r\n    FakeTrackOutput trackOutput = extractorOutput.trackOutputs.get(AUDIO_TRACK_ID);\r\n\r\n    long numSeek = 100;\r\n    for (long i = 0; i < numSeek; i++) {\r\n      long targetSeekTimeUs = random.nextInt(DURATION_US + 1);\r\n      int extractedFrameIndex =\r\n          TestUtil.seekToTimeUs(\r\n              extractor, seekMap, targetSeekTimeUs, dataSource, trackOutput, fileUri);\r\n\r\n      assertThat(extractedFrameIndex).isNotEqualTo(-1);\r\n      assertFirstFrameAfterSeekContainTargetSeekTime(\r\n          trackOutput, targetSeekTimeUs, extractedFrameIndex);\r\n    }', 130, 400, NULL, '2019-03-01 07:40:57', '2019-03-01 07:40:57', NULL),
(571, 'testSample', 'ExtractorAsserts.assertBehavior(TsExtractor::new, \"ts/sample.ts\");', 131, 1, NULL, '2019-03-01 07:42:14', '2019-03-01 07:42:14', NULL),
(572, 'testStreamWithJunkData', 'Random random = new Random(0);\r\n    byte[] fileData = TestUtil.getByteArray(RuntimeEnvironment.application, \"ts/sample.ts\");\r\n    ByteArrayOutputStream out = new ByteArrayOutputStream(fileData.length * 2);\r\n    int bytesLeft = fileData.length;\r\n\r\n    writeJunkData(out, random.nextInt(TS_PACKET_SIZE - 1) + 1);\r\n    out.write(fileData, 0, TS_PACKET_SIZE * 5);\r\n    bytesLeft -= TS_PACKET_SIZE * 5;\r\n\r\n    for (int i = TS_PACKET_SIZE * 5; i < fileData.length; i += 5 * TS_PACKET_SIZE) {\r\n      writeJunkData(out, random.nextInt(TS_PACKET_SIZE));\r\n      int length = Math.min(5 * TS_PACKET_SIZE, bytesLeft);\r\n      out.write(fileData, i, length);\r\n      bytesLeft -= length;\r\n    }\r\n    out.write(TS_SYNC_BYTE);\r\n    writeJunkData(out, random.nextInt(TS_PACKET_SIZE - 1) + 1);\r\n    fileData = out.toByteArray();\r\n\r\n    ExtractorAsserts.assertOutput(\r\n        TsExtractor::new, \"ts/sample.ts\", fileData, RuntimeEnvironment.application);', 131, 1, NULL, '2019-03-01 07:42:50', '2019-03-01 07:42:50', NULL),
(573, 'testCustomPesReader', 'CustomTsPayloadReaderFactory factory = new CustomTsPayloadReaderFactory(true, false);\r\n    TsExtractor tsExtractor =\r\n        new TsExtractor(TsExtractor.MODE_MULTI_PMT, new TimestampAdjuster(0), factory);\r\n    FakeExtractorInput input =\r\n        new FakeExtractorInput.Builder()\r\n            .setData(TestUtil.getByteArray(RuntimeEnvironment.application, \"ts/sample.ts\"))\r\n            .setSimulateIOErrors(false)\r\n            .setSimulateUnknownLength(false)\r\n            .setSimulatePartialReads(false)\r\n            .build();\r\n    FakeExtractorOutput output = new FakeExtractorOutput();\r\n    tsExtractor.init(output);\r\n    PositionHolder seekPositionHolder = new PositionHolder();\r\n    int readResult = Extractor.RESULT_CONTINUE;\r\n    while (readResult != Extractor.RESULT_END_OF_INPUT) {\r\n      readResult = tsExtractor.read(input, seekPositionHolder);\r\n      if (readResult == Extractor.RESULT_SEEK) {\r\n        input.setPosition((int) seekPositionHolder.position);\r\n      }\r\n    }\r\n    CustomEsReader reader = factory.esReader;\r\n    assertThat(reader.packetsRead).isEqualTo(2);\r\n    TrackOutput trackOutput = reader.getTrackOutput();\r\n    assertThat(trackOutput == output.trackOutputs.get(257 /* PID of audio track. */)).isTrue();\r\n    assertThat(((FakeTrackOutput) trackOutput).format)\r\n        .isEqualTo(Format.createTextSampleFormat(\"1/257\", \"mime\", null, 0, 0, \"und\", null, 0));', 131, 3, NULL, '2019-03-01 07:48:13', '2019-03-01 07:48:13', NULL),
(574, 'testCustomInitialSectionReader', 'CustomTsPayloadReaderFactory factory = new CustomTsPayloadReaderFactory(false, true);\r\n    TsExtractor tsExtractor =\r\n        new TsExtractor(TsExtractor.MODE_MULTI_PMT, new TimestampAdjuster(0), factory);\r\n    FakeExtractorInput input =\r\n        new FakeExtractorInput.Builder()\r\n            .setData(TestUtil.getByteArray(RuntimeEnvironment.application, \"ts/sample_with_sdt.ts\"))\r\n            .setSimulateIOErrors(false)\r\n            .setSimulateUnknownLength(false)\r\n            .setSimulatePartialReads(false)\r\n            .build();\r\n    tsExtractor.init(new FakeExtractorOutput());\r\n    PositionHolder seekPositionHolder = new PositionHolder();\r\n    int readResult = Extractor.RESULT_CONTINUE;\r\n    while (readResult != Extractor.RESULT_END_OF_INPUT) {\r\n      readResult = tsExtractor.read(input, seekPositionHolder);\r\n      if (readResult == Extractor.RESULT_SEEK) {\r\n        input.setPosition((int) seekPositionHolder.position);\r\n      }\r\n    }\r\n    assertThat(factory.sdtReader.consumedSdts).isEqualTo(2);', 131, 1, NULL, '2019-03-01 07:48:39', '2019-03-01 07:48:39', NULL),
(575, 'testSample', 'ExtractorAsserts.assertBehavior(WavExtractor::new, \"wav/sample.wav\");', 132, 1, NULL, '2019-03-01 08:27:39', '2019-03-01 08:27:39', NULL),
(576, 'testIsSeekable_forKnownInputLength_returnSeekable', 'constantBitrateSeekMap =\r\n        new ConstantBitrateSeekMap(\r\n            /* inputLength= */ 1000,\r\n            /* firstFrameBytePosition= */ 0,\r\n            /* bitrate= */ 8_000,\r\n            /* frameSize= */ 100);\r\n    assertThat(constantBitrateSeekMap.isSeekable()).isTrue();', 133, 1, NULL, '2019-03-01 08:30:10', '2019-03-01 08:30:10', NULL),
(577, 'testIsSeekable_forUnknownInputLength_returnUnseekable', 'constantBitrateSeekMap =\r\n        new ConstantBitrateSeekMap(\r\n            /* inputLength= */ C.LENGTH_UNSET,\r\n            /* firstFrameBytePosition= */ 0,\r\n            /* bitrate= */ 8_000,\r\n            /* frameSize= */ 100);\r\n    assertThat(constantBitrateSeekMap.isSeekable()).isFalse();', 133, 1, NULL, '2019-03-01 08:30:37', '2019-03-01 08:30:37', NULL),
(578, 'testGetSeekPoints_forUnseekableInput_returnSeekPoint0', 'int firstBytePosition = 100;\r\n    constantBitrateSeekMap =\r\n        new ConstantBitrateSeekMap(\r\n            /* inputLength= */ C.LENGTH_UNSET,\r\n            /* firstFrameBytePosition= */ firstBytePosition,\r\n            /* bitrate= */ 8_000,\r\n            /* frameSize= */ 100);\r\n    SeekMap.SeekPoints seekPoints = constantBitrateSeekMap.getSeekPoints(/* timeUs= */ 123);\r\n    assertThat(seekPoints.first.timeUs).isEqualTo(0);\r\n    assertThat(seekPoints.first.position).isEqualTo(firstBytePosition);\r\n    assertThat(seekPoints.second).isEqualTo(seekPoints.first);', 133, 3, NULL, '2019-03-01 08:32:27', '2019-03-01 08:32:27', NULL);
INSERT INTO `test_codes` (`id`, `method_name`, `method_body`, `test_code_class_id`, `assert_count`, `deleted_at`, `created_at`, `updated_at`, `source_codes`) VALUES
(579, 'testGetDurationUs_forKnownInputLength_returnCorrectDuration', 'constantBitrateSeekMap =\r\n        new ConstantBitrateSeekMap(\r\n            /* inputLength= */ 2_300,\r\n            /* firstFrameBytePosition= */ 100,\r\n            /* bitrate= */ 8_000,\r\n            /* frameSize= */ 100);\r\n    // Bitrate = 8000 (bits/s) = 1000 (bytes/s)\r\n    // FrameSize = 100 (bytes), so 1 frame = 1s = 100_000 us\r\n    // Input length = 2300 (bytes), first frame = 100, so duration = 2_200_000 us.\r\n    assertThat(constantBitrateSeekMap.getDurationUs()).isEqualTo(2_200_000);', 133, 1, NULL, '2019-03-01 08:32:56', '2019-03-01 08:32:56', NULL),
(580, 'testGetDurationUs_forUnnnownInputLength_returnUnknownDuration', 'constantBitrateSeekMap =\r\n        new ConstantBitrateSeekMap(\r\n            /* inputLength= */ C.LENGTH_UNSET,\r\n            /* firstFrameBytePosition= */ 100,\r\n            /* bitrate= */ 8_000,\r\n            /* frameSize= */ 100);\r\n    assertThat(constantBitrateSeekMap.getDurationUs()).isEqualTo(C.TIME_UNSET);', 133, 1, NULL, '2019-03-01 08:33:11', '2019-03-01 08:33:11', NULL),
(581, 'testGetSeekPoints_forSeekableInput_forSyncPosition0_return1SeekPoint', 'int firstBytePosition = 100;\r\n    constantBitrateSeekMap =\r\n        new ConstantBitrateSeekMap(\r\n            /* inputLength= */ 2_300,\r\n            /* firstFrameBytePosition= */ firstBytePosition,\r\n            /* bitrate= */ 8_000,\r\n            /* frameSize= */ 100);\r\n    SeekMap.SeekPoints seekPoints = constantBitrateSeekMap.getSeekPoints(/* timeUs= */ 0);\r\n    assertThat(seekPoints.first.timeUs).isEqualTo(0);\r\n    assertThat(seekPoints.first.position).isEqualTo(firstBytePosition);\r\n    assertThat(seekPoints.second).isEqualTo(seekPoints.first);', 133, 3, NULL, '2019-03-01 08:33:27', '2019-03-01 08:33:27', NULL),
(582, 'testGetSeekPoints_forSeekableInput_forSeekPointAtSyncPosition_return1SeekPoint', 'constantBitrateSeekMap =\r\n        new ConstantBitrateSeekMap(\r\n            /* inputLength= */ 2_300,\r\n            /* firstFrameBytePosition= */ 100,\r\n            /* bitrate= */ 8_000,\r\n            /* frameSize= */ 100);\r\n    SeekMap.SeekPoints seekPoints = constantBitrateSeekMap.getSeekPoints(/* timeUs= */ 1_200_000);\r\n    // Bitrate = 8000 (bits/s) = 1000 (bytes/s)\r\n    // FrameSize = 100 (bytes), so 1 frame = 1s = 100_000 us\r\n    assertThat(seekPoints.first.timeUs).isEqualTo(1_200_000);\r\n    assertThat(seekPoints.first.position).isEqualTo(1300);\r\n    assertThat(seekPoints.second).isEqualTo(seekPoints.first);', 133, 3, NULL, '2019-03-01 08:33:39', '2019-03-01 08:33:39', NULL),
(583, 'testGetSeekPoints_forSeekableInput_forNonSyncSeekPosition_return2SeekPoints', 'constantBitrateSeekMap =\r\n        new ConstantBitrateSeekMap(\r\n            /* inputLength= */ 2_300,\r\n            /* firstFrameBytePosition= */ 100,\r\n            /* bitrate= */ 8_000,\r\n            /* frameSize= */ 100);\r\n    SeekMap.SeekPoints seekPoints = constantBitrateSeekMap.getSeekPoints(/* timeUs= */ 345_678);\r\n    // Bitrate = 8000 (bits/s) = 1000 (bytes/s)\r\n    // FrameSize = 100 (bytes), so 1 frame = 1s = 100_000 us\r\n    assertThat(seekPoints.first.timeUs).isEqualTo(300_000);\r\n    assertThat(seekPoints.first.position).isEqualTo(400);\r\n    assertThat(seekPoints.second.timeUs).isEqualTo(400_000);\r\n    assertThat(seekPoints.second.position).isEqualTo(500);', 133, 4, NULL, '2019-03-01 08:33:56', '2019-03-01 08:33:56', NULL),
(584, 'testGetSeekPoints_forSeekableInput_forSeekPointWithinLastFrame_return1SeekPoint', 'constantBitrateSeekMap =\r\n        new ConstantBitrateSeekMap(\r\n            /* inputLength= */ 2_300,\r\n            /* firstFrameBytePosition= */ 100,\r\n            /* bitrate= */ 8_000,\r\n            /* frameSize= */ 100);\r\n    SeekMap.SeekPoints seekPoints = constantBitrateSeekMap.getSeekPoints(/* timeUs= */ 2_123_456);\r\n    assertThat(seekPoints.first.timeUs).isEqualTo(2_100_000);\r\n    assertThat(seekPoints.first.position).isEqualTo(2_200);\r\n    assertThat(seekPoints.second).isEqualTo(seekPoints.first);', 133, 3, NULL, '2019-03-01 08:34:21', '2019-03-01 08:34:21', NULL),
(585, 'testGetSeekPoints_forSeekableInput_forSeekPointAtEndOfStream_return1SeekPoint', 'constantBitrateSeekMap =\r\n        new ConstantBitrateSeekMap(\r\n            /* inputLength= */ 2_300,\r\n            /* firstFrameBytePosition= */ 100,\r\n            /* bitrate= */ 8_000,\r\n            /* frameSize= */ 100);\r\n    SeekMap.SeekPoints seekPoints = constantBitrateSeekMap.getSeekPoints(/* timeUs= */ 2_200_000);\r\n    assertThat(seekPoints.first.timeUs).isEqualTo(2_100_000);\r\n    assertThat(seekPoints.first.position).isEqualTo(2_200);\r\n    assertThat(seekPoints.second).isEqualTo(seekPoints.first);', 133, 3, NULL, '2019-03-01 08:34:36', '2019-03-01 08:34:36', NULL),
(586, 'testGetTimeUsAtPosition_forPosition0_return0', 'constantBitrateSeekMap =\r\n        new ConstantBitrateSeekMap(\r\n            /* inputLength= */ 2_300,\r\n            /* firstFrameBytePosition= */ 100,\r\n            /* bitrate= */ 8_000,\r\n            /* frameSize= */ 100);\r\n    long timeUs = constantBitrateSeekMap.getTimeUsAtPosition(0);\r\n    assertThat(timeUs).isEqualTo(0);', 133, 1, NULL, '2019-03-01 08:35:11', '2019-03-01 08:35:11', NULL),
(587, 'testGetTimeUsAtPosition_forPositionWithinStream_returnCorrectTime', 'constantBitrateSeekMap =\r\n        new ConstantBitrateSeekMap(\r\n            /* inputLength= */ 2_300,\r\n            /* firstFrameBytePosition= */ 100,\r\n            /* bitrate= */ 8_000,\r\n            /* frameSize= */ 100);\r\n    long timeUs = constantBitrateSeekMap.getTimeUsAtPosition(1234);\r\n    assertThat(timeUs).isEqualTo(1_134_000);', 133, 1, NULL, '2019-03-01 08:35:24', '2019-03-01 08:35:24', NULL),
(588, 'testGetTimeUsAtPosition_forPositionAtEndOfStream_returnStreamDuration', 'constantBitrateSeekMap =\r\n        new ConstantBitrateSeekMap(\r\n            /* inputLength= */ 2_300,\r\n            /* firstFrameBytePosition= */ 100,\r\n            /* bitrate= */ 8_000,\r\n            /* frameSize= */ 100);\r\n    long timeUs = constantBitrateSeekMap.getTimeUsAtPosition(2300);\r\n    assertThat(timeUs).isEqualTo(constantBitrateSeekMap.getDurationUs());', 133, 1, NULL, '2019-03-01 08:35:37', '2019-03-01 08:35:37', NULL),
(589, 'testInitialPosition', 'FakeDataSource testDataSource = buildDataSource();\r\n    DefaultExtractorInput input =\r\n        new DefaultExtractorInput(testDataSource, 123, C.LENGTH_UNSET);\r\n    assertThat(input.getPosition()).isEqualTo(123);', 134, 1, NULL, '2019-03-01 12:31:06', '2019-03-01 12:31:06', NULL),
(590, 'testRead', 'DefaultExtractorInput input = createDefaultExtractorInput();\r\n    byte[] target = new byte[TEST_DATA.length];\r\n    // We expect to perform three reads of three bytes, as setup in buildTestDataSource.\r\n    int bytesRead = 0;\r\n    bytesRead += input.read(target, 0, TEST_DATA.length);\r\n    assertThat(bytesRead).isEqualTo(3);\r\n    bytesRead += input.read(target, 3, TEST_DATA.length);\r\n    assertThat(bytesRead).isEqualTo(6);\r\n    bytesRead += input.read(target, 6, TEST_DATA.length);\r\n    assertThat(bytesRead).isEqualTo(9);\r\n    // Check the read data is correct.\r\n    assertThat(Arrays.equals(TEST_DATA, target)).isTrue();\r\n    // Check we\'re now indicated that the end of input is reached.\r\n    int expectedEndOfInput = input.read(target, 0, TEST_DATA.length);\r\n    assertThat(expectedEndOfInput).isEqualTo(RESULT_END_OF_INPUT);', 134, 4, NULL, '2019-03-01 12:31:55', '2019-03-01 12:31:55', NULL),
(591, 'testReadPeeked', 'DefaultExtractorInput input = createDefaultExtractorInput();\r\n    byte[] target = new byte[TEST_DATA.length];\r\n\r\n    input.advancePeekPosition(TEST_DATA.length);\r\n\r\n    int bytesRead = input.read(target, 0, TEST_DATA.length);\r\n    assertThat(bytesRead).isEqualTo(TEST_DATA.length);\r\n\r\n    // Check the read data is correct.\r\n    assertThat(Arrays.equals(TEST_DATA, target)).isTrue();', 134, 2, NULL, '2019-03-01 12:32:10', '2019-03-01 12:32:10', NULL),
(592, 'testReadMoreDataPeeked', 'DefaultExtractorInput input = createDefaultExtractorInput();\r\n    byte[] target = new byte[TEST_DATA.length];\r\n\r\n    input.advancePeekPosition(TEST_DATA.length);\r\n\r\n    int bytesRead = input.read(target, 0, TEST_DATA.length + 1);\r\n    assertThat(bytesRead).isEqualTo(TEST_DATA.length);\r\n\r\n    // Check the read data is correct.\r\n    assertThat(Arrays.equals(TEST_DATA, target)).isTrue();', 134, 2, NULL, '2019-03-01 12:32:29', '2019-03-01 12:32:29', NULL),
(593, 'testReadFullyOnce', 'DefaultExtractorInput input = createDefaultExtractorInput();\r\n    byte[] target = new byte[TEST_DATA.length];\r\n    input.readFully(target, 0, TEST_DATA.length);\r\n    // Check that we read the whole of TEST_DATA.\r\n    assertThat(Arrays.equals(TEST_DATA, target)).isTrue();\r\n    assertThat(input.getPosition()).isEqualTo(TEST_DATA.length);\r\n    // Check that we see end of input if we read again with allowEndOfInput set.\r\n    boolean result = input.readFully(target, 0, 1, true);\r\n    assertThat(result).isFalse();\r\n    // Check that we fail with EOFException we read again with allowEndOfInput unset.\r\n    try {\r\n      input.readFully(target, 0, 1);\r\n      fail();\r\n    } catch (EOFException e) {\r\n      // Expected.\r\n    }', 134, 3, NULL, '2019-03-01 12:34:35', '2019-03-01 12:34:35', NULL),
(594, 'testReadFullyTwice', '// Read TEST_DATA in two parts.\r\n    DefaultExtractorInput input = createDefaultExtractorInput();\r\n    byte[] target = new byte[5];\r\n    input.readFully(target, 0, 5);\r\n    assertThat(Arrays.equals(copyOf(TEST_DATA, 5), target)).isTrue();\r\n    assertThat(input.getPosition()).isEqualTo(5);\r\n    target = new byte[4];\r\n    input.readFully(target, 0, 4);\r\n    assertThat(Arrays.equals(copyOfRange(TEST_DATA, 5, 9), target)).isTrue();\r\n    assertThat(input.getPosition()).isEqualTo(5 + 4);', 134, 2, NULL, '2019-03-01 12:34:59', '2019-03-01 12:34:59', NULL),
(595, 'testReadFullyTooMuch', '// Read more than TEST_DATA. Should fail with an EOFException. Position should not update.\r\n    DefaultExtractorInput input = createDefaultExtractorInput();\r\n    try {\r\n      byte[] target = new byte[TEST_DATA.length + 1];\r\n      input.readFully(target, 0, TEST_DATA.length + 1);\r\n      fail();\r\n    } catch (EOFException e) {\r\n      // Expected.\r\n    }\r\n    assertThat(input.getPosition()).isEqualTo(0);\r\n\r\n    // Read more than TEST_DATA with allowEndOfInput set. Should fail with an EOFException because\r\n    // the end of input isn\'t encountered immediately. Position should not update.\r\n    input = createDefaultExtractorInput();\r\n    try {\r\n      byte[] target = new byte[TEST_DATA.length + 1];\r\n      input.readFully(target, 0, TEST_DATA.length + 1, true);\r\n      fail();\r\n    } catch (EOFException e) {\r\n      // Expected.\r\n    }\r\n    assertThat(input.getPosition()).isEqualTo(0);', 134, 2, NULL, '2019-03-01 12:35:27', '2019-03-01 12:35:27', NULL),
(596, 'testReadFullyWithFailingDataSource', 'FakeDataSource testDataSource = buildFailingDataSource();\r\n    DefaultExtractorInput input = new DefaultExtractorInput(testDataSource, 0, C.LENGTH_UNSET);\r\n    try {\r\n      byte[] target = new byte[TEST_DATA.length];\r\n      input.readFully(target, 0, TEST_DATA.length);\r\n      fail();\r\n    } catch (IOException e) {\r\n      // Expected.\r\n    }\r\n    // The position should not have advanced.\r\n    assertThat(input.getPosition()).isEqualTo(0);', 134, 1, NULL, '2019-03-01 12:35:46', '2019-03-01 12:35:46', NULL),
(597, 'testReadFullyHalfPeeked', 'DefaultExtractorInput input = createDefaultExtractorInput();\r\n    byte[] target = new byte[TEST_DATA.length];\r\n\r\n    input.advancePeekPosition(4);\r\n\r\n    input.readFully(target, 0, TEST_DATA.length);\r\n\r\n    // Check the read data is correct.\r\n    assertThat(Arrays.equals(TEST_DATA, target)).isTrue();\r\n    assertThat(input.getPosition()).isEqualTo(TEST_DATA.length);', 134, 2, NULL, '2019-03-01 12:36:01', '2019-03-01 12:36:01', NULL),
(598, 'testSkip', 'FakeDataSource testDataSource = buildDataSource();\r\n    DefaultExtractorInput input = new DefaultExtractorInput(testDataSource, 0, C.LENGTH_UNSET);\r\n    // We expect to perform three skips of three bytes, as setup in buildTestDataSource.\r\n    for (int i = 0; i < 3; i++) {\r\n      assertThat(input.skip(TEST_DATA.length)).isEqualTo(3);\r\n    }\r\n    // Check we\'re now indicated that the end of input is reached.\r\n    int expectedEndOfInput = input.skip(TEST_DATA.length);\r\n    assertThat(expectedEndOfInput).isEqualTo(RESULT_END_OF_INPUT);', 134, 4, NULL, '2019-03-01 12:36:51', '2019-03-01 12:36:51', NULL),
(599, 'testLargeSkip', 'FakeDataSource testDataSource = buildLargeDataSource();\r\n    DefaultExtractorInput input = new DefaultExtractorInput(testDataSource, 0, C.LENGTH_UNSET);\r\n    // Check that skipping the entire data source succeeds.\r\n    int bytesToSkip = LARGE_TEST_DATA_LENGTH;\r\n    while (bytesToSkip > 0) {\r\n      bytesToSkip -= input.skip(bytesToSkip);\r\n    }\r\n  }', 134, 0, NULL, '2019-03-01 12:37:30', '2019-03-01 12:37:30', NULL),
(600, 'testSkipFullyOnce', '// Skip TEST_DATA.\r\n    DefaultExtractorInput input = createDefaultExtractorInput();\r\n    input.skipFully(TEST_DATA.length);\r\n    assertThat(input.getPosition()).isEqualTo(TEST_DATA.length);\r\n    // Check that we see end of input if we skip again with allowEndOfInput set.\r\n    boolean result = input.skipFully(1, true);\r\n    assertThat(result).isFalse();\r\n    // Check that we fail with EOFException we skip again.\r\n    try {\r\n      input.skipFully(1);\r\n      fail();\r\n    } catch (EOFException e) {\r\n      // Expected.\r\n    }', 134, 2, NULL, '2019-03-01 12:38:12', '2019-03-01 12:38:12', NULL),
(601, 'testSkipFullyTwice', '// Skip TEST_DATA in two parts.\r\n    DefaultExtractorInput input = createDefaultExtractorInput();\r\n    input.skipFully(5);\r\n    assertThat(input.getPosition()).isEqualTo(5);\r\n    input.skipFully(4);\r\n    assertThat(input.getPosition()).isEqualTo(5 + 4);', 134, 2, NULL, '2019-03-01 12:38:29', '2019-03-01 12:38:29', NULL),
(602, 'testSkipFullyTwicePeeked', '// Skip TEST_DATA.\r\n    DefaultExtractorInput input = createDefaultExtractorInput();\r\n\r\n    input.advancePeekPosition(TEST_DATA.length);\r\n\r\n    int halfLength = TEST_DATA.length / 2;\r\n    input.skipFully(halfLength);\r\n    assertThat(input.getPosition()).isEqualTo(halfLength);\r\n\r\n    input.skipFully(TEST_DATA.length - halfLength);\r\n    assertThat(input.getPosition()).isEqualTo(TEST_DATA.length);', 134, 2, NULL, '2019-03-01 12:38:52', '2019-03-01 12:38:52', NULL),
(603, 'testSkipFullyTwicePeeked', '// Skip TEST_DATA.\r\n    DefaultExtractorInput input = createDefaultExtractorInput();\r\n\r\n    input.advancePeekPosition(TEST_DATA.length);\r\n\r\n    int halfLength = TEST_DATA.length / 2;\r\n    input.skipFully(halfLength);\r\n    assertThat(input.getPosition()).isEqualTo(halfLength);\r\n\r\n    input.skipFully(TEST_DATA.length - halfLength);\r\n    assertThat(input.getPosition()).isEqualTo(TEST_DATA.length);', 134, 2, NULL, '2019-03-01 12:38:52', '2019-03-01 12:38:52', NULL),
(604, 'testSkipFullyTooMuch', '// Skip more than TEST_DATA. Should fail with an EOFException. Position should not update.\r\n    DefaultExtractorInput input = createDefaultExtractorInput();\r\n    try {\r\n      input.skipFully(TEST_DATA.length + 1);\r\n      fail();\r\n    } catch (EOFException e) {\r\n      // Expected.\r\n    }\r\n    assertThat(input.getPosition()).isEqualTo(0);\r\n\r\n    // Skip more than TEST_DATA with allowEndOfInput set. Should fail with an EOFException because\r\n    // the end of input isn\'t encountered immediately. Position should not update.\r\n    input = createDefaultExtractorInput();\r\n    try {\r\n      input.skipFully(TEST_DATA.length + 1, true);\r\n      fail();\r\n    } catch (EOFException e) {\r\n      // Expected.\r\n    }\r\n    assertThat(input.getPosition()).isEqualTo(0);', 134, 2, NULL, '2019-03-01 12:39:13', '2019-03-01 12:39:13', NULL),
(605, 'testSkipFullyWithFailingDataSource', 'FakeDataSource testDataSource = buildFailingDataSource();\r\n    DefaultExtractorInput input = new DefaultExtractorInput(testDataSource, 0, C.LENGTH_UNSET);\r\n    try {\r\n      input.skipFully(TEST_DATA.length);\r\n      fail();\r\n    } catch (IOException e) {\r\n      // Expected.\r\n    }\r\n    // The position should not have advanced.\r\n    assertThat(input.getPosition()).isEqualTo(0);', 134, 1, NULL, '2019-03-01 12:39:38', '2019-03-01 12:39:38', NULL),
(606, 'testSkipFullyLarge', '// Tests skipping an amount of data that\'s larger than any internal scratch space.\r\n    int largeSkipSize = 1024 * 1024;\r\n    FakeDataSource testDataSource = new FakeDataSource();\r\n    testDataSource.getDataSet().newDefaultData().appendReadData(new byte[largeSkipSize]);\r\n    testDataSource.open(new DataSpec(Uri.parse(TEST_URI)));\r\n\r\n    DefaultExtractorInput input = new DefaultExtractorInput(testDataSource, 0, C.LENGTH_UNSET);\r\n    input.skipFully(largeSkipSize);\r\n    assertThat(input.getPosition()).isEqualTo(largeSkipSize);\r\n    // Check that we fail with EOFException we skip again.\r\n    try {\r\n      input.skipFully(1);\r\n      fail();\r\n    } catch (EOFException e) {\r\n      // Expected.\r\n    }', 134, 1, NULL, '2019-03-01 12:40:31', '2019-03-01 12:40:31', NULL),
(607, 'testPeekFully', 'DefaultExtractorInput input = createDefaultExtractorInput();\r\n    byte[] target = new byte[TEST_DATA.length];\r\n    input.peekFully(target, 0, TEST_DATA.length);\r\n\r\n    // Check that we read the whole of TEST_DATA.\r\n    assertThat(Arrays.equals(TEST_DATA, target)).isTrue();\r\n    assertThat(input.getPosition()).isEqualTo(0);\r\n    assertThat(input.getPeekPosition()).isEqualTo(TEST_DATA.length);\r\n\r\n    // Check that we can read again from the buffer\r\n    byte[] target2 = new byte[TEST_DATA.length];\r\n    input.readFully(target2, 0, TEST_DATA.length);\r\n    assertThat(Arrays.equals(TEST_DATA, target2)).isTrue();\r\n    assertThat(input.getPosition()).isEqualTo(TEST_DATA.length);\r\n    assertThat(input.getPeekPosition()).isEqualTo(TEST_DATA.length);\r\n\r\n    // Check that we fail with EOFException if we peek again\r\n    try {\r\n      input.peekFully(target, 0, 1);\r\n      fail();\r\n    } catch (EOFException e) {\r\n      // Expected.\r\n    }', 134, 6, NULL, '2019-03-01 12:42:23', '2019-03-01 12:42:23', NULL),
(608, 'testPeekFullyAfterEofExceptionPeeksAsExpected', 'DefaultExtractorInput input = createDefaultExtractorInput();\r\n    byte[] target = new byte[TEST_DATA.length + 10];\r\n\r\n    try {\r\n      input.peekFully(target, /* offset= */ 0, target.length);\r\n      fail();\r\n    } catch (EOFException expected) {\r\n      // Do nothing. Expected.\r\n    }\r\n    input.peekFully(target, /* offset= */ 0, /* length= */ TEST_DATA.length);\r\n\r\n    assertThat(input.getPeekPosition()).isEqualTo(TEST_DATA.length);\r\n    assertThat(Arrays.equals(TEST_DATA, Arrays.copyOf(target, TEST_DATA.length))).isTrue();', 134, 2, NULL, '2019-03-01 12:42:52', '2019-03-01 12:42:52', NULL),
(609, 'testResetPeekPosition', 'DefaultExtractorInput input = createDefaultExtractorInput();\r\n    byte[] target = new byte[TEST_DATA.length];\r\n    input.peekFully(target, 0, TEST_DATA.length);\r\n\r\n    // Check that we read the whole of TEST_DATA.\r\n    assertThat(Arrays.equals(TEST_DATA, target)).isTrue();\r\n    assertThat(input.getPosition()).isEqualTo(0);\r\n\r\n    // Check that we can peek again after resetting.\r\n    input.resetPeekPosition();\r\n    byte[] target2 = new byte[TEST_DATA.length];\r\n    input.peekFully(target2, 0, TEST_DATA.length);\r\n    assertThat(Arrays.equals(TEST_DATA, target2)).isTrue();\r\n\r\n    // Check that we fail with EOFException if we peek past the end of the input.\r\n    try {\r\n      input.peekFully(target, 0, 1);\r\n      fail();\r\n    } catch (EOFException e) {\r\n      // Expected.\r\n    }', 134, 3, NULL, '2019-03-01 12:43:43', '2019-03-01 12:43:43', NULL),
(610, 'testPeekFullyAtEndOfStreamWithAllowEndOfInputSucceeds', 'DefaultExtractorInput input = createDefaultExtractorInput();\r\n    byte[] target = new byte[TEST_DATA.length];\r\n\r\n    // Check peeking up to the end of input succeeds.\r\n    assertThat(input.peekFully(target, 0, TEST_DATA.length, true)).isTrue();\r\n\r\n    // Check peeking at the end of input with allowEndOfInput signals the end of input.\r\n    assertThat(input.peekFully(target, 0, 1, true)).isFalse();', 134, 2, NULL, '2019-03-01 12:44:01', '2019-03-01 12:44:01', NULL),
(611, 'testPeekFullyAtEndThenReadEndOfInput', 'DefaultExtractorInput input = createDefaultExtractorInput();\r\n    byte[] target = new byte[TEST_DATA.length];\r\n\r\n    // Peek up to the end of the input.\r\n    assertThat(input.peekFully(target, 0, TEST_DATA.length, false)).isTrue();\r\n\r\n    // Peek the end of the input.\r\n    assertThat(input.peekFully(target, 0, 1, true)).isFalse();\r\n\r\n    // Read up to the end of the input.\r\n    assertThat(input.readFully(target, 0, TEST_DATA.length, false)).isTrue();\r\n\r\n    // Read the end of the input.\r\n    assertThat(input.readFully(target, 0, 1, true)).isFalse();', 134, 4, NULL, '2019-03-01 12:44:31', '2019-03-01 12:44:31', NULL),
(612, 'testPeekFullyAcrossEndOfInputWithAllowEndOfInputFails', 'DefaultExtractorInput input = createDefaultExtractorInput();\r\n    byte[] target = new byte[TEST_DATA.length];\r\n\r\n    // Check peeking before the end of input with allowEndOfInput succeeds.\r\n    assertThat(input.peekFully(target, 0, TEST_DATA.length - 1, true)).isTrue();\r\n\r\n    // Check peeking across the end of input with allowEndOfInput throws.\r\n    try {\r\n      input.peekFully(target, 0, 2, true);\r\n      fail();\r\n    } catch (EOFException e) {\r\n      // Expected.\r\n    }', 134, 1, NULL, '2019-03-01 12:44:57', '2019-03-01 12:44:57', NULL),
(613, 'testResetAndPeekFullyPastEndOfStreamWithAllowEndOfInputFails', 'DefaultExtractorInput input = createDefaultExtractorInput();\r\n    byte[] target = new byte[TEST_DATA.length];\r\n\r\n    // Check peeking up to the end of input succeeds.\r\n    assertThat(input.peekFully(target, 0, TEST_DATA.length, true)).isTrue();\r\n    input.resetPeekPosition();\r\n    try {\r\n      // Check peeking one more byte throws.\r\n      input.peekFully(target, 0, TEST_DATA.length + 1, true);\r\n      fail();\r\n    } catch (EOFException e) {\r\n      // Expected.\r\n    }', 134, 1, NULL, '2019-03-01 12:45:18', '2019-03-01 12:45:18', NULL),
(614, 'testCreateExtractors_returnExpectedClasses', 'DefaultExtractorsFactory defaultExtractorsFactory = new DefaultExtractorsFactory();\r\n\r\n    Extractor[] extractors = defaultExtractorsFactory.createExtractors();\r\n    List<Class> listCreatedExtractorClasses = new ArrayList<>();\r\n    for (Extractor extractor : extractors) {\r\n      listCreatedExtractorClasses.add(extractor.getClass());\r\n    }\r\n\r\n    Class[] expectedExtractorClassses =\r\n        new Class[] {\r\n          MatroskaExtractor.class,\r\n          FragmentedMp4Extractor.class,\r\n          Mp4Extractor.class,\r\n          Mp3Extractor.class,\r\n          AdtsExtractor.class,\r\n          Ac3Extractor.class,\r\n          TsExtractor.class,\r\n          FlvExtractor.class,\r\n          OggExtractor.class,\r\n          PsExtractor.class,\r\n          WavExtractor.class,\r\n          AmrExtractor.class\r\n        };\r\n\r\n    assertThat(listCreatedExtractorClasses).containsNoDuplicates();\r\n    assertThat(listCreatedExtractorClasses).containsExactlyElementsIn(expectedExtractorClassses);', 135, 2, NULL, '2019-03-04 04:03:28', '2019-03-04 04:03:28', NULL),
(615, 'testPeekId3Data_returnNull_ifId3TagNotPresentAtBeginningOfInput', 'Id3Peeker id3Peeker = new Id3Peeker();\r\n    FakeExtractorInput input =\r\n        new FakeExtractorInput.Builder()\r\n            .setData(new byte[] {1, \'I\', \'D\', \'3\', 2, 3, 4, 5, 6, 7, 8, 9, 10})\r\n            .build();\r\n\r\n    Metadata metadata = id3Peeker.peekId3Data(input, /* id3FramePredicate= */ null);\r\n    assertThat(metadata).isNull();', 136, 1, NULL, '2019-03-04 04:10:26', '2019-03-04 04:10:26', NULL),
(616, 'testPeekId3Data_returnId3Tag_ifId3TagPresent', 'Id3Peeker id3Peeker = new Id3Peeker();\r\n\r\n    byte[] rawId3 =\r\n        Id3DecoderTest.buildSingleFrameTag(\r\n            \"APIC\",\r\n            new byte[] {\r\n              3, 105, 109, 97, 103, 101, 47, 106, 112, 101, 103, 0, 16, 72, 101, 108, 108, 111, 32,\r\n              87, 111, 114, 108, 100, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0\r\n            });\r\n    FakeExtractorInput input = new FakeExtractorInput.Builder().setData(rawId3).build();\r\n\r\n    Metadata metadata = id3Peeker.peekId3Data(input, /* id3FramePredicate= */ null);\r\n    assertThat(metadata.length()).isEqualTo(1);\r\n\r\n    ApicFrame apicFrame = (ApicFrame) metadata.get(0);\r\n    assertThat(apicFrame.mimeType).isEqualTo(\"image/jpeg\");\r\n    assertThat(apicFrame.pictureType).isEqualTo(16);\r\n    assertThat(apicFrame.description).isEqualTo(\"Hello World\");\r\n    assertThat(apicFrame.pictureData).hasLength(10);\r\n    assertThat(apicFrame.pictureData).isEqualTo(new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 0});', 136, 5, NULL, '2019-03-04 04:10:41', '2019-03-04 04:10:41', NULL),
(617, 'testPeekId3Data_returnId3TagAccordingToGivenPredicate_ifId3TagPresent', 'Id3Peeker id3Peeker = new Id3Peeker();\r\n\r\n    byte[] rawId3 =\r\n        Id3DecoderTest.buildMultiFramesTag(\r\n            new Id3DecoderTest.FrameSpec(\r\n                \"COMM\",\r\n                new byte[] {\r\n                  3, 101, 110, 103, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 0, 116,\r\n                  101, 120, 116, 0\r\n                }),\r\n            new Id3DecoderTest.FrameSpec(\r\n                \"APIC\",\r\n                new byte[] {\r\n                  3, 105, 109, 97, 103, 101, 47, 106, 112, 101, 103, 0, 16, 72, 101, 108, 108, 111,\r\n                  32, 87, 111, 114, 108, 100, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0\r\n                }));\r\n    FakeExtractorInput input = new FakeExtractorInput.Builder().setData(rawId3).build();\r\n\r\n    Metadata metadata =\r\n        id3Peeker.peekId3Data(\r\n            input,\r\n            (majorVersion, id0, id1, id2, id3) ->\r\n                id0 == \'C\' && id1 == \'O\' && id2 == \'M\' && id3 == \'M\');\r\n    assertThat(metadata.length()).isEqualTo(1);\r\n\r\n    CommentFrame commentFrame = (CommentFrame) metadata.get(0);\r\n    assertThat(commentFrame.language).isEqualTo(\"eng\");\r\n    assertThat(commentFrame.description).isEqualTo(\"description\");\r\n    assertThat(commentFrame.text).isEqualTo(\"text\");', 136, 4, NULL, '2019-03-04 04:11:01', '2019-03-04 04:11:01', NULL);

-- --------------------------------------------------------

--
-- Table structure for table `test_code_classes`
--

CREATE TABLE `test_code_classes` (
  `id` int(10) UNSIGNED NOT NULL,
  `name` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL,
  `project_id` int(10) UNSIGNED NOT NULL,
  `test_type` int(11) NOT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `test_code_classes`
--

INSERT INTO `test_code_classes` (`id`, `name`, `project_id`, `test_type`, `deleted_at`, `created_at`, `updated_at`) VALUES
(1, 'AclTest', 33, 1, NULL, '2019-02-26 18:30:48', '2019-02-26 18:30:48'),
(2, 'MigrationTest', 33, 2, NULL, '2019-02-26 18:40:09', '2019-02-26 21:18:16'),
(3, 'ProfileTest', 33, 1, NULL, '2019-02-26 21:03:20', '2019-02-26 21:03:37'),
(4, 'SubnetTest', 33, 1, NULL, '2019-02-26 21:10:11', '2019-02-26 21:10:11'),
(5, 'KeyValuePairTest', 33, 1, NULL, '2019-02-26 21:18:57', '2019-02-26 21:18:57'),
(6, 'PluginOptionsTest', 33, 1, NULL, '2019-02-26 21:30:54', '2019-02-26 21:30:54'),
(7, 'SetIntervalLiveDataTest', 35, 1, NULL, '2019-02-27 08:28:11', '2019-02-27 08:28:11'),
(8, 'WifiConfigurationStringsTest', 35, 1, NULL, '2019-02-27 08:54:06', '2019-02-27 08:54:06'),
(9, 'FirebaseAuthErrorCodeConverterTest', 35, 1, NULL, '2019-02-27 09:00:14', '2019-02-27 09:00:14'),
(10, 'RemoveReservationViewModelTest', 35, 2, NULL, '2019-02-27 09:42:27', '2019-02-27 09:43:11'),
(11, 'MapViewModelTest', 35, 1, NULL, '2019-02-27 09:56:03', '2019-02-27 09:56:03'),
(12, 'SnackbarMessageManagerTest', 35, 1, NULL, '2019-02-27 10:09:03', '2019-02-27 10:09:03'),
(13, 'OnboardingViewModelTest', 35, 1, NULL, '2019-02-27 10:17:18', '2019-02-27 10:17:18'),
(14, 'AgendaHeaderIndexerTest', 35, 1, NULL, '2019-02-27 10:20:55', '2019-02-27 10:20:55'),
(15, 'SessionHeaderIndexerTest', 35, 1, NULL, '2019-02-27 10:23:10', '2019-02-27 10:23:10'),
(16, 'LoadEventFiltersUseCaseTest', 35, 1, NULL, '2019-02-27 10:27:20', '2019-02-27 10:27:20'),
(17, 'ScheduleViewModelTest', 35, 1, NULL, '2019-02-27 10:48:44', '2019-02-27 10:48:44'),
(18, 'SessionDetailViewModelTest', 35, 1, NULL, '2019-02-27 11:32:10', '2019-02-27 11:32:10'),
(21, 'FirebaseSignInViewModelDelegateTest', 35, 1, NULL, '2019-02-27 12:14:56', '2019-02-27 12:14:56'),
(22, 'SignInViewModelTest', 35, 1, NULL, '2019-02-27 12:24:39', '2019-02-27 12:24:39'),
(24, 'SpeakerViewModelTest', 35, 1, NULL, '2019-02-27 12:38:10', '2019-02-27 12:38:10'),
(25, 'LaunchViewModelTest', 35, 1, NULL, '2019-02-27 12:40:21', '2019-02-27 12:40:21'),
(26, 'SerializerTest', 30, 1, NULL, '2019-02-27 14:09:10', '2019-02-27 14:09:10'),
(27, 'FileManagerTest', 30, 1, NULL, '2019-02-27 14:09:46', '2019-02-27 14:11:08'),
(28, 'UserEntityDataMapperTest', 30, 1, NULL, '2019-02-27 14:17:00', '2019-02-27 14:17:00'),
(29, 'RepositoryErrorBundleTest', 30, 1, NULL, '2019-02-27 14:24:26', '2019-02-27 14:24:26'),
(30, 'CloudUserDataStoreTest', 30, 1, NULL, '2019-02-27 14:27:05', '2019-02-27 14:27:05'),
(31, 'DiskUserDataStoreTest', 30, 1, NULL, '2019-02-27 14:33:02', '2019-02-27 14:33:02'),
(32, 'UserDataStoreFactoryTest', 30, 1, NULL, '2019-02-27 14:36:00', '2019-02-27 14:36:00'),
(33, 'UserDataRepositoryTest', 30, 1, NULL, '2019-02-27 14:45:51', '2019-02-27 14:46:12'),
(34, 'DefaultErrorBundleTest', 30, 1, NULL, '2019-02-28 03:21:21', '2019-02-28 03:21:21'),
(35, 'GetUserDetailsTest', 30, 1, NULL, '2019-02-28 03:24:12', '2019-02-28 03:24:12'),
(36, 'GetUserListTest', 30, 1, NULL, '2019-02-28 03:26:11', '2019-02-28 03:26:11'),
(37, 'UseCaseTest', 30, 1, NULL, '2019-02-28 03:30:27', '2019-02-28 03:30:27'),
(38, 'UserTest', 30, 1, NULL, '2019-02-28 03:35:05', '2019-02-28 03:35:05'),
(39, 'ErrorMessageFactoryTest', 30, 2, NULL, '2019-02-28 03:38:38', '2019-02-28 03:39:36'),
(40, 'UserModelDataMapperTest', 30, 2, NULL, '2019-02-28 03:41:50', '2019-02-28 03:41:50'),
(41, 'UserDetailsPresenterTest', 30, 2, NULL, '2019-02-28 03:44:40', '2019-02-28 03:44:40'),
(42, 'UserListPresenterTest', 30, 2, NULL, '2019-02-28 03:46:16', '2019-02-28 03:46:16'),
(43, 'AboutViewModelTest', 4, 1, NULL, '2019-02-28 04:03:08', '2019-02-28 04:03:23'),
(44, 'SourcesLocalDataSourceTest', 4, 2, NULL, '2019-02-28 04:07:24', '2019-02-28 04:10:19'),
(45, 'LoggedInUserDaoTest', 4, 2, NULL, '2019-02-28 04:18:59', '2019-02-28 04:18:59'),
(46, 'AuthTokenLocalDataSourceTest', 4, 2, NULL, '2019-02-28 04:23:37', '2019-02-28 04:23:37'),
(47, 'LoginLocalDataSourceTest', 4, 2, NULL, '2019-02-28 04:25:30', '2019-02-28 04:25:30'),
(48, 'TextViewExtensionTest', 4, 2, NULL, '2019-02-28 04:30:07', '2019-02-28 04:30:07'),
(49, 'SourcesRepositoryTest', 4, 1, NULL, '2019-02-28 07:20:22', '2019-02-28 07:20:22'),
(50, 'ConvertersTest', 4, 1, NULL, '2019-02-28 07:43:00', '2019-02-28 07:43:00'),
(51, 'DesignerNewsSearchConverterTest', 4, 1, NULL, '2019-02-28 07:48:55', '2019-02-28 07:49:10'),
(52, 'CommentsRemoteDataSourceTest', 4, 1, NULL, '2019-02-28 07:54:10', '2019-02-28 07:54:10'),
(53, 'CommentsRepositoryTest', 4, 1, NULL, '2019-02-28 07:59:45', '2019-02-28 07:59:45'),
(54, 'LoginRemoteDataSourceTest', 4, 1, NULL, '2019-02-28 08:03:34', '2019-02-28 08:03:34'),
(55, 'LoginRepositoryTest', 4, 1, NULL, '2019-02-28 08:06:34', '2019-02-28 08:06:34'),
(56, 'StoryResponseTest', 4, 1, NULL, '2019-02-28 08:14:04', '2019-02-28 08:14:04'),
(58, 'StoriesRemoteDataSourceTest', 4, 1, NULL, '2019-02-28 08:15:35', '2019-02-28 08:15:35'),
(59, 'StoriesRepositoryTest', 4, 1, NULL, '2019-02-28 08:19:09', '2019-02-28 08:19:33'),
(60, 'LoadStoriesUseCaseTest', 4, 1, NULL, '2019-02-28 08:29:59', '2019-02-28 08:29:59'),
(61, 'SearchStoriesUseCaseTest', 4, 1, NULL, '2019-02-28 08:44:45', '2019-02-28 08:44:45'),
(62, 'ShotWeigherTest', 4, 1, NULL, '2019-02-28 08:46:20', '2019-02-28 08:46:20'),
(63, 'DribbbleSearchConverterTest', 4, 1, NULL, '2019-02-28 08:48:46', '2019-02-28 08:48:46'),
(64, 'SearchRemoteDataSourceTest', 4, 1, NULL, '2019-02-28 08:55:49', '2019-02-28 08:55:49'),
(65, 'ShotsRepositoryTest', 4, 1, NULL, '2019-02-28 08:58:47', '2019-02-28 08:58:47'),
(66, 'ProductHuntRemoteDataSourceTest', 4, 1, NULL, '2019-02-28 09:01:02', '2019-02-28 09:01:02'),
(67, 'UserRemoteDataSourceTest', 4, 1, NULL, '2019-02-28 10:10:01', '2019-02-28 10:10:01'),
(68, 'UserRepositoryTest', 4, 1, NULL, '2019-02-28 10:13:19', '2019-02-28 10:13:19'),
(70, 'VotesRemoteDataSourceTest', 4, 1, NULL, '2019-02-28 10:16:23', '2019-02-28 10:16:23'),
(71, 'VotesRepositoryTest', 4, 1, NULL, '2019-02-28 10:19:33', '2019-02-28 10:19:33'),
(72, 'GetCommentsWithRepliesAndUsersUseCaseIntegrationTest', 4, 2, NULL, '2019-02-28 10:27:41', '2019-02-28 10:27:41'),
(73, 'GetCommentsWithRepliesAndUsersUseCaseTest', 4, 1, NULL, '2019-02-28 10:29:25', '2019-02-28 10:29:25'),
(74, 'GetCommentsWithRepliesUseCaseTest', 4, 1, NULL, '2019-02-28 10:31:48', '2019-02-28 10:31:48'),
(75, 'GetStoryUseCaseTest', 4, 1, NULL, '2019-02-28 10:37:15', '2019-02-28 10:37:15'),
(76, 'PostReplyUseCaseTest', 4, 1, NULL, '2019-02-28 10:38:44', '2019-02-28 10:38:44'),
(77, 'PostStoryCommentUseCaseTest', 4, 1, NULL, '2019-02-28 10:40:44', '2019-02-28 10:40:44'),
(78, 'UpvoteCommentUseCaseTest', 4, 1, NULL, '2019-02-28 10:43:58', '2019-02-28 10:43:58'),
(79, 'UpvoteStoryUseCaseTest', 4, 1, NULL, '2019-02-28 10:46:07', '2019-02-28 10:46:07'),
(80, 'LoginViewModelTest', 4, 1, NULL, '2019-02-28 10:49:09', '2019-02-28 10:49:09'),
(81, 'GetShareShotInfoUseCaseTest', 4, 1, NULL, '2019-02-28 11:10:08', '2019-02-28 11:10:08'),
(82, 'ShotViewModelTest', 4, 1, NULL, '2019-02-28 11:35:47', '2019-02-28 11:35:47'),
(83, 'SearchViewModelTest', 4, 1, NULL, '2019-02-28 12:29:42', '2019-02-28 12:29:42'),
(84, 'ByteArrayUploadDataProviderTest', 22, 1, NULL, '2019-02-28 12:44:24', '2019-02-28 12:47:33'),
(85, 'CastTimelineTrackerTest', 22, 1, NULL, '2019-02-28 12:50:09', '2019-02-28 12:50:09'),
(86, 'CronetDataSourceTest', 22, 1, NULL, '2019-02-28 12:52:09', '2019-02-28 12:52:09'),
(87, 'ImaAdsLoaderTest', 22, 1, NULL, '2019-02-28 13:35:52', '2019-02-28 13:35:52'),
(88, 'OpusPlaybackTest', 22, 2, NULL, '2019-02-28 16:42:47', '2019-02-28 16:42:47'),
(89, 'DefaultDataSourceTest', 22, 2, NULL, '2019-02-28 16:44:45', '2019-02-28 16:44:45'),
(90, 'VpxPlaybackTest', 22, 2, NULL, '2019-02-28 16:50:55', '2019-02-28 16:50:55'),
(91, 'AnalyticsCollectorTest', 22, 1, NULL, '2019-02-28 16:56:35', '2019-02-28 16:56:35'),
(92, 'Ac3UtilTest', 22, 1, NULL, '2019-02-28 17:03:11', '2019-02-28 17:03:11'),
(93, 'AudioFocusManagerTest', 22, 1, NULL, '2019-02-28 17:04:29', '2019-02-28 17:04:29'),
(94, 'SilenceSkippingAudioProcessorTest', 22, 1, NULL, '2019-02-28 17:36:26', '2019-02-28 17:36:26'),
(95, 'SimpleDecoderAudioRendererTest', 22, 1, NULL, '2019-02-28 17:52:25', '2019-02-28 17:52:25'),
(96, 'SonicAudioProcessorTest', 22, 1, NULL, '2019-02-28 17:55:01', '2019-02-28 17:55:01'),
(97, 'ClearKeyUtilTest', 22, 1, NULL, '2019-02-28 18:07:53', '2019-02-28 18:07:53'),
(98, 'DrmInitDataTest', 22, 1, NULL, '2019-02-28 18:12:49', '2019-02-28 18:12:49'),
(99, 'OfflineLicenseHelperTest', 22, 1, NULL, '2019-02-28 18:19:35', '2019-02-28 18:19:35'),
(100, 'AmrExtractorSeekTest', 22, 1, NULL, '2019-02-28 18:33:42', '2019-02-28 18:33:42'),
(101, 'AmrExtractorTest', 22, 1, NULL, '2019-02-28 18:39:18', '2019-02-28 18:39:18'),
(102, 'FlvExtractorTest', 22, 1, NULL, '2019-02-28 18:45:27', '2019-02-28 18:45:27'),
(103, 'DefaultEbmlReaderTest', 22, 1, NULL, '2019-03-01 02:30:33', '2019-03-01 02:30:33'),
(104, 'MatroskaExtractorTest', 22, 1, NULL, '2019-03-01 02:50:33', '2019-03-01 02:50:33'),
(105, 'VarintReaderTest', 22, 1, NULL, '2019-03-01 02:52:43', '2019-03-01 02:52:43'),
(106, 'Mp3ExtractorTest', 22, 1, NULL, '2019-03-01 02:55:42', '2019-03-01 02:55:42'),
(107, 'XingSeekerTest', 22, 1, NULL, '2019-03-01 02:57:43', '2019-03-01 02:57:43'),
(108, 'AtomParsersTest', 22, 1, NULL, '2019-03-01 03:05:27', '2019-03-01 03:05:27'),
(109, 'FragmentedMp4ExtractorTest', 22, 1, NULL, '2019-03-01 03:12:13', '2019-03-01 03:12:13'),
(110, 'MdtaMetadataEntryTest', 22, 1, NULL, '2019-03-01 03:14:21', '2019-03-01 03:14:21'),
(111, 'Mp4ExtractorTest', 22, 1, NULL, '2019-03-01 03:15:16', '2019-03-01 03:15:16'),
(112, 'PsshAtomUtilTest', 22, 1, NULL, '2019-03-01 03:16:21', '2019-03-01 03:16:21'),
(113, 'DefaultOggSeekerTest', 22, 1, NULL, '2019-03-01 03:18:34', '2019-03-01 03:18:34'),
(114, 'DefaultOggSeekerUtilMethodsTest', 22, 1, NULL, '2019-03-01 03:20:26', '2019-03-01 03:20:26'),
(115, 'OggExtractorTest', 22, 1, NULL, '2019-03-01 03:23:34', '2019-03-01 03:23:34'),
(116, 'OggPacketTest', 22, 1, NULL, '2019-03-01 03:29:58', '2019-03-01 03:29:58'),
(117, 'OggPageHeaderTest', 22, 1, NULL, '2019-03-01 03:35:23', '2019-03-01 03:35:23'),
(118, 'VorbisBitArrayTest', 22, 1, NULL, '2019-03-01 03:39:35', '2019-03-01 03:39:35'),
(119, 'VorbisReaderTest', 22, 1, NULL, '2019-03-01 03:47:26', '2019-03-01 03:47:26'),
(120, 'VorbisUtilTest', 22, 1, NULL, '2019-03-01 03:49:56', '2019-03-01 03:49:56'),
(121, 'RawCcExtractorTest', 22, 1, NULL, '2019-03-01 04:10:54', '2019-03-01 04:10:54'),
(122, 'Ac3ExtractorTest', 22, 1, NULL, '2019-03-01 04:11:56', '2019-03-01 04:11:56'),
(123, 'AdtsExtractorSeekTest', 22, 1, NULL, '2019-03-01 03:26:24', '2019-03-01 03:26:24'),
(124, 'AdtsExtractorTest', 22, 1, NULL, '2019-03-01 03:28:59', '2019-03-01 03:28:59'),
(125, 'AdtsReaderTest', 22, 1, NULL, '2019-03-01 03:38:08', '2019-03-01 03:38:08'),
(126, 'PsDurationReaderTest', 22, 1, NULL, '2019-03-01 05:28:45', '2019-03-01 05:28:45'),
(127, 'PsExtractorSeekTest', 22, 1, NULL, '2019-03-01 05:32:52', '2019-03-01 05:32:52'),
(128, 'PsExtractorTest', 22, 1, NULL, '2019-03-01 07:22:50', '2019-03-01 07:22:50'),
(129, 'SectionReaderTest', 22, 1, NULL, '2019-03-01 07:23:54', '2019-03-01 07:23:54'),
(130, 'TsDurationReaderTest', 22, 1, NULL, '2019-03-01 07:29:31', '2019-03-01 07:29:31'),
(131, 'TsExtractorTest', 22, 1, NULL, '2019-03-01 07:41:53', '2019-03-01 07:41:53'),
(132, 'WavExtractorTest', 22, 1, NULL, '2019-03-01 08:27:26', '2019-03-01 08:27:26'),
(133, 'ConstantBitrateSeekMapTest', 22, 1, NULL, '2019-03-01 08:29:49', '2019-03-01 08:29:49'),
(134, 'DefaultExtractorInputTest', 22, 1, NULL, '2019-03-01 12:30:11', '2019-03-01 12:30:11'),
(135, 'DefaultExtractorsFactoryTest', 22, 1, NULL, '2019-03-04 04:03:08', '2019-03-04 04:03:08'),
(136, 'Id3PeekerTest', 22, 1, NULL, '2019-03-04 04:10:08', '2019-03-04 04:10:08');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `projects`
--
ALTER TABLE `projects`
  ADD PRIMARY KEY (`id`),
  ADD KEY `projects_technology_id_foreign` (`technology_id`);

--
-- Indexes for table `source_codes`
--
ALTER TABLE `source_codes`
  ADD PRIMARY KEY (`id`),
  ADD KEY `source_codes_source_code_class_id_foreign` (`source_code_class_id`);

--
-- Indexes for table `source_code_classes`
--
ALTER TABLE `source_code_classes`
  ADD PRIMARY KEY (`id`),
  ADD KEY `source_code_classes_project_id_foreign` (`project_id`);

--
-- Indexes for table `source_code_test_code`
--
ALTER TABLE `source_code_test_code`
  ADD UNIQUE KEY `source_code_test_code_source_code_id_test_code_id_unique` (`source_code_id`,`test_code_id`),
  ADD KEY `source_code_test_code_test_code_id_foreign` (`test_code_id`);

--
-- Indexes for table `technologies`
--
ALTER TABLE `technologies`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `technologies_tag_unique` (`tag`);

--
-- Indexes for table `test_codes`
--
ALTER TABLE `test_codes`
  ADD PRIMARY KEY (`id`),
  ADD KEY `test_codes_test_code_class_id_foreign` (`test_code_class_id`);

--
-- Indexes for table `test_code_classes`
--
ALTER TABLE `test_code_classes`
  ADD PRIMARY KEY (`id`),
  ADD KEY `test_code_classes_project_id_foreign` (`project_id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `projects`
--
ALTER TABLE `projects`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=53;

--
-- AUTO_INCREMENT for table `source_codes`
--
ALTER TABLE `source_codes`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=244;

--
-- AUTO_INCREMENT for table `source_code_classes`
--
ALTER TABLE `source_code_classes`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=131;

--
-- AUTO_INCREMENT for table `technologies`
--
ALTER TABLE `technologies`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;

--
-- AUTO_INCREMENT for table `test_codes`
--
ALTER TABLE `test_codes`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=618;

--
-- AUTO_INCREMENT for table `test_code_classes`
--
ALTER TABLE `test_code_classes`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=137;

--
-- Constraints for dumped tables
--

--
-- Constraints for table `projects`
--
ALTER TABLE `projects`
  ADD CONSTRAINT `projects_technology_id_foreign` FOREIGN KEY (`technology_id`) REFERENCES `technologies` (`id`);

--
-- Constraints for table `source_codes`
--
ALTER TABLE `source_codes`
  ADD CONSTRAINT `source_codes_source_code_class_id_foreign` FOREIGN KEY (`source_code_class_id`) REFERENCES `source_code_classes` (`id`);

--
-- Constraints for table `source_code_classes`
--
ALTER TABLE `source_code_classes`
  ADD CONSTRAINT `source_code_classes_project_id_foreign` FOREIGN KEY (`project_id`) REFERENCES `projects` (`id`);

--
-- Constraints for table `source_code_test_code`
--
ALTER TABLE `source_code_test_code`
  ADD CONSTRAINT `source_code_test_code_source_code_id_foreign` FOREIGN KEY (`source_code_id`) REFERENCES `source_codes` (`id`),
  ADD CONSTRAINT `source_code_test_code_test_code_id_foreign` FOREIGN KEY (`test_code_id`) REFERENCES `test_codes` (`id`);

--
-- Constraints for table `test_codes`
--
ALTER TABLE `test_codes`
  ADD CONSTRAINT `test_codes_test_code_class_id_foreign` FOREIGN KEY (`test_code_class_id`) REFERENCES `test_code_classes` (`id`);

--
-- Constraints for table `test_code_classes`
--
ALTER TABLE `test_code_classes`
  ADD CONSTRAINT `test_code_classes_project_id_foreign` FOREIGN KEY (`project_id`) REFERENCES `projects` (`id`);
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
